#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Упражнения: Введение в Python

Этот файл содержит практические упражнения для закрепления
материала по введению в Python.

Инструкции:
1. Прочитайте задание
2. Напишите свое решение
3. Запустите код и проверьте результат
4. Сравните с предложенным решением
"""

import sys
import platform
from datetime import datetime

# ========================================
# РАЗДЕЛ 1: HELLO WORLD И БАЗОВЫЙ ВЫВОД
# ========================================

def exercise_01():
    """
    Упражнение 1: Персональное приветствие
    
    Задание:
    Создайте программу, которая:
    1. Выводит "Привет, мир!"
    2. Выводит ваше имя
    3. Выводит текущую дату и время
    4. Выводит версию Python
    
    Ожидаемый результат:
    Привет, мир!
    Меня зовут: [Ваше имя]
    Сегодня: [текущая дата]
    Версия Python: [версия]
    """
    print("=== Упражнение 1: Персональное приветствие ===")
    
    # TODO: Напишите ваш код здесь
    # Подсказка: используйте print(), datetime.now(), platform.python_version()
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # print("Привет, мир!")
    # print("Меня зовут: Студент Python")
    # print(f"Сегодня: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    # print(f"Версия Python: {platform.python_version()}")
    
    print()

def exercise_02():
    """
    Упражнение 2: Калькулятор возраста
    
    Задание:
    Создайте переменные:
    - current_year = 2024
    - birth_year = 1995
    
    Вычислите и выведите:
    1. Возраст в годах
    2. Возраст в месяцах (приблизительно)
    3. Возраст в днях (приблизительно)
    4. Красиво отформатированную строку с результатами
    """
    print("=== Упражнение 2: Калькулятор возраста ===")
    
    # TODO: Напишите ваш код здесь
    # Подсказка: умножьте годы на 12 для месяцев, на 365 для дней
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # current_year = 2024
    # birth_year = 1995
    # 
    # age_years = current_year - birth_year
    # age_months = age_years * 12
    # age_days = age_years * 365
    # 
    # print(f"Возраст:")
    # print(f"  Лет: {age_years}")
    # print(f"  Месяцев: {age_months}")
    # print(f"  Дней: {age_days}")
    # print(f"Полная информация: {age_years} лет, {age_months} месяцев, {age_days} дней")
    
    print()

# ========================================
# РАЗДЕЛ 2: ТИПЫ ДАННЫХ И ПЕРЕМЕННЫЕ
# ========================================

def exercise_03():
    """
    Упражнение 3: Анализ типов данных
    
    Задание:
    Создайте следующие переменные и определите их типы:
    1. student_name = "Анна Иванова"
    2. student_age = 20
    3. student_height = 165.5
    4. is_enrolled = True
    5. graduation_year = None
    
    Выведите каждую переменную, ее тип и размер в памяти.
    """
    print("=== Упражнение 3: Анализ типов данных ===")
    
    # TODO: Напишите ваш код здесь
    # Подсказка: используйте type(), sys.getsizeof()
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # student_name = "Анна Иванова"
    # student_age = 20
    # student_height = 165.5
    # is_enrolled = True
    # graduation_year = None
    # 
    # variables = [
    #     ("student_name", student_name),
    #     ("student_age", student_age),
    #     ("student_height", student_height),
    #     ("is_enrolled", is_enrolled),
    #     ("graduation_year", graduation_year)
    # ]
    # 
    # for name, value in variables:
    #     print(f"{name:15} = {value:15} | Тип: {type(value).__name__:10} | Размер: {sys.getsizeof(value):3} байт")
    
    print()

def exercise_04():
    """
    Упражнение 4: Преобразование типов
    
    Задание:
    У вас есть строковые переменные:
    - str_number = "42"
    - str_float = "3.14"
    - str_boolean = "True"
    
    Преобразуйте их в соответствующие типы и выполните операции:
    1. str_number в int, прибавьте 8
    2. str_float в float, умножьте на 2
    3. str_boolean в bool, инвертируйте значение
    """
    print("=== Упражнение 4: Преобразование типов ===")
    
    # TODO: Напишите ваш код здесь
    # Подсказка: используйте int(), float(), bool(), not
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # str_number = "42"
    # str_float = "3.14"
    # str_boolean = "True"
    # 
    # # Преобразования
    # number = int(str_number)
    # float_number = float(str_float)
    # boolean_value = bool(str_boolean)  # Внимание: любая непустая строка = True
    # 
    # # Операции
    # result1 = number + 8
    # result2 = float_number * 2
    # result3 = not boolean_value
    # 
    # print(f"'{str_number}' + 8 = {result1}")
    # print(f"'{str_float}' * 2 = {result2}")
    # print(f"not '{str_boolean}' = {result3}")
    
    print()

# ========================================
# РАЗДЕЛ 3: ОПЕРАЦИИ И ФОРМАТИРОВАНИЕ
# ========================================

def exercise_05():
    """
    Упражнение 5: Математические операции
    
    Задание:
    Создайте программу для расчета площади и периметра прямоугольника:
    1. Запросите длину и ширину (или используйте заданные значения)
    2. Вычислите площадь и периметр
    3. Выведите результаты в красиво отформатированном виде
    4. Добавьте проверку на корректность входных данных
    """
    print("=== Упражнение 5: Математические операции ===")
    
    # TODO: Напишите ваш код здесь
    # Подсказка: площадь = длина * ширина, периметр = 2 * (длина + ширина)
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # # Для демонстрации используем заданные значения
    # length = 10.5
    # width = 7.2
    # 
    # # Проверка корректности
    # if length > 0 and width > 0:
    #     area = length * width
    #     perimeter = 2 * (length + width)
    #     
    #     print(f"Прямоугольник:")
    #     print(f"  Длина: {length} см")
    #     print(f"  Ширина: {width} см")
    #     print(f"  Площадь: {area:.2f} см²")
    #     print(f"  Периметр: {perimeter:.2f} см")
    # else:
    #     print("Ошибка: длина и ширина должны быть положительными числами")
    
    print()

def exercise_06():
    """
    Упражнение 6: Продвинутое форматирование строк
    
    Задание:
    Создайте информационную карточку товара с использованием
    различных методов форматирования:
    
    Данные товара:
    - name = "Ноутбук ASUS"
    - price = 75000.99
    - discount = 15  # процент скидки
    - in_stock = True
    - rating = 4.7
    """
    print("=== Упражнение 6: Продвинутое форматирование строк ===")
    
    # TODO: Напишите ваш код здесь
    # Создайте красивую карточку товара с:
    # - названием
    # - первоначальной ценой
    # - ценой со скидкой
    # - процентом скидки
    # - наличием в магазине
    # - рейтингом
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # name = "Ноутбук ASUS"
    # price = 75000.99
    # discount = 15
    # in_stock = True
    # rating = 4.7
    # 
    # # Вычисления
    # discount_amount = price * discount / 100
    # final_price = price - discount_amount
    # availability = "В наличии" if in_stock else "Нет в наличии"
    # 
    # # Форматирование различными способами
    # print("╔" + "═" * 40 + "╗")
    # print(f"║ {name:^38} ║")
    # print("╠" + "═" * 40 + "╣")
    # print(f"║ Цена: {price:>20,.2f} ₽ ║")
    # print(f"║ Скидка: {discount:>18}% ║")
    # print(f"║ Экономия: {discount_amount:>16,.2f} ₽ ║")
    # print(f"║ Итого: {final_price:>19,.2f} ₽ ║")
    # print("╠" + "═" * 40 + "╣")
    # print(f"║ Статус: {availability:>17} ║")
    # print(f"║ Рейтинг: {'★' * int(rating):>16} ║")
    # print(f"║          {rating}/5.0{' ':>12} ║")
    # print("╚" + "═" * 40 + "╝")
    
    print()

# ========================================
# РАЗДЕЛ 4: УСЛОВНЫЕ КОНСТРУКЦИИ
# ========================================

def exercise_07():
    """
    Упражнение 7: Система оценок
    
    Задание:
    Создайте программу для определения буквенной оценки по числовому баллу:
    - 90-100: A (Отлично)
    - 80-89: B (Хорошо)
    - 70-79: C (Удовлетворительно)
    - 60-69: D (Неудовлетворительно)
    - 0-59: F (Провал)
    
    Протестируйте на значениях: 95, 87, 73, 65, 45
    """
    print("=== Упражнение 7: Система оценок ===")
    
    # TODO: Напишите ваш код здесь
    # Подсказка: используйте if-elif-else
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # def get_grade(score):
    #     if score >= 90:
    #         return "A (Отлично)"
    #     elif score >= 80:
    #         return "B (Хорошо)"
    #     elif score >= 70:
    #         return "C (Удовлетворительно)"
    #     elif score >= 60:
    #         return "D (Неудовлетворительно)"
    #     else:
    #         return "F (Провал)"
    # 
    # test_scores = [95, 87, 73, 65, 45]
    # 
    # print("Результаты оценивания:")
    # for score in test_scores:
    #     grade = get_grade(score)
    #     print(f"  {score:3} баллов → {grade}")
    
    print()

def exercise_08():
    """
    Упражнение 8: Високосный год
    
    Задание:
    Создайте функцию для определения високосного года.
    Правила:
    - Год високосный, если он делится на 4
    - НО если год делится на 100, то он не високосный
    - НО если год делится на 400, то он високосный
    
    Протестируйте на годах: 2000, 1900, 2004, 2021, 2024
    """
    print("=== Упражнение 8: Високосный год ===")
    
    # TODO: Напишите ваш код здесь
    # Подсказка: используйте оператор % для проверки деления нацело
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # def is_leap_year(year):
    #     if year % 400 == 0:
    #         return True
    #     elif year % 100 == 0:
    #         return False
    #     elif year % 4 == 0:
    #         return True
    #     else:
    #         return False
    # 
    # test_years = [2000, 1900, 2004, 2021, 2024]
    # 
    # print("Проверка високосных лет:")
    # for year in test_years:
    #     leap = is_leap_year(year)
    #     status = "високосный" if leap else "обычный"
    #     print(f"  {year} → {status}")
    
    print()

# ========================================
# РАЗДЕЛ 5: РАБОТА СО СТРОКАМИ
# ========================================

def exercise_09():
    """
    Упражнение 9: Анализ текста
    
    Задание:
    Напишите программу для анализа текста:
    
    text = "Python - это высокоуровневый язык программирования"
    
    Выведите:
    1. Длину текста
    2. Количество слов
    3. Количество символов без пробелов
    4. Текст в верхнем регистре
    5. Текст в нижнем регистре
    6. Первое и последнее слово
    7. Есть ли в тексте слово "Python"
    """
    print("=== Упражнение 9: Анализ текста ===")
    
    # TODO: Напишите ваш код здесь
    # Подсказка: используйте len(), split(), upper(), lower(), in, strip()
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # text = "Python - это высокоуровневый язык программирования"
    # 
    # # Анализ
    # length = len(text)
    # words = text.split()
    # word_count = len(words)
    # chars_no_spaces = len(text.replace(" ", ""))
    # upper_text = text.upper()
    # lower_text = text.lower()
    # first_word = words[0] if words else ""
    # last_word = words[-1] if words else ""
    # has_python = "Python" in text
    # 
    # # Вывод результатов
    # print(f"Исходный текст: '{text}'")
    # print(f"Длина текста: {length} символов")
    # print(f"Количество слов: {word_count}")
    # print(f"Символов без пробелов: {chars_no_spaces}")
    # print(f"Верхний регистр: '{upper_text}'")
    # print(f"Нижний регистр: '{lower_text}'")
    # print(f"Первое слово: '{first_word}'")
    # print(f"Последнее слово: '{last_word}'")
    # print(f"Содержит 'Python': {has_python}")
    
    print()

def exercise_10():
    """
    Упражнение 10: Валидация email
    
    Задание:
    Создайте простую функцию валидации email адреса.
    Проверьте следующие условия:
    1. Содержит символ @
    2. @ не в начале и не в конце
    3. После @ есть точка
    4. Длина больше 5 символов
    
    Протестируйте на адресах:
    - "user@example.com"
    - "invalid-email"
    - "@invalid.com"
    - "user@"
    - "a@b.c"
    """
    print("=== Упражнение 10: Валидация email ===")
    
    # TODO: Напишите ваш код здесь
    # Подсказка: используйте in, find(), rfind(), len()
    
    # РЕШЕНИЕ (раскомментируйте после попытки):
    # def validate_email(email):
    #     # Проверка длины
    #     if len(email) <= 5:
    #         return False, "Слишком короткий email"
    #     
    #     # Проверка наличия @
    #     if "@" not in email:
    #         return False, "Отсутствует символ @"
    #     
    #     # Проверка позиции @
    #     at_position = email.find("@")
    #     if at_position == 0:
    #         return False, "@ не может быть в начале"
    #     if at_position == len(email) - 1:
    #         return False, "@ не может быть в конце"
    #     
    #     # Проверка наличия точки после @
    #     domain_part = email[at_position + 1:]
    #     if "." not in domain_part:
    #         return False, "Отсутствует точка в домене"
    #     
    #     return True, "Email корректный"
    # 
    # test_emails = [
    #     "user@example.com",
    #     "invalid-email", 
    #     "@invalid.com",
    #     "user@",
    #     "a@b.c"
    # ]
    # 
    # print("Проверка email адресов:")
    # for email in test_emails:
    #     is_valid, message = validate_email(email)
    #     status = "✓" if is_valid else "✗"
    #     print(f"  {status} {email:20} → {message}")
    
    print()

# ========================================
# ГЛАВНАЯ ФУНКЦИЯ
# ========================================

def main():
    """
    Главная функция для запуска всех упражнений
    """
    print("🎯 УПРАЖНЕНИЯ: ВВЕДЕНИЕ В PYTHON")
    print("=" * 60)
    print("Выполняйте упражнения по порядку.")
    print("Сначала попробуйте решить самостоятельно,")
    print("затем сравните с предложенным решением.")
    print("=" * 60)
    print()
    
    exercises = [
        exercise_01, exercise_02, exercise_03, exercise_04, exercise_05,
        exercise_06, exercise_07, exercise_08, exercise_09, exercise_10
    ]
    
    for i, exercise in enumerate(exercises, 1):
        try:
            exercise()
        except Exception as e:
            print(f"❌ Ошибка в упражнении {i}: {e}")
            print()
    
    print("=" * 60)
    print("🎉 Поздравляем! Вы завершили упражнения по введению в Python.")
    print("📚 Переходите к следующему разделу: Базовые конструкции языка")
    print("=" * 60)

if __name__ == "__main__":
    main() 