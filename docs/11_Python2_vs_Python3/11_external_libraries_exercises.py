#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π:
- –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å Pandas –∏ NumPy
- –í–µ–±-API —Å Flask/FastAPI
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import subprocess
import importlib
import json
import time
from datetime import datetime, timedelta

def check_package(package_name, import_name=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞"""
    if import_name is None:
        import_name = package_name
    
    try:
        importlib.import_module(import_name)
        return True
    except ImportError:
        return False

def exercise_01_data_analysis_pipeline():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –ü–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    
    –ó–∞–¥–∞—á–∞:
    –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    Pandas –∏ NumPy –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –ü–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===")
    
    if not (check_package('pandas') and check_package('numpy')):
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: pandas, numpy")
        return
    
    import pandas as pd
    import numpy as np
    
    # –†–ï–®–ï–ù–ò–ï:
    
    class SalesAnalyzer:
        """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
        
        def __init__(self):
            self.data = None
            self.processed_data = None
        
        def generate_sample_data(self, n_records=1000):
            """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
            np.random.seed(42)
            
            # –¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products = ['–ù–æ—É—Ç–±—É–∫', '–°–º–∞—Ä—Ç—Ñ–æ–Ω', '–ü–ª–∞–Ω—à–µ—Ç', '–ù–∞—É—à–Ω–∏–∫–∏', '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–ú—ã—à—å']
            categories = ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã']
            regions = ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ö–∞–∑–∞–Ω—å', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫']
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            data = []
            start_date = datetime(2023, 1, 1)
            
            for i in range(n_records):
                product = np.random.choice(products)
                
                # –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≤–∞—Ä–∞
                price_map = {
                    '–ù–æ—É—Ç–±—É–∫': (50000, 150000),
                    '–°–º–∞—Ä—Ç—Ñ–æ–Ω': (15000, 80000),
                    '–ü–ª–∞–Ω—à–µ—Ç': (20000, 60000),
                    '–ù–∞—É—à–Ω–∏–∫–∏': (2000, 15000),
                    '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞': (1000, 8000),
                    '–ú—ã—à—å': (500, 5000)
                }
                
                min_price, max_price = price_map[product]
                price = np.random.uniform(min_price, max_price)
                quantity = np.random.randint(1, 6)
                
                # –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏
                random_days = np.random.randint(0, 365)
                sale_date = start_date + timedelta(days=random_days)
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
                if product in ['–ù–æ—É—Ç–±—É–∫', '–ü–ª–∞–Ω—à–µ—Ç']:
                    category = '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã'
                elif product in ['–°–º–∞—Ä—Ç—Ñ–æ–Ω']:
                    category = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'
                else:
                    category = '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'
                
                data.append({
                    'date': sale_date,
                    'product': product,
                    'category': category,
                    'price': round(price, 2),
                    'quantity': quantity,
                    'region': np.random.choice(regions),
                    'customer_id': f'CUST_{i % 200:04d}',  # 200 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                    'discount': np.random.uniform(0, 0.3) if np.random.random() < 0.3 else 0
                })
            
            self.data = pd.DataFrame(data)
            self.data['revenue'] = self.data['price'] * self.data['quantity'] * (1 - self.data['discount'])
            
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.data)} –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
            return self.data
        
        def clean_data(self):
            """–û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
            if self.data is None:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            print("–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.processed_data = self.data.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            self.processed_data['year'] = self.processed_data['date'].dt.year
            self.processed_data['month'] = self.processed_data['date'].dt.month
            self.processed_data['quarter'] = self.processed_data['date'].dt.quarter
            self.processed_data['day_of_week'] = self.processed_data['date'].dt.day_name()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            self.processed_data['price_category'] = pd.cut(
                self.processed_data['price'], 
                bins=[0, 5000, 20000, 50000, float('inf')],
                labels=['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è', '–ü—Ä–µ–º–∏—É–º']
            )
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É IQR
            Q1 = self.processed_data['revenue'].quantile(0.25)
            Q3 = self.processed_data['revenue'].quantile(0.75)
            IQR = Q3 - Q1
            
            outlier_mask = (
                (self.processed_data['revenue'] < (Q1 - 1.5 * IQR)) | 
                (self.processed_data['revenue'] > (Q3 + 1.5 * IQR))
            )
            
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤: {outlier_mask.sum()}")
            
            # –ú–∞—Ä–∫–∏—Ä—É–µ–º –≤—ã–±—Ä–æ—Å—ã, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º
            self.processed_data['is_outlier'] = outlier_mask
            
            print("–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        def analyze_sales(self):
            """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂"""
            if self.processed_data is None:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            
            print("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂...")
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_revenue = self.processed_data['revenue'].sum()
            total_orders = len(self.processed_data)
            avg_order_value = self.processed_data['revenue'].mean()
            
            print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} —Ä—É–±.")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders:,}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:,.0f} —Ä—É–±.")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            product_stats = self.processed_data.groupby('product').agg({
                'revenue': ['sum', 'count', 'mean'],
                'quantity': 'sum'
            }).round(2)
            
            product_stats.columns = ['–í—ã—Ä—É—á–∫–∞', '–ó–∞–∫–∞–∑–æ–≤', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            product_stats = product_stats.sort_values('–í—ã—Ä—É—á–∫–∞', ascending=False)
            
            print(f"\nüí∞ –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã—Ä—É—á–∫–µ:")
            print(product_stats.head())
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            region_stats = self.processed_data.groupby('region').agg({
                'revenue': 'sum',
                'customer_id': 'nunique'
            }).round(2)
            
            region_stats.columns = ['–í—ã—Ä—É—á–∫–∞', '–ö–ª–∏–µ–Ω—Ç–æ–≤']
            region_stats = region_stats.sort_values('–í—ã—Ä—É—á–∫–∞', ascending=False)
            
            print(f"\nüåç –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:")
            print(region_stats)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
            monthly_sales = self.processed_data.groupby('month')['revenue'].sum()
            
            print(f"\nüìÖ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º:")
            for month, revenue in monthly_sales.items():
                print(f"  –ú–µ—Å—è—Ü {month}: {revenue:,.0f} —Ä—É–±.")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
            customer_stats = self.processed_data.groupby('customer_id').agg({
                'revenue': 'sum',
                'date': 'count'
            })
            customer_stats.columns = ['–û–±—â–∞—è_—Å—É–º–º–∞', '–ó–∞–∫–∞–∑–æ–≤']
            
            print(f"\nüë• –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤:")
            print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(customer_stats)}")
            print(f"  –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {customer_stats['–û–±—â–∞—è_—Å—É–º–º–∞'].mean():,.0f} —Ä—É–±.")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {customer_stats['–ó–∞–∫–∞–∑–æ–≤'].mean():.1f}")
            
            # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã
            top_customers = customer_stats.sort_values('–û–±—â–∞—è_—Å—É–º–º–∞', ascending=False).head()
            print(f"\nüèÜ –¢–æ–ø-5 –∫–ª–∏–µ–Ω—Ç–æ–≤:")
            print(top_customers)
            
            return {
                'total_revenue': total_revenue,
                'total_orders': total_orders,
                'avg_order_value': avg_order_value,
                'product_stats': product_stats,
                'region_stats': region_stats,
                'monthly_sales': monthly_sales
            }
        
        def create_pivot_tables(self):
            """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
            if self.processed_data is None:
                return
            
            print("\nüìã –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            
            # –°–≤–æ–¥–Ω–∞—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            pivot1 = self.processed_data.pivot_table(
                values='revenue',
                index='region',
                columns='category',
                aggfunc='sum',
                fill_value=0
            )
            
            print("–í—ã—Ä—É—á–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            print(pivot1.round(0))
            
            # –°–≤–æ–¥–Ω–∞—è –ø–æ –º–µ—Å—è—Ü–∞–º –∏ —Ç–æ–≤–∞—Ä–∞–º
            pivot2 = self.processed_data.pivot_table(
                values='quantity',
                index='month',
                columns='product',
                aggfunc='sum',
                fill_value=0
            )
            
            print(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º:")
            print(pivot2)
        
        def export_results(self, filename='sales_analysis.json'):
            """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
            if self.processed_data is None:
                return
            
            results = self.analyze_sales()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º pandas –æ–±—ä–µ–∫—Ç—ã –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ
            export_data = {
                'summary': {
                    'total_revenue': float(results['total_revenue']),
                    'total_orders': int(results['total_orders']),
                    'avg_order_value': float(results['avg_order_value'])
                },
                'monthly_sales': results['monthly_sales'].to_dict(),
                'top_products': results['product_stats'].head().to_dict(),
                'regions': results['region_stats'].to_dict()
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    analyzer = SalesAnalyzer()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    analyzer.generate_sample_data(1500)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    analyzer.clean_data()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    analyzer.analyze_sales()
    
    # –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    analyzer.create_pivot_tables()
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    analyzer.export_results()
    
    print("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def exercise_02_web_api_development():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Web API
    
    –ó–∞–¥–∞—á–∞:
    –°–æ–∑–¥–∞–π—Ç–µ RESTful API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∫–Ω–∏–≥
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Flask, –≤–∫–ª—é—á–∞—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫.
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Web API ===")
    
    if not check_package('flask'):
        print("Flask –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        return
    
    from flask import Flask, request, jsonify
    import json
    from datetime import datetime
    
    # –†–ï–®–ï–ù–ò–ï:
    
    class Book:
        """–ú–æ–¥–µ–ª—å –∫–Ω–∏–≥–∏"""
        
        def __init__(self, title, author, isbn, year, genre):
            self.id = None
            self.title = title
            self.author = author
            self.isbn = isbn
            self.year = year
            self.genre = genre
            self.created_at = datetime.now().isoformat()
            self.updated_at = self.created_at
        
        def to_dict(self):
            return {
                'id': self.id,
                'title': self.title,
                'author': self.author,
                'isbn': self.isbn,
                'year': self.year,
                'genre': self.genre,
                'created_at': self.created_at,
                'updated_at': self.updated_at
            }
        
        def update(self, **kwargs):
            for key, value in kwargs.items():
                if hasattr(self, key) and key not in ['id', 'created_at']:
                    setattr(self, key, value)
            self.updated_at = datetime.now().isoformat()
    
    class BookManager:
        """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏"""
        
        def __init__(self):
            self.books = {}
            self.next_id = 1
            self._load_sample_data()
        
        def _load_sample_data(self):
            """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
            sample_books = [
                Book("1984", "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª", "978-0-452-28423-4", 1949, "–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è"),
                Book("–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", "–î–∂.–ö. –†–æ—É–ª–∏–Ω–≥", "978-0-439-70818-8", 1997, "–§—ç–Ω—Ç–µ–∑–∏"),
                Book("–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü", "–î–∂.–†.–†. –¢–æ–ª–∫–∏–Ω", "978-0-547-92822-7", 1954, "–§—ç–Ω—Ç–µ–∑–∏"),
                Book("–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤", "978-5-17-082687-9", 1967, "–†–æ–º–∞–Ω")
            ]
            
            for book in sample_books:
                self.add_book(book)
        
        def add_book(self, book):
            """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏"""
            book.id = self.next_id
            self.books[self.next_id] = book
            self.next_id += 1
            return book
        
        def get_book(self, book_id):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ ID"""
            return self.books.get(book_id)
        
        def get_all_books(self):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–∏–≥"""
            return list(self.books.values())
        
        def update_book(self, book_id, **kwargs):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏"""
            book = self.books.get(book_id)
            if book:
                book.update(**kwargs)
                return book
            return None
        
        def delete_book(self, book_id):
            """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏"""
            return self.books.pop(book_id, None)
        
        def search_books(self, query):
            """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É"""
            results = []
            query_lower = query.lower()
            
            for book in self.books.values():
                if (query_lower in book.title.lower() or 
                    query_lower in book.author.lower() or
                    query_lower in book.genre.lower()):
                    results.append(book)
            
            return results
        
        def get_books_by_genre(self, genre):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥ –ø–æ –∂–∞–Ω—Ä—É"""
            return [book for book in self.books.values() 
                   if book.genre.lower() == genre.lower()]
        
        def get_statistics(self):
            """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
            books = list(self.books.values())
            
            if not books:
                return {}
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∂–∞–Ω—Ä–∞–º
            genres = {}
            years = []
            
            for book in books:
                genres[book.genre] = genres.get(book.genre, 0) + 1
                years.append(book.year)
            
            return {
                'total_books': len(books),
                'genres': genres,
                'oldest_book': min(years),
                'newest_book': max(years),
                'avg_year': sum(years) / len(years)
            }
    
    def create_library_api():
        """–°–æ–∑–¥–∞–Ω–∏–µ Flask API –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        
        app = Flask(__name__)
        book_manager = BookManager()
        
        @app.route('/api/books', methods=['GET'])
        def get_books():
            """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –ø–æ–∏—Å–∫"""
            search_query = request.args.get('search')
            genre = request.args.get('genre')
            
            if search_query:
                books = book_manager.search_books(search_query)
            elif genre:
                books = book_manager.get_books_by_genre(genre)
            else:
                books = book_manager.get_all_books()
            
            return jsonify({
                'books': [book.to_dict() for book in books],
                'total': len(books)
            })
        
        @app.route('/api/books/<int:book_id>', methods=['GET'])
        def get_book(book_id):
            """–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID"""
            book = book_manager.get_book(book_id)
            
            if book:
                return jsonify(book.to_dict())
            else:
                return jsonify({'error': '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        @app.route('/api/books', methods=['POST'])
        def create_book():
            """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É"""
            data = request.get_json()
            
            required_fields = ['title', 'author', 'isbn', 'year', 'genre']
            if not all(field in data for field in required_fields):
                return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'}), 400
            
            try:
                book = Book(
                    title=data['title'],
                    author=data['author'],
                    isbn=data['isbn'],
                    year=int(data['year']),
                    genre=data['genre']
                )
                
                created_book = book_manager.add_book(book)
                return jsonify(created_book.to_dict()), 201
                
            except (ValueError, TypeError) as e:
                return jsonify({'error': f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}'}), 400
        
        @app.route('/api/books/<int:book_id>', methods=['PUT'])
        def update_book(book_id):
            """–û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É"""
            data = request.get_json()
            
            updated_book = book_manager.update_book(book_id, **data)
            
            if updated_book:
                return jsonify(updated_book.to_dict())
            else:
                return jsonify({'error': '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        @app.route('/api/books/<int:book_id>', methods=['DELETE'])
        def delete_book(book_id):
            """–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É"""
            deleted_book = book_manager.delete_book(book_id)
            
            if deleted_book:
                return jsonify({'message': '–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞', 'book': deleted_book.to_dict()})
            else:
                return jsonify({'error': '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        @app.route('/api/statistics', methods=['GET'])
        def get_statistics():
            """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
            stats = book_manager.get_statistics()
            return jsonify(stats)
        
        @app.route('/', methods=['GET'])
        def index():
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π API"""
            docs = {
                'message': 'Library API Documentation',
                'endpoints': {
                    'GET /api/books': '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏',
                    'GET /api/books?search=query': '–ü–æ–∏—Å–∫ –∫–Ω–∏–≥',
                    'GET /api/books?genre=genre': '–ö–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É',
                    'GET /api/books/<id>': '–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID',
                    'POST /api/books': '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É',
                    'PUT /api/books/<id>': '–û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É',
                    'DELETE /api/books/<id>': '–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É',
                    'GET /api/statistics': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏'
                },
                'example_book': {
                    'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏',
                    'author': '–ê–≤—Ç–æ—Ä',
                    'isbn': '978-0-123456-78-9',
                    'year': 2024,
                    'genre': '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'
                }
            }
            return jsonify(docs)
        
        return app
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API
    print("–°–æ–∑–¥–∞–Ω–∏–µ Library API...")
    
    app = create_library_api()
    
    print("‚úÖ Flask API —Å–æ–∑–¥–∞–Ω!")
    print("\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    
    for rule in app.url_map.iter_rules():
        methods = ', '.join(rule.methods - {'HEAD', 'OPTIONS'})
        print(f"  {methods:15} {rule.rule}")
    
    print("\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print("  GET  /api/books              - –í—Å–µ –∫–Ω–∏–≥–∏")
    print("  GET  /api/books?search=–ì–∞—Ä—Ä–∏ - –ü–æ–∏—Å–∫")
    print("  POST /api/books              - –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É")
    print("  GET  /api/statistics         - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:")
    print("  app.run(debug=True, port=5000)")
    
    print("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def exercise_03_data_visualization():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    –ó–∞–¥–∞—á–∞:
    –°–æ–∑–¥–∞–π—Ç–µ –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ===")
    
    if not (check_package('matplotlib') and check_package('pandas')):
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    
    # –†–ï–®–ï–ù–ò–ï:
    
    class DataVisualizer:
        """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
        
        def __init__(self):
            self.data = None
            plt.style.use('default')
        
        def generate_sales_data(self):
            """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
            np.random.seed(42)
            
            # –î–∞–Ω–Ω—ã–µ –∑–∞ –≥–æ–¥
            dates = pd.date_range('2023-01-01', '2023-12-31', freq='D')
            
            # –¢—Ä–µ–Ω–¥ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
            trend = np.linspace(1000, 1500, len(dates))
            seasonal = 200 * np.sin(2 * np.pi * np.arange(len(dates)) / 365.25)
            weekly = 100 * np.sin(2 * np.pi * np.arange(len(dates)) / 7)
            noise = np.random.normal(0, 50, len(dates))
            
            sales = trend + seasonal + weekly + noise
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            categories = ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–û–¥–µ–∂–¥–∞', '–ö–Ω–∏–≥–∏', '–°–ø–æ—Ä—Ç', '–î–æ–º']
            regions = ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ö–∞–∑–∞–Ω—å', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥']
            
            data = []
            for i, date in enumerate(dates):
                for category in categories:
                    for region in regions:
                        base_sales = sales[i] * np.random.uniform(0.5, 1.5)
                        data.append({
                            'date': date,
                            'category': category,
                            'region': region,
                            'sales': max(0, base_sales),
                            'orders': np.random.randint(10, 100),
                            'customers': np.random.randint(5, 50)
                        })
            
            self.data = pd.DataFrame(data)
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            return self.data
        
        def create_time_series_plot(self):
            """–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"""
            daily_sales = self.data.groupby('date')['sales'].sum()
            
            plt.figure(figsize=(15, 8))
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
            plt.subplot(2, 2, 1)
            plt.plot(daily_sales.index, daily_sales.values, linewidth=1.5, alpha=0.7)
            
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
            rolling_mean = daily_sales.rolling(window=30).mean()
            plt.plot(rolling_mean.index, rolling_mean.values, 'r-', linewidth=2, label='30-–¥–Ω–µ–≤–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ')
            
            plt.title('–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º (2023)')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            # –ú–µ—Å—è—á–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
            plt.subplot(2, 2, 2)
            monthly_sales = self.data.groupby(self.data['date'].dt.month)['sales'].sum()
            
            months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                     '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
            
            bars = plt.bar(range(1, 13), monthly_sales.values, color='skyblue', alpha=0.8)
            plt.title('–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º')
            plt.xlabel('–ú–µ—Å—è—Ü')
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            plt.xticks(range(1, 13), months, rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars, monthly_sales.values):
                plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + value*0.01,
                        f'{value:.0f}', ha='center', va='bottom', fontsize=8)
            
            # –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            plt.subplot(2, 2, 3)
            category_sales = self.data.groupby('category')['sales'].sum().sort_values(ascending=True)
            
            colors = plt.cm.Set3(np.linspace(0, 1, len(category_sales)))
            bars = plt.barh(range(len(category_sales)), category_sales.values, color=colors)
            
            plt.title('–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
            plt.xlabel('–ü—Ä–æ–¥–∞–∂–∏')
            plt.yticks(range(len(category_sales)), category_sales.index)
            
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            plt.subplot(2, 2, 4)
            region_sales = self.data.groupby('region')['sales'].sum()
            
            plt.pie(region_sales.values, labels=region_sales.index, autopct='%1.1f%%',
                   startangle=90, colors=plt.cm.Pastel1(range(len(region_sales))))
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º')
            
            plt.tight_layout()
            plt.savefig('sales_dashboard.png', dpi=300, bbox_inches='tight')
            plt.close()
            
            print("–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: sales_dashboard.png")
        
        def create_correlation_analysis(self):
            """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            correlation_data = self.data.groupby(['date', 'region']).agg({
                'sales': 'sum',
                'orders': 'sum',
                'customers': 'sum'
            }).reset_index()
            
            correlation_data['avg_order_value'] = correlation_data['sales'] / correlation_data['orders']
            correlation_data['sales_per_customer'] = correlation_data['sales'] / correlation_data['customers']
            
            plt.figure(figsize=(12, 8))
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
            plt.subplot(2, 3, 1)
            numeric_cols = ['sales', 'orders', 'customers', 'avg_order_value', 'sales_per_customer']
            corr_matrix = correlation_data[numeric_cols].corr()
            
            im = plt.imshow(corr_matrix, cmap='coolwarm', vmin=-1, vmax=1)
            plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
            plt.xticks(range(len(numeric_cols)), numeric_cols, rotation=45)
            plt.yticks(range(len(numeric_cols)), numeric_cols)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            for i in range(len(numeric_cols)):
                for j in range(len(numeric_cols)):
                    plt.text(j, i, f'{corr_matrix.iloc[i, j]:.2f}',
                           ha='center', va='center', fontsize=8)
            
            plt.colorbar(im)
            
            # Scatter plots
            plt.subplot(2, 3, 2)
            plt.scatter(correlation_data['orders'], correlation_data['sales'], alpha=0.6)
            plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            plt.title('–ó–∞–∫–∞–∑—ã vs –ü—Ä–æ–¥–∞–∂–∏')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
            z = np.polyfit(correlation_data['orders'], correlation_data['sales'], 1)
            p = np.poly1d(z)
            plt.plot(correlation_data['orders'], p(correlation_data['orders']), "r--", alpha=0.8)
            
            plt.subplot(2, 3, 3)
            plt.scatter(correlation_data['customers'], correlation_data['sales'], alpha=0.6, color='green')
            plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤')
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            plt.title('–ö–ª–∏–µ–Ω—Ç—ã vs –ü—Ä–æ–¥–∞–∂–∏')
            
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
            plt.subplot(2, 3, 4)
            plt.hist(correlation_data['avg_order_value'], bins=30, alpha=0.7, color='orange')
            plt.xlabel('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫')
            plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞')
            
            plt.subplot(2, 3, 5)
            plt.boxplot([correlation_data[correlation_data['region'] == region]['sales'].values 
                        for region in correlation_data['region'].unique()],
                       labels=correlation_data['region'].unique())
            plt.title('–ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (Box Plot)')
            plt.xticks(rotation=45)
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
            plt.subplot(2, 3, 6)
            monthly_trend = correlation_data.groupby(correlation_data['date'].dt.month)['avg_order_value'].mean()
            plt.plot(range(1, 13), monthly_trend.values, marker='o', linewidth=2)
            plt.title('–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞')
            plt.xlabel('–ú–µ—Å—è—Ü')
            plt.ylabel('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫')
            plt.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.savefig('correlation_analysis.png', dpi=300, bbox_inches='tight')
            plt.close()
            
            print("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: correlation_analysis.png")
        
        def create_advanced_visualizations(self):
            """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
            plt.figure(figsize=(16, 10))
            
            # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞–º
            plt.subplot(2, 3, 1)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.data['month'] = self.data['date'].dt.month
            self.data['day_of_week'] = self.data['date'].dt.day_name()
            
            heatmap_data = self.data.groupby(['month', 'day_of_week'])['sales'].sum().unstack(fill_value=0)
            
            # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            heatmap_data = heatmap_data.reindex(columns=day_order, fill_value=0)
            
            im = plt.imshow(heatmap_data.T, cmap='YlOrRd', aspect='auto')
            plt.title('–ü—Ä–æ–¥–∞–∂–∏: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ vs –ú–µ—Å—è—Ü')
            plt.xlabel('–ú–µ—Å—è—Ü')
            plt.ylabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
            plt.xticks(range(12), ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                                  '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'])
            plt.yticks(range(7), ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'])
            plt.colorbar(im)
            
            # –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
            plt.subplot(2, 3, 2)
            daily_sales = self.data.groupby('date')['sales'].sum().sort_index()
            cumulative_sales = daily_sales.cumsum()
            
            plt.plot(cumulative_sales.index, cumulative_sales.values, linewidth=2)
            plt.title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –≥–æ–¥')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏')
            plt.grid(True, alpha=0.3)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (violin plot –∏–º–∏—Ç–∞—Ü–∏—è)
            plt.subplot(2, 3, 3)
            categories = self.data['category'].unique()
            category_data = [self.data[self.data['category'] == cat]['sales'].values for cat in categories]
            
            parts = plt.violinplot(category_data, positions=range(len(categories)), showmeans=True)
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
            plt.xticks(range(len(categories)), categories, rotation=45)
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤
            plt.subplot(2, 3, 4)
            region_monthly = self.data.groupby(['month', 'region'])['sales'].sum().unstack()
            
            for region in region_monthly.columns:
                plt.plot(region_monthly.index, region_monthly[region], marker='o', label=region, linewidth=2)
            
            plt.title('–ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–ø–æ–º–µ—Å—è—á–Ω–æ)')
            plt.xlabel('–ú–µ—Å—è—Ü')
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            # –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤
            plt.subplot(2, 3, 5)
            daily_sales = self.data.groupby('date')['sales'].sum()
            
            Q1 = daily_sales.quantile(0.25)
            Q3 = daily_sales.quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            
            outliers = daily_sales[(daily_sales < lower_bound) | (daily_sales > upper_bound)]
            normal_data = daily_sales[(daily_sales >= lower_bound) & (daily_sales <= upper_bound)]
            
            plt.scatter(normal_data.index, normal_data.values, alpha=0.6, s=10, label='–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ')
            plt.scatter(outliers.index, outliers.values, color='red', s=20, label='–í—ã–±—Ä–æ—Å—ã')
            
            plt.axhline(y=lower_bound, color='red', linestyle='--', alpha=0.5, label='–ì—Ä–∞–Ω–∏—Ü—ã')
            plt.axhline(y=upper_bound, color='red', linestyle='--', alpha=0.5)
            
            plt.title('–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            plt.legend()
            
            # –ü—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–Ω–¥–∞
            plt.subplot(2, 3, 6)
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–∞–∫ –ø—Ä–æ–≥–Ω–æ–∑
            window = 30
            rolling_mean = daily_sales.rolling(window=window).mean()
            
            plt.plot(daily_sales.index, daily_sales.values, alpha=0.3, label='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
            plt.plot(rolling_mean.index, rolling_mean.values, linewidth=2, label=f'–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ ({window} –¥–Ω–µ–π)')
            
            # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            last_trend = rolling_mean.iloc[-10:].mean()
            future_dates = pd.date_range(daily_sales.index[-1] + pd.Timedelta(days=1), periods=30)
            future_trend = [last_trend] * len(future_dates)
            
            plt.plot(future_dates, future_trend, 'r--', linewidth=2, label='–ü—Ä–æ–≥–Ω–æ–∑')
            
            plt.title('–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.savefig('advanced_visualizations.png', dpi=300, bbox_inches='tight')
            plt.close()
            
            print("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: advanced_visualizations.png")
        
        def generate_report(self):
            """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
            if self.data is None:
                return
            
            report = {
                'period': '2023-01-01 to 2023-12-31',
                'total_sales': float(self.data['sales'].sum()),
                'total_orders': int(self.data['orders'].sum()),
                'total_customers': int(self.data['customers'].sum()),
                'avg_daily_sales': float(self.data.groupby('date')['sales'].sum().mean()),
                'best_category': self.data.groupby('category')['sales'].sum().idxmax(),
                'best_region': self.data.groupby('region')['sales'].sum().idxmax(),
                'best_month': self.data.groupby('month')['sales'].sum().idxmax()
            }
            
            with open('visualization_report.json', 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
            print(f"  –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {report['total_sales']:,.0f}")
            print(f"  –°—Ä–µ–¥–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {report['avg_daily_sales']:,.0f}")
            print(f"  –õ—É—á—à–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {report['best_category']}")
            print(f"  –õ—É—á—à–∏–π —Ä–µ–≥–∏–æ–Ω: {report['best_region']}")
            print(f"  –õ—É—á—à–∏–π –º–µ—Å—è—Ü: {report['best_month']}")
            print("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: visualization_report.json")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    visualizer = DataVisualizer()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    visualizer.generate_sales_data()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    visualizer.create_time_series_plot()
    visualizer.create_correlation_analysis()
    visualizer.create_advanced_visualizations()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    visualizer.generate_report()
    
    print("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:")
    print("  - sales_dashboard.png")
    print("  - correlation_analysis.png")
    print("  - advanced_visualizations.png")
    print("  - visualization_report.json")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    
    exercises = [
        ("–ü–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö", exercise_01_data_analysis_pipeline),
        ("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Web API", exercise_02_web_api_development),
        ("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", exercise_03_data_visualization),
    ]
    
    print("üì¶ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ Python")
    print("=" * 70)
    print("–≠—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –æ—Å–≤–æ–∏—Ç—å:")
    print("- –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å Pandas –∏ NumPy")
    print("- –°–æ–∑–¥–∞–Ω–∏–µ RESTful API —Å Flask")
    print("- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
    print("- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫")
    print("=" * 70)
    
    for i, (name, func) in enumerate(exercises, 1):
        print(f"\n{i}. {name}")
        print("-" * (len(name) + 3))
        try:
            func()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
        
        if i < len(exercises):
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    print("\nüéâ –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    main() 