# –û—Å–Ω–æ–≤—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å unittest
import unittest
import sys
import os
from io import StringIO

# –ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class Calculator:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def add(self, a, b):
        """–°–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª"""
        return a + b
    
    def subtract(self, a, b):
        """–í—ã—á–∏—Ç–∞–Ω–∏–µ"""
        return a - b
    
    def multiply(self, a, b):
        """–£–º–Ω–æ–∂–µ–Ω–∏–µ"""
        return a * b
    
    def divide(self, a, b):
        """–î–µ–ª–µ–Ω–∏–µ"""
        if b == 0:
            raise ValueError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
        return a / b
    
    def power(self, base, exp):
        """–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å"""
        return base ** exp

class StringProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫"""
    
    def reverse(self, text):
        """–ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏"""
        if not isinstance(text, str):
            raise TypeError("–û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞")
        return text[::-1]
    
    def capitalize_words(self, text):
        """–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤"""
        return ' '.join(word.capitalize() for word in text.split())
    
    def count_words(self, text):
        """–ü–æ–¥—Å—á—ë—Ç —Å–ª–æ–≤"""
        if not text.strip():
            return 0
        return len(text.split())

# –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å unittest
class TestCalculator(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ Calculator"""
    
    def setUp(self):
        """–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.calc = Calculator()
        print(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {self._testMethodName}")
    
    def tearDown(self):
        """–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {self._testMethodName}")
    
    def test_add_positive_numbers(self):
        """–¢–µ—Å—Ç —Å–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª"""
        result = self.calc.add(2, 3)
        self.assertEqual(result, 5)
    
    def test_add_negative_numbers(self):
        """–¢–µ—Å—Ç —Å–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª"""
        result = self.calc.add(-2, -3)
        self.assertEqual(result, -5)
    
    def test_add_zero(self):
        """–¢–µ—Å—Ç —Å–ª–æ–∂–µ–Ω–∏—è —Å –Ω—É–ª—ë–º"""
        result = self.calc.add(5, 0)
        self.assertEqual(result, 5)
    
    def test_subtract(self):
        """–¢–µ—Å—Ç –≤—ã—á–∏—Ç–∞–Ω–∏—è"""
        result = self.calc.subtract(10, 3)
        self.assertEqual(result, 7)
    
    def test_multiply(self):
        """–¢–µ—Å—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è"""
        result = self.calc.multiply(4, 5)
        self.assertEqual(result, 20)
    
    def test_divide(self):
        """–¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è"""
        result = self.calc.divide(10, 2)
        self.assertEqual(result, 5.0)
    
    def test_divide_by_zero(self):
        """–¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)"""
        with self.assertRaises(ValueError):
            self.calc.divide(10, 0)
    
    def test_power(self):
        """–¢–µ—Å—Ç –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å"""
        result = self.calc.power(2, 3)
        self.assertEqual(result, 8)

class TestStringProcessor(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ StringProcessor"""
    
    @classmethod
    def setUpClass(cls):
        """–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∞"""
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ StringProcessor")
        cls.processor = StringProcessor()
    
    @classmethod
    def tearDownClass(cls):
        """–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞—Å—Å–∞"""
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ StringProcessor")
    
    def test_reverse_string(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏"""
        result = self.processor.reverse("hello")
        self.assertEqual(result, "olleh")
    
    def test_reverse_empty_string(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏"""
        result = self.processor.reverse("")
        self.assertEqual(result, "")
    
    def test_reverse_invalid_input(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö"""
        with self.assertRaises(TypeError):
            self.processor.reverse(123)
    
    def test_capitalize_words(self):
        """–¢–µ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–≤"""
        result = self.processor.capitalize_words("hello world python")
        self.assertEqual(result, "Hello World Python")
    
    def test_count_words(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á—ë—Ç–∞ —Å–ª–æ–≤"""
        result = self.processor.count_words("hello world python")
        self.assertEqual(result, 3)
    
    def test_count_words_empty(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á—ë—Ç–∞ —Å–ª–æ–≤ –≤ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ"""
        result = self.processor.count_words("")
        self.assertEqual(result, 0)
    
    def test_count_words_whitespace(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á—ë—Ç–∞ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"""
        result = self.processor.count_words("   ")
        self.assertEqual(result, 0)

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö assert –º–µ—Ç–æ–¥–æ–≤
class TestAssertMethods(unittest.TestCase):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö assert –º–µ—Ç–æ–¥–æ–≤"""
    
    def test_equality_assertions(self):
        """–¢–µ—Å—Ç—ã –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ"""
        self.assertEqual(1, 1)
        self.assertNotEqual(1, 2)
        self.assertAlmostEqual(1.1, 1.15, places=1)
        self.assertNotAlmostEqual(1.1, 1.2, places=1)
    
    def test_boolean_assertions(self):
        """–¢–µ—Å—Ç—ã –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        self.assertTrue(True)
        self.assertFalse(False)
        self.assertIsNone(None)
        self.assertIsNotNone("not none")
    
    def test_membership_assertions(self):
        """–¢–µ—Å—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏"""
        self.assertIn(1, [1, 2, 3])
        self.assertNotIn(4, [1, 2, 3])
    
    def test_type_assertions(self):
        """–¢–µ—Å—Ç—ã —Ç–∏–ø–æ–≤"""
        self.assertIsInstance(1, int)
        self.assertNotIsInstance("1", int)
    
    def test_regex_assertions(self):
        """–¢–µ—Å—Ç—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        self.assertRegex("hello123", r"\w+\d+")
        self.assertNotRegex("hello", r"\d+")
    
    def test_collection_assertions(self):
        """–¢–µ—Å—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        list1 = [1, 2, 3]
        list2 = [3, 2, 1]
        self.assertListEqual(list1, [1, 2, 3])
        self.assertCountEqual(list1, list2)  # –ü–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω
    
    def test_exception_assertions(self):
        """–¢–µ—Å—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        with self.assertRaises(ZeroDivisionError):
            1 / 0
        
        with self.assertRaisesRegex(ValueError, "invalid literal"):
            int("not_a_number")

# –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
class TestSkippingExamples(unittest.TestCase):
    """–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    
    @unittest.skip("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è")
    def test_skip_unconditional(self):
        """–ë–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞"""
        self.fail("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è")
    
    @unittest.skipIf(sys.platform == "win32", "–ù–µ –¥–ª—è Windows")
    def test_skip_if_windows(self):
        """–ü—Ä–æ–ø—É—Å–∫ –Ω–∞ Windows"""
        pass
    
    @unittest.skipUnless(sys.platform.startswith("linux"), "–¢–æ–ª—å–∫–æ –¥–ª—è Linux")
    def test_skip_unless_linux(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ Linux"""
        pass
    
    @unittest.expectedFailure
    def test_expected_failure(self):
        """–¢–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ–º–æ –ø–∞–¥–∞–µ—Ç"""
        self.assertEqual(1, 2)

# –ü–æ–¥—Ç–µ—Å—Ç—ã (subtests)
class TestSubtests(unittest.TestCase):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–µ—Å—Ç–æ–≤"""
    
    def test_even_numbers(self):
        """–¢–µ—Å—Ç —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª —Å –ø–æ–¥—Ç–µ—Å—Ç–∞–º–∏"""
        for i in range(0, 6):
            with self.subTest(i=i):
                self.assertEqual(i % 2, 0, f"{i} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á—ë—Ç–Ω—ã–º")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
def create_test_suite():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    suite.addTest(TestCalculator('test_add_positive_numbers'))
    suite.addTest(TestCalculator('test_divide_by_zero'))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∫–ª–∞—Å—Å–∞
    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestStringProcessor))
    
    return suite

# –ö–∞—Å—Ç–æ–º–Ω—ã–π TestResult –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class CustomTestResult(unittest.TextTestResult):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤"""
    
    def startTest(self, test):
        super().startTest(test)
        print(f"üü° –ù–∞—á–∏–Ω–∞–µ–º: {test}")
    
    def addSuccess(self, test):
        super().addSuccess(test)
        print(f"‚úÖ –£—Å–ø–µ—Ö: {test}")
    
    def addError(self, test, err):
        super().addError(test, err)
        print(f"‚ùå –û—à–∏–±–∫–∞: {test}")
    
    def addFailure(self, test, err):
        super().addFailure(test, err)
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª: {test}")

# –ú–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class TestWithMocks(unittest.TestCase):
    """–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å –º–æ–∫–∞–º–∏"""
    
    def test_with_patch(self):
        """–¢–µ—Å—Ç —Å –ø–∞—Ç—á–∏–Ω–≥–æ–º"""
        from unittest.mock import patch
        
        # –ü–∞—Ç—á–∏–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        with patch('builtins.len') as mock_len:
            mock_len.return_value = 5
            result = len([1, 2, 3])
            self.assertEqual(result, 5)
            mock_len.assert_called_once_with([1, 2, 3])

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
def run_tests_programmatically():
    """–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("=== –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    suite.addTests(loader.loadTestsFromTestCase(TestCalculator))
    suite.addTests(loader.loadTestsFromTestCase(TestAssertMethods))
    
    # –ó–∞–ø—É—Å–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    runner = unittest.TextTestRunner(verbosity=2, resultclass=CustomTestResult)
    result = runner.run(suite)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    print(f"–û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"–ü—Ä–æ–≤–∞–ª–æ–≤: {len(result.failures)}")
    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(result.skipped)}")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
class TestOutputCapture(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å –≤—ã–≤–æ–¥–æ–º"""
    
    def test_print_function(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å print"""
        from unittest.mock import patch
        
        def greeting(name):
            print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")
        
        with patch('sys.stdout', new=StringIO()) as fake_out:
            greeting("–ú–∏—Ä")
            self.assertEqual(fake_out.getvalue().strip(), "–ü—Ä–∏–≤–µ—Ç, –ú–∏—Ä!")

if __name__ == '__main__':
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è unittest")
    print("=" * 50)
    
    # –†–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    
    # 1. –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    print("1. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:")
    # unittest.main(verbosity=2, exit=False)
    
    # 2. –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∑–∞–ø—É—Å–∫
    run_tests_programmatically()
    
    # 3. –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    print("\n=== –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ ===")
    suite = create_test_suite()
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # 4. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    print("\n=== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ ===")
    loader = unittest.TestLoader()
    start_dir = '.'
    suite = loader.discover(start_dir, pattern='*unittest_basics.py')
    
    print("\n=== –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ unittest ===")
    best_practices = [
        "1. –û–¥–∏–Ω assert –Ω–∞ —Ç–µ—Å—Ç (–∫–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ)",
        "2. –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤",
        "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ setUp –∏ tearDown –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏",
        "4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤",
        "5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π",
        "6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏",
        "7. –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö",
        "8. –ò–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞"
    ]
    
    for practice in best_practices:
        print(f"   {practice}")
    
    print("\n=== –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞ ===")
    print("   python -m unittest test_module.py")
    print("   python -m unittest test_module.TestClass")
    print("   python -m unittest test_module.TestClass.test_method")
    print("   python -m unittest discover -s tests -p '*test*.py'")
    print("   python -m unittest -v  # –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥") 