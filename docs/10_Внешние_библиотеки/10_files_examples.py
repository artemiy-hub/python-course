#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:
- –û—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
- –†–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∏—è
- –†–∞–±–æ—Ç—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
- –û–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
- –§–∞–π–ª–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import os
import sys
import json
import csv
import tempfile
import shutil
import time
from pathlib import Path
from contextlib import contextmanager
from typing import List, Dict, Any, Generator, Optional


def example_01_basic_file_operations():
    """
    –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è, –∑–∞–ø–∏—Å–∏,
    —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    sample_data = """–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∞–π–ª–∞
–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–∞–º–∏: 42, 3.14, 100
–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: @#$%^&*()
–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!
–ü—è—Ç–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞"""
    
    test_file = "basic_operations_test.txt"
    
    try:
        print("1. –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (—Ä–µ–∂–∏–º 'w'):")
        
        # –ó–∞–ø–∏—Å—å —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é
        with open(test_file, 'w', encoding='utf-8') as file:
            file.write(sample_data)
        
        print(f"   –ó–∞–ø–∏—Å–∞–Ω–æ {len(sample_data)} —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ñ–∞–π–ª {test_file}")
        
        print("\n2. –ß—Ç–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞:")
        
        # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        with open(test_file, 'r', encoding='utf-8') as file:
            content = file.read()
            print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {content.count(chr(10)) + 1}")
        
        print("\n3. –ü–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ:")
        
        # –ß—Ç–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        with open(test_file, 'r', encoding='utf-8') as file:
            for line_num, line in enumerate(file, 1):
                print(f"   –°—Ç—Ä–æ–∫–∞ {line_num}: {line.strip()}")
        
        print("\n4. –ß—Ç–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫:")
        
        # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –≤ —Å–ø–∏—Å–æ–∫
        with open(test_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            print(f"   –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(lines)} —Å—Ç—Ä–æ–∫")
            print(f"   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {repr(lines[0])}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞: {repr(lines[-1])}")
        
        print("\n5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª (—Ä–µ–∂–∏–º 'a'):")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
        additional_data = "\n–®–µ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∞)\n–°–µ–¥—å–º–∞—è —Å—Ç—Ä–æ–∫–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∞)"
        
        with open(test_file, 'a', encoding='utf-8') as file:
            file.write(additional_data)
        
        print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ {len(additional_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(test_file, 'r', encoding='utf-8') as file:
            updated_content = file.read()
            line_count = updated_content.count('\n') + 1
            print(f"   –¢–µ–ø–µ—Ä—å –≤ —Ñ–∞–π–ª–µ {line_count} —Å—Ç—Ä–æ–∫")
        
        print("\n6. –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (—Ä–µ–∂–∏–º 'r+'):")
        
        with open(test_file, 'r+', encoding='utf-8') as file:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            original = file.read()
            print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {len(original)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
            file.seek(0)
            
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
            file.write("–ò–ó–ú–ï–ù–ï–ù–û: ")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü
            file.seek(0, 2)  # 2 = SEEK_END
            file.write("\n–í–æ—Å—å–º–∞—è —Å—Ç—Ä–æ–∫–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ r+)")
        
        print("   –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω –≤ —Ä–µ–∂–∏–º–µ 'r+'")
        
        print("\n7. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ:")
        
        with open(test_file, 'r', encoding='utf-8') as file:
            print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {file.tell()}")
            
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
            chunk = file.read(10)
            print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {repr(chunk)}")
            print(f"   –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {file.tell()}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∑–∏—Ü–∏–∏ 50
            file.seek(50)
            print(f"   –ü–æ—Å–ª–µ seek(50): {file.tell()}")
            
            # –ß–∏—Ç–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 20 —Å–∏–º–≤–æ–ª–æ–≤
            chunk = file.read(20)
            print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å –ø–æ–∑–∏—Ü–∏–∏ 50: {repr(chunk)}")
        
        print("\n8. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:")
        
        file_path = Path(test_file)
        if file_path.exists():
            stat = file_path.stat()
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stat.st_size} –±–∞–π—Ç")
            print(f"   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {time.ctime(stat.st_ctime)}")
            print(f"   –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {time.ctime(stat.st_mtime)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        print("\n9. –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
        with open(test_file, 'r', encoding='utf-8') as file:
            final_content = file.read()
            print("   ---")
            print(final_content)
            print("   ---")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(test_file):
            os.remove(test_file)
            print(f"\n–§–∞–π–ª {test_file} —É–¥–∞–ª–µ–Ω")


def example_02_encoding_handling():
    """
    –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏,
    –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ
    –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏ ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    test_texts = {
        'ascii_text': "Hello, World!",
        'latin_text': "Caf√©, na√Øve, r√©sum√©",
        'cyrillic_text': "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! –ö–∞–∫ –¥–µ–ª–∞?",
        'mixed_text': "Mixed: Hello, –ü—Ä–∏–≤–µ—Ç, Caf√© üåç",
        'emoji_text': "Python üêç is awesome! ‚ù§Ô∏è‚ú®"
    }
    
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏:")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
    encodings = ['utf-8', 'cp1251', 'iso-8859-1']
    created_files = []
    
    for text_name, text in test_texts.items():
        for encoding in encodings:
            filename = f"{text_name}_{encoding.replace('-', '_')}.txt"
            
            try:
                with open(filename, 'w', encoding=encoding) as file:
                    file.write(text)
                
                created_files.append((filename, encoding, text))
                print(f"   ‚úÖ {filename} —Å–æ–∑–¥–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}")
                
            except UnicodeEncodeError as e:
                print(f"   ‚ùå {filename}: –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è {encoding} - {e}")
    
    print(f"\n2. –ê–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ({len(created_files)} —Ñ–∞–π–ª–æ–≤):")
    
    def analyze_file_encoding(filename):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞"""
        print(f"\n   –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {filename}")
        
        # –ß–∏—Ç–∞–µ–º –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
        with open(filename, 'rb') as file:
            raw_bytes = file.read()
        
        print(f"     –†–∞–∑–º–µ—Ä: {len(raw_bytes)} –±–∞–π—Ç")
        print(f"     –ü–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã: {raw_bytes[:20]}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        test_encodings = ['utf-8', 'cp1251', 'iso-8859-1', 'ascii']
        
        for encoding in test_encodings:
            try:
                decoded = raw_bytes.decode(encoding)
                print(f"     {encoding:>12}: ‚úÖ {decoded}")
            except UnicodeDecodeError as e:
                print(f"     {encoding:>12}: ‚ùå {str(e)[:50]}...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
    for filename, original_encoding, original_text in created_files[:3]:
        analyze_file_encoding(filename)
    
    print("\n3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫:")
    
    def safe_read_file(filename, target_encoding='utf-8'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        error_strategies = ['strict', 'ignore', 'replace', 'xmlcharrefreplace']
        
        print(f"\n   –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename}")
        
        for strategy in error_strategies:
            try:
                with open(filename, 'r', encoding=target_encoding, errors=strategy) as file:
                    content = file.read()
                
                print(f"     {strategy:>18}: {repr(content[:50])}...")
                
            except UnicodeDecodeError as e:
                print(f"     {strategy:>18}: ‚ùå {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ–∞–π–ª–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    problematic_files = [f for f, e, t in created_files if 'cyrillic' in f and 'iso' in f]
    
    if problematic_files:
        safe_read_file(problematic_files[0])
    
    print("\n4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:")
    
    def detect_encoding_simple(filename):
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –º–µ—Ç–æ–¥–æ–º –ø–æ–ø—ã—Ç–æ–∫"""
        
        common_encodings = ['utf-8', 'cp1251', 'iso-8859-1', 'ascii']
        
        with open(filename, 'rb') as file:
            sample = file.read(1024)  # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü
        
        print(f"\n   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è: {filename}")
        
        for encoding in common_encodings:
            try:
                decoded = sample.decode(encoding)
                
                # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                has_cyrillic = any('\u0400' <= char <= '\u04FF' for char in decoded)
                has_extended = any(ord(char) > 127 for char in decoded)
                
                confidence = "–≤—ã—Å–æ–∫–∞—è" if not has_extended else "—Å—Ä–µ–¥–Ω—è—è"
                if has_cyrillic and encoding == 'cp1251':
                    confidence = "–≤—ã—Å–æ–∫–∞—è"
                
                print(f"     {encoding:>12}: ‚úÖ {confidence} - {repr(decoded[:30])}...")
                return encoding
                
            except UnicodeDecodeError:
                print(f"     {encoding:>12}: ‚ùå")
        
        return 'utf-8'  # Fallback
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    for filename, original_encoding, _ in created_files[::3]:  # –ö–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π
        detected = detect_encoding_simple(filename)
        match = "‚úÖ" if detected == original_encoding else "‚ùå"
        print(f"     –ò—Å—Ö–æ–¥–Ω–∞—è: {original_encoding}, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {detected} {match}")
    
    print("\n5. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏:")
    
    def convert_file_encoding(source_file, target_file, from_encoding, to_encoding):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏–∑ –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ –¥—Ä—É–≥—É—é"""
        
        try:
            # –ß–∏—Ç–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
            with open(source_file, 'r', encoding=from_encoding) as src:
                content = src.read()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
            with open(target_file, 'w', encoding=to_encoding) as dst:
                dst.write(content)
            
            print(f"   ‚úÖ {source_file} ‚Üí {target_file}: {from_encoding} ‚Üí {to_encoding}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
            src_size = os.path.getsize(source_file)
            dst_size = os.path.getsize(target_file)
            print(f"      –†–∞–∑–º–µ—Ä—ã: {src_size} ‚Üí {dst_size} –±–∞–π—Ç")
            
        except (UnicodeDecodeError, UnicodeEncodeError) as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
    conversions = [
        ('utf_8', 'cp1251'),
        ('cp1251', 'utf_8'),
        ('iso_8859_1', 'utf_8')
    ]
    
    for from_enc, to_enc in conversions:
        source_files = [f for f, e, t in created_files if from_enc in f]
        if source_files:
            source = source_files[0]
            target = source.replace(from_enc, f"{from_enc}_to_{to_enc}")
            
            orig_encoding = from_enc.replace('_', '-')
            target_encoding = to_enc.replace('_', '-')
            
            convert_file_encoding(source, target, orig_encoding, target_encoding)
    
    print("\n6. –†–∞–±–æ—Ç–∞ —Å BOM (Byte Order Mark):")
    
    def create_file_with_bom():
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å BOM"""
        
        text = "–§–∞–π–ª —Å BOM: –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
        
        # UTF-8 —Å BOM
        with open('utf8_with_bom.txt', 'wb') as file:
            file.write('\ufeff'.encode('utf-8'))  # BOM
            file.write(text.encode('utf-8'))
        
        # UTF-16 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç BOM)
        with open('utf16_with_bom.txt', 'w', encoding='utf-16') as file:
            file.write(text)
        
        print("   –§–∞–π–ª—ã —Å BOM —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BOM
        bom_files = ['utf8_with_bom.txt', 'utf16_with_bom.txt']
        
        for filename in bom_files:
            with open(filename, 'rb') as file:
                first_bytes = file.read(4)
            
            print(f"   {filename}: –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã {first_bytes}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø BOM
            if first_bytes.startswith(b'\xef\xbb\xbf'):
                print("     –û–±–Ω–∞—Ä—É–∂–µ–Ω UTF-8 BOM")
            elif first_bytes.startswith(b'\xff\xfe'):
                print("     –û–±–Ω–∞—Ä—É–∂–µ–Ω UTF-16 LE BOM")
            elif first_bytes.startswith(b'\xfe\xff'):
                print("     –û–±–Ω–∞—Ä—É–∂–µ–Ω UTF-16 BE BOM")
    
    create_file_with_bom()
    
    # –û—á–∏—Å—Ç–∫–∞
    print("\n7. –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    
    all_test_files = [f[0] for f in created_files]
    all_test_files.extend([
        'utf8_with_bom.txt', 'utf16_with_bom.txt'
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    all_test_files.extend([
        f for f in os.listdir('.') 
        if f.endswith('.txt') and '_to_' in f
    ])
    
    removed_count = 0
    for filename in all_test_files:
        try:
            if os.path.exists(filename):
                os.remove(filename)
                removed_count += 1
        except OSError:
            pass
    
    print(f"   –£–¥–∞–ª–µ–Ω–æ {removed_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")


def example_03_large_file_processing():
    """
    –ü—Ä–∏–º–µ—Ä 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏:
    –ø–æ—Ç–æ–∫–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —á–∞—Å—Ç—è–º.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ ===")
    
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:")
    
    large_file = "large_test_file.txt"
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –æ–∫–æ–ª–æ 1MB
    def create_large_file(filename, target_size_mb=1):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        target_size = target_size_mb * 1024 * 1024  # –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
        
        with open(filename, 'w', encoding='utf-8') as file:
            line_template = "–°—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä {num:06d}: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤. Timestamp: {timestamp}\n"
            
            current_size = 0
            line_num = 1
            
            while current_size < target_size:
                line = line_template.format(
                    num=line_num, 
                    timestamp=time.time()
                )
                
                file.write(line)
                current_size += len(line.encode('utf-8'))
                line_num += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if line_num % 1000 == 0:
                    progress = (current_size / target_size) * 100
                    print(f"\r   –°–æ–∑–¥–∞–Ω–æ: {progress:.1f}% ({current_size:,} –±–∞–π—Ç)", end='', flush=True)
        
        print(f"\n   –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {current_size:,} –±–∞–π—Ç, {line_num-1:,} —Å—Ç—Ä–æ–∫")
        return line_num - 1
    
    total_lines = create_large_file(large_file)
    
    print("\n2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —á—Ç–µ–Ω–∏—è:")
    
    def measure_time(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        def wrapper(*args, **kwargs):
            start_time = time.perf_counter()
            result = func(*args, **kwargs)
            end_time = time.perf_counter()
            
            execution_time = end_time - start_time
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.3f} —Å–µ–∫—É–Ω–¥")
            return result
        return wrapper
    
    @measure_time
    def read_entire_file(filename):
        """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å"""
        print("\n   –ú–µ—Ç–æ–¥ 1: read() - –≤–µ—Å—å —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å")
        
        with open(filename, 'r', encoding='utf-8') as file:
            content = file.read()
        
        lines = content.count('\n')
        size_mb = len(content) / (1024 * 1024)
        
        print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {size_mb:.2f} MB, {lines:,} —Å—Ç—Ä–æ–∫")
        return lines
    
    @measure_time
    def read_by_chunks(filename, chunk_size=8192):
        """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —á–∞—Å—Ç—è–º"""
        print(f"\n   –ú–µ—Ç–æ–¥ 2: read({chunk_size}) - –ø–æ —á–∞—Å—Ç—è–º")
        
        total_chars = 0
        total_lines = 0
        
        with open(filename, 'r', encoding='utf-8') as file:
            while True:
                chunk = file.read(chunk_size)
                if not chunk:
                    break
                
                total_chars += len(chunk)
                total_lines += chunk.count('\n')
        
        size_mb = total_chars / (1024 * 1024)
        print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {size_mb:.2f} MB, {total_lines:,} —Å—Ç—Ä–æ–∫")
        return total_lines
    
    @measure_time
    def read_line_by_line(filename):
        """–ü–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ"""
        print("\n   –ú–µ—Ç–æ–¥ 3: –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ")
        
        line_count = 0
        total_chars = 0
        
        with open(filename, 'r', encoding='utf-8') as file:
            for line in file:
                line_count += 1
                total_chars += len(line)
        
        size_mb = total_chars / (1024 * 1024)
        print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {size_mb:.2f} MB, {line_count:,} —Å—Ç—Ä–æ–∫")
        return line_count
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    methods = [read_entire_file, read_by_chunks, read_line_by_line]
    
    for method in methods:
        method(large_file)
    
    print("\n3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:")
    
    def process_file_generator(filename):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ"""
        
        def file_processor():
            with open(filename, 'r', encoding='utf-8') as file:
                for line_num, line in enumerate(file, 1):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
                    processed_line = {
                        'line_number': line_num,
                        'length': len(line),
                        'words': len(line.split()),
                        'has_numbers': any(char.isdigit() for char in line),
                        'content_preview': line.strip()[:50]
                    }
                    
                    yield processed_line
        
        return file_processor()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    print("   –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫ —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:")
    
    processor = process_file_generator(large_file)
    
    for i, processed_line in enumerate(processor):
        if i >= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            break
        
        print(f"   –°—Ç—Ä–æ–∫–∞ {processed_line['line_number']}: "
              f"{processed_line['words']} —Å–ª–æ–≤, "
              f"{processed_line['length']} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("\n4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –≤ –±–æ–ª—å—à–æ–º —Ñ–∞–π–ª–µ:")
    
    def search_in_file(filename, search_term, max_results=5):
        """–ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω"""
        
        print(f"   –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '{search_term}':")
        
        found_count = 0
        total_lines = 0
        
        with open(filename, 'r', encoding='utf-8') as file:
            for line_num, line in enumerate(file, 1):
                total_lines += 1
                
                if search_term.lower() in line.lower():
                    found_count += 1
                    
                    if found_count <= max_results:
                        print(f"     {line_num:6d}: {line.strip()[:80]}...")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 —Å—Ç—Ä–æ–∫
                if line_num % 10000 == 0:
                    print(f"\r   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {line_num:,} —Å—Ç—Ä–æ–∫", end='', flush=True)
        
        print(f"\n   –ù–∞–π–¥–µ–Ω–æ {found_count} —Å—Ç—Ä–æ–∫ –∏–∑ {total_lines:,} (–ø–æ–∫–∞–∑–∞–Ω–æ {min(found_count, max_results)})")
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
    search_in_file(large_file, "001000")  # –°—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤–∏–¥–∞ 001000
    
    print("\n5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:")
    
    def analyze_file_stats(filename):
        """–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ–∞–π–ª—É"""
        
        stats = {
            'total_lines': 0,
            'total_chars': 0,
            'total_words': 0,
            'min_line_length': float('inf'),
            'max_line_length': 0,
            'empty_lines': 0,
            'lines_with_numbers': 0
        }
        
        print("   –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        with open(filename, 'r', encoding='utf-8') as file:
            for line_num, line in enumerate(file, 1):
                line_length = len(line.strip())
                word_count = len(line.split())
                
                stats['total_lines'] += 1
                stats['total_chars'] += len(line)
                stats['total_words'] += word_count
                
                if line_length == 0:
                    stats['empty_lines'] += 1
                else:
                    stats['min_line_length'] = min(stats['min_line_length'], line_length)
                    stats['max_line_length'] = max(stats['max_line_length'], line_length)
                
                if any(char.isdigit() for char in line):
                    stats['lines_with_numbers'] += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                if line_num % 5000 == 0:
                    print(f"\r   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {line_num:,} —Å—Ç—Ä–æ–∫", end='', flush=True)
        
        print(f"\n   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:")
        print(f"     –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total_lines']:,}")
        print(f"     –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {stats['total_chars']:,}")
        print(f"     –í—Å–µ–≥–æ —Å–ª–æ–≤: {stats['total_words']:,}")
        print(f"     –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {stats['total_chars']/stats['total_lines']:.1f}")
        print(f"     –ú–∏–Ω. –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {stats['min_line_length']}")
        print(f"     –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {stats['max_line_length']}")
        print(f"     –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {stats['empty_lines']}")
        print(f"     –°—Ç—Ä–æ–∫ —Å —á–∏—Å–ª–∞–º–∏: {stats['lines_with_numbers']}")
    
    analyze_file_stats(large_file)
    
    print("\n6. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:")
    
    def read_file_reverse(filename, num_lines=5):
        """–ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞ (–∞–Ω–∞–ª–æ–≥ tail)"""
        
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ {num_lines} —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞:")
        
        with open(filename, 'rb') as file:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            file.seek(0, 2)
            file_size = file.tell()
            
            lines = []
            buffer = b''
            position = file_size
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∞–º–∏ —Å –∫–æ–Ω—Ü–∞
            while position > 0 and len(lines) < num_lines:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
                read_size = min(4096, position)
                position -= read_size
                
                file.seek(position)
                chunk = file.read(read_size)
                buffer = chunk + buffer
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
                while b'\n' in buffer and len(lines) < num_lines:
                    line, buffer = buffer.rsplit(b'\n', 1)
                    if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        try:
                            decoded_line = line.decode('utf-8')
                            lines.append(decoded_line)
                        except UnicodeDecodeError:
                            pass
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for i, line in enumerate(reversed(lines), 1):
                line_from_end = i
                print(f"     -{line_from_end:2d}: {line[:80]}...")
    
    read_file_reverse(large_file)
    
    # –û—á–∏—Å—Ç–∫–∞
    print("\n7. –û—á–∏—Å—Ç–∫–∞:")
    if os.path.exists(large_file):
        file_size = os.path.getsize(large_file)
        os.remove(large_file)
        print(f"   –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª {large_file} ({file_size:,} –±–∞–π—Ç)")


def example_04_structured_data_formats():
    """
    –ü—Ä–∏–º–µ—Ä 4: –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å JSON, CSV, XML, INI –∏ –¥—Ä—É–≥–∏–º–∏
    –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —Ñ–∞–π–ª–æ–≤.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 4: –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    sample_data = {
        'users': [
            {
                'id': 1,
                'name': '–ê–ª–∏—Å–∞ –ò–≤–∞–Ω–æ–≤–∞',
                'email': 'alice@example.com',
                'age': 28,
                'city': '–ú–æ—Å–∫–≤–∞',
                'skills': ['Python', 'JavaScript', 'SQL'],
                'active': True,
                'salary': 95000.50
            },
            {
                'id': 2,
                'name': '–ë–æ–± –ü–µ—Ç—Ä–æ–≤',
                'email': 'bob@example.com',
                'age': 32,
                'city': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                'skills': ['Java', 'Spring', 'Docker'],
                'active': True,
                'salary': 105000.00
            },
            {
                'id': 3,
                'name': '–ß–∞—Ä–ª–∏ –°–∏–¥–æ—Ä–æ–≤',
                'email': 'charlie@example.com',
                'age': 26,
                'city': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
                'skills': ['C++', 'Python', 'Machine Learning'],
                'active': False,
                'salary': 85000.25
            }
        ],
        'metadata': {
            'version': '1.0.0',
            'created': '2024-01-15',
            'source': 'HR Database',
            'total_records': 3
        }
    }
    
    print("1. –†–∞–±–æ—Ç–∞ —Å JSON:")
    
    def json_operations():
        """–û–ø–µ—Ä–∞—Ü–∏–∏ —Å JSON —Ñ–∞–π–ª–∞–º–∏"""
        
        json_file = 'users.json'
        
        # –ó–∞–ø–∏—Å—å JSON
        with open(json_file, 'w', encoding='utf-8') as file:
            json.dump(sample_data, file, indent=2, ensure_ascii=False)
        
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_file}")
        
        # –ß—Ç–µ–Ω–∏–µ JSON
        with open(json_file, 'r', encoding='utf-8') as file:
            loaded_data = json.load(file)
        
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_data['users'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        active_users = [user for user in loaded_data['users'] if user['active']]
        avg_salary = sum(user['salary'] for user in active_users) / len(active_users)
        
        print(f"   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}")
        print(f"   üí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg_salary:,.2f}")
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        loaded_data['metadata']['processed'] = time.strftime('%Y-%m-%d %H:%M:%S')
        loaded_data['metadata']['avg_salary'] = avg_salary
        
        with open(json_file, 'w', encoding='utf-8') as file:
            json.dump(loaded_data, file, indent=2, ensure_ascii=False)
        
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        return json_file
    
    json_file = json_operations()
    
    print("\n2. –†–∞–±–æ—Ç–∞ —Å CSV:")
    
    def csv_operations():
        """–û–ø–µ—Ä–∞—Ü–∏–∏ —Å CSV —Ñ–∞–π–ª–∞–º–∏"""
        
        csv_file = 'users.csv'
        
        # –ó–∞–ø–∏—Å—å CSV
        with open(csv_file, 'w', newline='', encoding='utf-8') as file:
            writer = csv.DictWriter(file, fieldnames=[
                'id', 'name', 'email', 'age', 'city', 'skills', 'active', 'salary'
            ])
            
            writer.writeheader()
            
            for user in sample_data['users']:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
                user_row = user.copy()
                user_row['skills'] = '; '.join(user['skills'])
                writer.writerow(user_row)
        
        print(f"   ‚úÖ CSV –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_file}")
        
        # –ß—Ç–µ–Ω–∏–µ CSV
        users_from_csv = []
        
        with open(csv_file, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            
            for row in reader:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                user = {
                    'id': int(row['id']),
                    'name': row['name'],
                    'email': row['email'],
                    'age': int(row['age']),
                    'city': row['city'],
                    'skills': row['skills'].split('; '),
                    'active': row['active'].lower() == 'true',
                    'salary': float(row['salary'])
                }
                users_from_csv.append(user)
        
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_from_csv)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        cities = {}
        for user in users_from_csv:
            city = user['city']
            if city not in cities:
                cities[city] = {'count': 0, 'total_salary': 0}
            
            cities[city]['count'] += 1
            cities[city]['total_salary'] += user['salary']
        
        print("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º:")
        for city, stats in cities.items():
            avg_salary = stats['total_salary'] / stats['count']
            print(f"     {city}: {stats['count']} —á–µ–ª., —Å—Ä–µ–¥–Ω—è—è –ó–ü: {avg_salary:,.0f}")
        
        return csv_file
    
    csv_file = csv_operations()
    
    print("\n3. –†–∞–±–æ—Ç–∞ —Å XML:")
    
    def xml_operations():
        """–û–ø–µ—Ä–∞—Ü–∏–∏ —Å XML —Ñ–∞–π–ª–∞–º–∏"""
        
        import xml.etree.ElementTree as ET
        
        xml_file = 'users.xml'
        
        # –°–æ–∑–¥–∞–Ω–∏–µ XML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        root = ET.Element('database')
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_elem = ET.SubElement(root, 'metadata')
        for key, value in sample_data['metadata'].items():
            meta_elem = ET.SubElement(metadata_elem, key)
            meta_elem.text = str(value)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        users_elem = ET.SubElement(root, 'users')
        
        for user in sample_data['users']:
            user_elem = ET.SubElement(users_elem, 'user', {'id': str(user['id'])})
            
            for key, value in user.items():
                if key == 'id':
                    continue
                
                elem = ET.SubElement(user_elem, key)
                
                if key == 'skills':
                    for skill in value:
                        skill_elem = ET.SubElement(elem, 'skill')
                        skill_elem.text = skill
                else:
                    elem.text = str(value)
        
        # –ó–∞–ø–∏—Å—å XML
        tree = ET.ElementTree(root)
        tree.write(xml_file, encoding='utf-8', xml_declaration=True)
        
        print(f"   ‚úÖ XML –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {xml_file}")
        
        # –ß—Ç–µ–Ω–∏–µ XML
        tree = ET.parse(xml_file)
        root = tree.getroot()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_from_xml = []
        
        for user_elem in root.find('users').findall('user'):
            user = {
                'id': int(user_elem.get('id')),
                'name': user_elem.find('name').text,
                'email': user_elem.find('email').text,
                'age': int(user_elem.find('age').text),
                'city': user_elem.find('city').text,
                'active': user_elem.find('active').text.lower() == 'true',
                'salary': float(user_elem.find('salary').text),
                'skills': [skill.text for skill in user_elem.find('skills').findall('skill')]
            }
            users_from_xml.append(user)
        
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_from_xml)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XML")
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
        python_users = [
            user for user in users_from_xml 
            if 'Python' in user['skills']
        ]
        
        print(f"   üêç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ –∑–Ω–∞–Ω–∏–µ–º Python: {len(python_users)}")
        for user in python_users:
            print(f"     - {user['name']} ({user['city']})")
        
        return xml_file
    
    xml_file = xml_operations()
    
    print("\n4. –†–∞–±–æ—Ç–∞ —Å INI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:")
    
    def ini_operations():
        """–û–ø–µ—Ä–∞—Ü–∏–∏ —Å INI —Ñ–∞–π–ª–∞–º–∏"""
        
        import configparser
        
        ini_file = 'config.ini'
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = configparser.ConfigParser()
        
        # –°–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config['DATABASE'] = {
            'host': 'localhost',
            'port': '5432',
            'name': 'users_db',
            'user': 'admin',
            'password': 'secret123',
            'pool_size': '10'
        }
        
        config['SERVER'] = {
            'host': '0.0.0.0',
            'port': '8000',
            'debug': 'true',
            'workers': '4'
        }
        
        config['LOGGING'] = {
            'level': 'INFO',
            'file': 'app.log',
            'max_size': '10MB',
            'backup_count': '5'
        }
        
        # –ó–∞–ø–∏—Å—å INI
        with open(ini_file, 'w', encoding='utf-8') as file:
            config.write(file)
        
        print(f"   ‚úÖ INI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {ini_file}")
        
        # –ß—Ç–µ–Ω–∏–µ INI
        loaded_config = configparser.ConfigParser()
        loaded_config.read(ini_file, encoding='utf-8')
        
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å {len(loaded_config.sections())} —Å–µ–∫—Ü–∏—è–º–∏")
        
        # –í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for section_name in loaded_config.sections():
            print(f"   üìÇ –°–µ–∫—Ü–∏—è [{section_name}]:")
            
            for key, value in loaded_config[section_name].items():
                print(f"     {key} = {value}")
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        loaded_config['SERVER']['port'] = '8080'
        loaded_config['SERVER']['ssl_enabled'] = 'true'
        
        # –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è
        loaded_config['CACHE'] = {
            'type': 'redis',
            'host': 'localhost',
            'port': '6379',
            'db': '0'
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        with open(ini_file, 'w', encoding='utf-8') as file:
            loaded_config.write(file)
        
        print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        return ini_file
    
    ini_file = ini_operations()
    
    print("\n5. –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ª–æ–≥–∞–º–∏:")
    
    def log_operations():
        """–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥ —Ñ–∞–π–ª–∞–º–∏"""
        
        log_file = 'application.log'
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥ –∑–∞–ø–∏—Å–µ–π
        log_entries = [
            "2024-01-15 10:30:15 INFO Application started",
            "2024-01-15 10:30:16 INFO Database connection established",
            "2024-01-15 10:32:22 DEBUG User 'alice@example.com' logged in",
            "2024-01-15 10:35:18 WARNING High memory usage detected: 85%",
            "2024-01-15 10:38:45 ERROR Failed to connect to external API: timeout",
            "2024-01-15 10:40:12 INFO User 'bob@example.com' logged in",
            "2024-01-15 10:45:33 DEBUG Processing batch job #1234",
            "2024-01-15 10:47:28 ERROR Database query failed: connection lost",
            "2024-01-15 10:48:15 INFO Database connection restored",
            "2024-01-15 10:50:42 INFO Batch job #1234 completed successfully"
        ]
        
        # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤
        with open(log_file, 'w', encoding='utf-8') as file:
            for entry in log_entries:
                file.write(entry + '\n')
        
        print(f"   ‚úÖ –õ–æ–≥ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —Å {len(log_entries)} –∑–∞–ø–∏—Å—è–º–∏")
        
        # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
        log_stats = {'INFO': 0, 'DEBUG': 0, 'WARNING': 0, 'ERROR': 0}
        error_entries = []
        
        with open(log_file, 'r', encoding='utf-8') as file:
            for line_num, line in enumerate(file, 1):
                line = line.strip()
                
                for level in log_stats:
                    if f' {level} ' in line:
                        log_stats[level] += 1
                        
                        if level == 'ERROR':
                            error_entries.append((line_num, line))
                        break
        
        print("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for level, count in log_stats.items():
            print(f"     {level:>7}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        print("   üö® –û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:")
        for line_num, entry in error_entries:
            timestamp = entry.split(' ')[0:2]
            message = ' '.join(entry.split(' ')[3:])
            print(f"     –°—Ç—Ä–æ–∫–∞ {line_num}: {' '.join(timestamp)} - {message}")
        
        return log_file
    
    log_file = log_operations()
    
    print("\n6. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏:")
    
    def format_conversion():
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏"""
        
        print("   –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è JSON ‚Üí CSV:")
        
        # –ß–∏—Ç–∞–µ–º JSON
        with open(json_file, 'r', encoding='utf-8') as file:
            json_data = json.load(file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ CSV (—Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        converted_csv = 'converted_users.csv'
        
        with open(converted_csv, 'w', newline='', encoding='utf-8') as file:
            if json_data['users']:
                writer = csv.DictWriter(file, fieldnames=json_data['users'][0].keys())
                writer.writeheader()
                
                for user in json_data['users']:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
                    user_copy = user.copy()
                    user_copy['skills'] = '|'.join(user['skills'])
                    writer.writerow(user_copy)
        
        print(f"     ‚úÖ –°–æ–∑–¥–∞–Ω {converted_csv}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        json_size = os.path.getsize(json_file)
        csv_size = os.path.getsize(converted_csv)
        
        print(f"     üìè JSON: {json_size} –±–∞–π—Ç, CSV: {csv_size} –±–∞–π—Ç")
        print(f"     üìä CSV —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {(csv_size/json_size)*100:.1f}% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ JSON")
        
        return converted_csv
    
    converted_file = format_conversion()
    
    # –û—á–∏—Å—Ç–∫–∞
    print("\n7. –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    created_files = [json_file, csv_file, xml_file, ini_file, log_file, converted_file]
    
    total_size = 0
    for filename in created_files:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            total_size += size
            print(f"   üìÑ {filename}: {size} –±–∞–π—Ç")
    
    print(f"   üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç")
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    print("\n8. –û—á–∏—Å—Ç–∫–∞:")
    for filename in created_files:
        if os.path.exists(filename):
            os.remove(filename)
            print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω {filename}")


def example_05_secure_file_operations():
    """
    –ü—Ä–∏–º–µ—Ä 5: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏:
    –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π, –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 5: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ===")
    
    print("1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π:")
    
    def validate_file_path(filepath, allowed_dirs=None):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
        
        if allowed_dirs is None:
            allowed_dirs = ['.', './data', './temp']
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
            normalized_path = os.path.normpath(filepath)
            absolute_path = os.path.abspath(normalized_path)
            
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏: {filepath}")
            print(f"     –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: {normalized_path}")
            print(f"     –ê–±—Å–æ–ª—é—Ç–Ω—ã–π: {absolute_path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ path traversal
            if '..' in normalized_path:
                print("     ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω path traversal (..)")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            path_obj = Path(absolute_path)
            current_dir = Path.cwd()
            
            is_in_allowed_dir = False
            for allowed_dir in allowed_dirs:
                allowed_path = current_dir / allowed_dir
                try:
                    path_obj.relative_to(allowed_path.resolve())
                    is_in_allowed_dir = True
                    print(f"     ‚úÖ –ü—É—Ç—å –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {allowed_dir}")
                    break
                except ValueError:
                    continue
            
            if not is_in_allowed_dir:
                print(f"     ‚ùå –ü—É—Ç—å –Ω–µ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö: {allowed_dirs}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = os.path.basename(filepath)
            if len(filename) > 255:
                print("     ‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            invalid_chars = '<>:"|?*'
            if any(char in filename for char in invalid_chars):
                print(f"     ‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {invalid_chars}")
                return False
            
            print("     ‚úÖ –ü—É—Ç—å –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return True
            
        except Exception as e:
            print(f"     ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏
    test_paths = [
        "safe_file.txt",           # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π
        "./data/config.json",      # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π
        "../../../etc/passwd",     # Path traversal
        "normal_file_name.txt",    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π
        "file<with>invalid:chars.txt",  # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        "a" * 300 + ".txt"         # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
    ]
    
    for test_path in test_paths:
        validate_file_path(test_path)
        print()
    
    print("2. –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏:")
    
    @contextmanager
    def atomic_write(filepath, mode='w', encoding='utf-8', **kwargs):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dir_path = os.path.dirname(filepath) or '.'
        
        with tempfile.NamedTemporaryFile(
            mode=mode,
            encoding=encoding if 'b' not in mode else None,
            dir=dir_path,
            delete=False,
            **kwargs
        ) as temp_file:
            
            temp_filepath = temp_file.name
            
            try:
                print(f"   üìù –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ {filepath}")
                print(f"     –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_filepath}")
                
                yield temp_file
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∏—Å–∫
                temp_file.flush()
                os.fsync(temp_file.fileno())
                
            except Exception:
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_filepath):
                    os.unlink(temp_filepath)
                raise
        
        # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            if os.name == 'nt':  # Windows
                if os.path.exists(filepath):
                    os.unlink(filepath)
            
            shutil.move(temp_filepath, filepath)
            print(f"     ‚úÖ –§–∞–π–ª –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–ø–∏—Å–∞–Ω")
            
        except Exception as e:
            if os.path.exists(temp_filepath):
                os.unlink(temp_filepath)
            raise e
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –∑–∞–ø–∏—Å—å
    def test_atomic_write():
        test_file = "atomic_test.txt"
        
        try:
            with atomic_write(test_file) as f:
                f.write("–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n")
                f.write("–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞\n")
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                time.sleep(0.1)
                f.write("–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞\n")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(test_file, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.strip().split('\n')
                print(f"     üìñ –ó–∞–ø–∏—Å–∞–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫")
            
        finally:
            if os.path.exists(test_file):
                os.remove(test_file)
    
    test_atomic_write()
    
    print("\n3. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏:")
    
    def secure_temp_operations():
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        
        print("   üîí –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(
            mode='w+',
            encoding='utf-8',
            prefix='secure_',
            suffix='.tmp',
            delete=True
        ) as temp_file:
            
            print(f"     –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file.name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            stat_info = os.stat(temp_file.name)
            permissions = oct(stat_info.st_mode)[-3:]
            print(f"     –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {permissions}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            sensitive_data = """
            –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
            - –ü–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: secret123
            - API –∫–ª—é—á: abc-def-ghi-jkl
            - –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞: xyz789
            """
            
            temp_file.write(sensitive_data)
            temp_file.flush()
            
            # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            temp_file.seek(0)
            read_data = temp_file.read()
            
            print(f"     –ó–∞–ø–∏—Å–∞–Ω–æ {len(read_data)} —Å–∏–º–≤–æ–ª–æ–≤")
            print("     ‚úÖ –§–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω")
        
        print("     ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        with tempfile.TemporaryDirectory(prefix='secure_dir_') as temp_dir:
            print(f"   üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for i in range(3):
                file_path = os.path.join(temp_dir, f"temp_file_{i}.txt")
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–æ–º–µ—Ä {i}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            files = os.listdir(temp_dir)
            print(f"     –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
            
        print("     ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
    
    secure_temp_operations()
    
    print("\n4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º:")
    
    def handle_file_errors():
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏"""
        
        error_scenarios = [
            ("nonexistent_file.txt", "r", "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"),
            ("/root/protected_file.txt", "w", "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"),
            ("", "w", "–ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"),
            ("con", "w", "–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è (Windows)")
        ]
        
        for filepath, mode, description in error_scenarios:
            print(f"   üß™ –¢–µ—Å—Ç: {description}")
            
            try:
                with open(filepath, mode, encoding='utf-8') as f:
                    f.write("test data")
                
                print("     ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
                if os.path.exists(filepath):
                    os.remove(filepath)
                
            except FileNotFoundError:
                print("     üìÅ FileNotFoundError: –§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except PermissionError:
                print("     üîí PermissionError: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            except OSError as e:
                print(f"     üí• OSError: {e}")
            except Exception as e:
                print(f"     ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
    
    handle_file_errors()
    
    print("\n5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:")
    
    class FileOperationMonitor:
        """–ú–æ–Ω–∏—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        
        def __init__(self):
            self.operations = []
        
        @contextmanager
        def monitor_operation(self, operation_type, filepath):
            """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
            
            start_time = time.perf_counter()
            operation_id = len(self.operations) + 1
            
            print(f"   üîç [{operation_id}] –ù–∞—á–∞–ª–æ: {operation_type} {filepath}")
            
            try:
                yield
                
                end_time = time.perf_counter()
                duration = end_time - start_time
                
                self.operations.append({
                    'id': operation_id,
                    'type': operation_type,
                    'filepath': filepath,
                    'duration': duration,
                    'success': True,
                    'timestamp': time.time()
                })
                
                print(f"   ‚úÖ [{operation_id}] –£—Å–ø–µ—Ö: {duration:.3f}s")
                
            except Exception as e:
                end_time = time.perf_counter()
                duration = end_time - start_time
                
                self.operations.append({
                    'id': operation_id,
                    'type': operation_type,
                    'filepath': filepath,
                    'duration': duration,
                    'success': False,
                    'error': str(e),
                    'timestamp': time.time()
                })
                
                print(f"   ‚ùå [{operation_id}] –û—à–∏–±–∫–∞: {e} ({duration:.3f}s)")
                raise
        
        def get_stats(self):
            """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π"""
            if not self.operations:
                return {}
            
            successful = [op for op in self.operations if op['success']]
            failed = [op for op in self.operations if not op['success']]
            
            total_duration = sum(op['duration'] for op in self.operations)
            avg_duration = total_duration / len(self.operations)
            
            return {
                'total_operations': len(self.operations),
                'successful': len(successful),
                'failed': len(failed),
                'success_rate': len(successful) / len(self.operations) * 100,
                'total_duration': total_duration,
                'average_duration': avg_duration
            }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor = FileOperationMonitor()
    
    # –£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    with monitor.monitor_operation("CREATE", "monitored_file.txt"):
        with open("monitored_file.txt", 'w', encoding='utf-8') as f:
            f.write("–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏")
    
    with monitor.monitor_operation("READ", "monitored_file.txt"):
        with open("monitored_file.txt", 'r', encoding='utf-8') as f:
            content = f.read()
    
    # –û–ø–µ—Ä–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π
    try:
        with monitor.monitor_operation("READ", "nonexistent.txt"):
            with open("nonexistent.txt", 'r', encoding='utf-8') as f:
                content = f.read()
    except FileNotFoundError:
        pass  # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = monitor.get_stats()
    print(f"\n   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:")
    print(f"     –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {stats['total_operations']}")
    print(f"     –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful']}")
    print(f"     –° –æ—à–∏–±–∫–∞–º–∏: {stats['failed']}")
    print(f"     –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")
    print(f"     –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_duration']:.3f}s")
    print(f"     –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['average_duration']:.3f}s")
    
    # –û—á–∏—Å—Ç–∫–∞
    print("\n6. –û—á–∏—Å—Ç–∫–∞:")
    test_files = ["monitored_file.txt"]
    
    for filepath in test_files:
        if os.path.exists(filepath):
            os.remove(filepath)
            print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω {filepath}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    """
    examples = [
        ("–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏", example_01_basic_file_operations),
        ("–†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏", example_02_encoding_handling),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤", example_03_large_file_processing),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö", example_04_structured_data_formats),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", example_05_secure_file_operations),
    ]
    
    print("üìÅ –ü—Ä–∏–º–µ—Ä—ã: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ Python")
    print("=" * 70)
    print("–≠—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç:")
    print("- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏")
    print("- –†–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏")
    print("- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
    print("- –†–∞–±–æ—Ç—É —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏")
    print("- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏")
    print("=" * 70)
    
    for i, (name, func) in enumerate(examples, 1):
        print(f"\n{i}. {name}")
        print("-" * (len(name) + 3))
        try:
            func()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
        
        if i < len(examples):
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    main() 