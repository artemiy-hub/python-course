#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã: –ò—Å–∫–ª—é—á–µ–Ω–∏—è –≤ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:
- –û—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π try-except-finally
- –°–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
- –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
"""

import asyncio
import functools
import logging
import time
import traceback
import sys
from datetime import datetime
from typing import Optional, Any, Callable, Type
from contextlib import contextmanager
import json


def example_01_basic_exceptions():
    """
    –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è Python
    –∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π ===")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    def demonstrate_exception(exception_type, description):
        print(f"\n{description}:")
        try:
            if exception_type == "ZeroDivisionError":
                result = 10 / 0
            elif exception_type == "IndexError":
                items = [1, 2, 3]
                value = items[10]
            elif exception_type == "KeyError":
                data = {"a": 1, "b": 2}
                value = data["c"]
            elif exception_type == "ValueError":
                number = int("–Ω–µ —á–∏—Å–ª–æ")
            elif exception_type == "TypeError":
                result = "—Å—Ç—Ä–æ–∫–∞" + 42
            elif exception_type == "AttributeError":
                value = "—Å—Ç—Ä–æ–∫–∞".nonexistent_method()
            elif exception_type == "FileNotFoundError":
                with open("–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π_—Ñ–∞–π–ª.txt") as f:
                    content = f.read()
            elif exception_type == "ImportError":
                import –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π_–º–æ–¥—É–ª—å
            else:
                print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"  –ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {type(e).__name__}")
            print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            print(f"  –ú–æ–¥—É–ª—å: {type(e).__module__}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    exceptions_demo = [
        ("ZeroDivisionError", "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"),
        ("IndexError", "–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"),
        ("KeyError", "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è"),
        ("ValueError", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞"),
        ("TypeError", "–û–ø–µ—Ä–∞—Ü–∏—è —Å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ —Ç–∏–ø–∞–º–∏"),
        ("AttributeError", "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç"),
        ("FileNotFoundError", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        ("ImportError", "–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
    ]
    
    for exc_type, description in exceptions_demo:
        demonstrate_exception(exc_type, description)
    
    print("\n" + "="*50)
    print("–ò–µ—Ä–∞—Ä—Ö–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è):")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
    def show_exception_hierarchy():
        try:
            # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç IndexError
            [1, 2, 3][10]
        except LookupError as e:  # IndexError –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç LookupError
            print(f"–ü–æ–π–º–∞–Ω–æ –∫–∞–∫ LookupError: {type(e).__name__}")
        except Exception as e:
            print(f"–ü–æ–π–º–∞–Ω–æ –∫–∞–∫ Exception: {type(e).__name__}")
    
    show_exception_hierarchy()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
    print("\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏:")
    try:
        result = 1 / 0
    except ZeroDivisionError as e:
        print(f"–¢–∏–ø: {type(e)}")
        print(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {e.args}")
        print(f"–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {str(e)}")
        print(f"repr: {repr(e)}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ
        exc_type, exc_value, exc_traceback = sys.exc_info()
        print(f"–¢–∏–ø –∏–∑ sys.exc_info(): {exc_type}")
        print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ sys.exc_info(): {exc_value}")


def example_02_try_except_patterns():
    """
    –ü—Ä–∏–º–µ—Ä 2: –ü–∞—Ç—Ç–µ—Ä–Ω—ã try-except
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π,
    –≤–∫–ª—é—á–∞—è else –∏ finally –±–ª–æ–∫–∏.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 2: –ü–∞—Ç—Ç–µ—Ä–Ω—ã try-except ===")
    
    def safe_divide(a, b):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        print(f"\n–ü–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–µ–Ω–∏—è {a} –Ω–∞ {b}:")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
            if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
                raise TypeError("–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            if b == 0:
                raise ZeroDivisionError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ª–µ–Ω–∏—è
            result = a / b
            
        except TypeError as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–∞: {e}")
            return None
            
        except ZeroDivisionError as e:
            print(f"  ‚ùå –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
            
        except Exception as e:
            print(f"  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
            return None
            
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
            print(f"  ‚úÖ –î–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {result}")
            return result
            
        finally:
            # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
            print(f"  üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    test_cases = [
        (10, 2),      # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
        (10, 0),      # –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
        ("10", 2),    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        (10.5, 2.1),  # –ß–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    ]
    
    for a, b in test_cases:
        result = safe_divide(a, b)
        if result is not None:
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    print("\n" + "="*50)
    print("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:")
    
    def process_data(data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏"""
        try:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if not data:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            
            if not isinstance(data, dict):
                raise TypeError("–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            
            if "id" not in data:
                raise KeyError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'id'")
            
            user_id = int(data["id"])
            
            if user_id <= 0:
                raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return {"processed_id": user_id, "status": "success"}
            
        except (ValueError, TypeError) as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {"error": str(e), "type": "validation"}
            
        except KeyError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
            print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {e}")
            return {"error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {e}", "type": "missing_field"}
            
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {"error": str(e), "type": "unexpected"}
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    test_data = [
        {"id": "123"},          # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
        {"id": "0"},            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        {"name": "test"},       # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID
        "not a dict",           # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        None,                   # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        {"id": "–Ω–µ —á–∏—Å–ª–æ"},     # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID
    ]
    
    for data in test_data:
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {data}")
        result = process_data(data)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


def example_03_custom_exceptions():
    """
    –ü—Ä–∏–º–µ—Ä 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ===")
    
    # –ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    class AppError(Exception):
        """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        def __init__(self, message, error_code=None, context=None):
            super().__init__(message)
            self.error_code = error_code
            self.context = context or {}
            self.timestamp = datetime.now()
        
        def __str__(self):
            msg = self.args[0]
            if self.error_code:
                msg = f"[{self.error_code}] {msg}"
            return msg
        
        def to_dict(self):
            """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
            return {
                "error_type": self.__class__.__name__,
                "message": self.args[0],
                "error_code": self.error_code,
                "context": self.context,
                "timestamp": self.timestamp.isoformat()
            }
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    class ValidationError(AppError):
        """–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        
        def __init__(self, message, field=None, value=None, error_code=None):
            super().__init__(message, error_code)
            self.field = field
            self.value = value
            self.context.update({
                "field": field,
                "value": value
            })
    
    class BusinessLogicError(AppError):
        """–û—à–∏–±–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏"""
        
        def __init__(self, message, rule=None, error_code=None):
            super().__init__(message, error_code)
            self.rule = rule
            self.context["rule"] = rule
    
    class ExternalServiceError(AppError):
        """–û—à–∏–±–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        def __init__(self, message, service_name=None, status_code=None, error_code=None):
            super().__init__(message, error_code)
            self.service_name = service_name
            self.status_code = status_code
            self.context.update({
                "service": service_name,
                "status_code": status_code
            })
    
    class DatabaseError(AppError):
        """–û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        
        def __init__(self, message, operation=None, table=None, error_code=None):
            super().__init__(message, error_code)
            self.operation = operation
            self.table = table
            self.context.update({
                "operation": operation,
                "table": table
            })
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    class UserService:
        """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        
        def __init__(self):
            self.users = {"1": {"name": "–ê–ª–∏—Å–∞", "email": "alice@example.com"}}
        
        def validate_user_data(self, data):
            """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            if not isinstance(data, dict):
                raise ValidationError(
                    "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º",
                    error_code="INVALID_TYPE"
                )
            
            if not data.get("name"):
                raise ValidationError(
                    "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
                    field="name",
                    value=data.get("name"),
                    error_code="REQUIRED_FIELD"
                )
            
            if len(data["name"]) < 2:
                raise ValidationError(
                    "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞",
                    field="name",
                    value=data["name"],
                    error_code="MIN_LENGTH"
                )
            
            email = data.get("email", "")
            if email and "@" not in email:
                raise ValidationError(
                    "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email",
                    field="email",
                    value=email,
                    error_code="INVALID_FORMAT"
                )
        
        def check_business_rules(self, data):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª"""
            email = data.get("email", "")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
            for user_id, user in self.users.items():
                if user.get("email") == email:
                    raise BusinessLogicError(
                        f"Email {email} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è",
                        rule="unique_email",
                        error_code="DUPLICATE_EMAIL"
                    )
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
            if email.endswith("@blocked.com"):
                raise ExternalServiceError(
                    "Email –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–ª—É–∂–±–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    service_name="security_service",
                    status_code=403,
                    error_code="EMAIL_BLOCKED"
                )
        
        def save_user(self, data):
            """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –ë–î
            if data.get("name") == "error":
                raise DatabaseError(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    operation="INSERT",
                    table="users",
                    error_code="DB_INSERT_FAILED"
                )
            
            user_id = str(len(self.users) + 1)
            self.users[user_id] = data
            return user_id
        
        def create_user(self, user_data):
            """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            try:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                self.validate_user_data(user_data)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
                self.check_business_rules(user_data)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                user_id = self.save_user(user_data)
                
                return {"success": True, "user_id": user_id}
                
            except ValidationError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
                return {"success": False, "error": e.to_dict()}
                
            except BusinessLogicError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: {e}")
                return {"success": False, "error": e.to_dict()}
                
            except ExternalServiceError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")
                return {"success": False, "error": e.to_dict()}
                
            except DatabaseError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                return {"success": False, "error": e.to_dict()}
                
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ AppError
                app_error = AppError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", error_code="UNEXPECTED")
                print(f"‚ùå {app_error}")
                return {"success": False, "error": app_error.to_dict()}
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    service = UserService()
    
    test_users = [
        {"name": "–ë–æ–±", "email": "bob@example.com"},    # –£—Å–ø–µ—à–Ω—ã–π —Å–ª—É—á–∞–π
        {"email": "no_name@example.com"},               # –ù–µ—Ç –∏–º–µ–Ω–∏
        {"name": "A"},                                  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
        {"name": "–ß–∞—Ä–ª–∏", "email": "invalid-email"},    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email
        {"name": "–î–∏–∞–Ω–∞", "email": "alice@example.com"}, # –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è email
        {"name": "–ï–≤–∞", "email": "eva@blocked.com"},    # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email
        {"name": "error", "email": "error@example.com"}, # –û—à–∏–±–∫–∞ –ë–î
        "–Ω–µ —Å–ª–æ–≤–∞—Ä—å",                                   # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for i, user_data in enumerate(test_users, 1):
        print(f"\n{i}. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
        result = service.create_user(user_data)
        
        if result["success"]:
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {result['user_id']}")
        else:
            error = result["error"]
            print(f"   ‚ùå {error['error_type']}: {error['message']}")
            if error.get("context"):
                print(f"      –ö–æ–Ω—Ç–µ–∫—Å—Ç: {error['context']}")


def example_04_exception_decorators():
    """
    –ü—Ä–∏–º–µ—Ä 4: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 4: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ===")
    
    def retry(max_attempts=3, delay=1, backoff=1, exceptions=(Exception,)):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
        
        Args:
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            backoff: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            exceptions: –¢–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
        """
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                current_delay = delay
                last_exception = None
                
                for attempt in range(max_attempts):
                    try:
                        return func(*args, **kwargs)
                    except exceptions as e:
                        last_exception = e
                        if attempt == max_attempts - 1:
                            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                            raise
                        
                        print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                        print(f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {current_delay} —Å–µ–∫—É–Ω–¥...")
                        time.sleep(current_delay)
                        current_delay *= backoff
                
                # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                raise last_exception
            
            return wrapper
        return decorator
    
    def handle_exceptions(*exception_types, default_return=None, log_errors=True):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except exception_types as e:
                    if log_errors:
                        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {func.__name__}: {e}")
                    return default_return
                except Exception as e:
                    if log_errors:
                        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {func.__name__}: {e}")
                    raise
            return wrapper
        return decorator
    
    def validate_types(**type_checks):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        """
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
                import inspect
                sig = inspect.signature(func)
                bound_args = sig.bind(*args, **kwargs)
                bound_args.apply_defaults()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
                for param_name, expected_type in type_checks.items():
                    if param_name in bound_args.arguments:
                        value = bound_args.arguments[param_name]
                        if not isinstance(value, expected_type):
                            raise TypeError(
                                f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–∞ {expected_type.__name__}, "
                                f"–ø–æ–ª—É—á–µ–Ω {type(value).__name__}"
                            )
                
                return func(*args, **kwargs)
            return wrapper
        return decorator
    
    def log_exceptions(logger_name=None):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        """
        def decorator(func):
            logger = logging.getLogger(logger_name or func.__module__)
            
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    logger.exception(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {func.__name__}")
                    raise
            return wrapper
        return decorator
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
    
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    
    @retry(max_attempts=3, delay=0.5, exceptions=(ConnectionError, TimeoutError))
    def unreliable_network_call(success_rate=0.3):
        """–ù–µ–Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –≤—ã–∑–æ–≤"""
        import random
        if random.random() > success_rate:
            raise ConnectionError("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞")
        return "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
    
    @handle_exceptions(ValueError, TypeError, default_return=0)
    def safe_division(a, b):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        return a / b
    
    @validate_types(name=str, age=int, email=str)
    def create_person(name, age, email):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤"""
        if age < 0:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        return {"name": name, "age": age, "email": email}
    
    @log_exceptions("user_service")
    @handle_exceptions(ValueError, default_return=None)
    def process_user(user_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not user_data:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}"
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞:")
    try:
        result = unreliable_network_call(success_rate=0.7)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        print(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:")
    print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ 10/2: {safe_division(10, 2)}")
    print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ 10/0: {safe_division(10, 0)}")
    print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ '10'/2: {safe_division('10', 2)}")
    
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤:")
    try:
        person = create_person("–ê–ª–∏—Å–∞", 25, "alice@example.com")
        print(f"–ü–µ—Ä—Å–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: {person}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã: {e}")
    
    try:
        person = create_person("–ë–æ–±", "25", "bob@example.com")  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –≤–æ–∑—Ä–∞—Å—Ç–∞
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    result = process_user({"name": "–¢–µ—Å—Ç"})
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
    
    result = process_user(None)  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π: {result}")


def example_05_context_managers():
    """
    –ü—Ä–∏–º–µ—Ä 5: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 5: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ===")
    
    class DatabaseConnection:
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        def __init__(self, connection_string):
            self.connection_string = connection_string
            self.connected = False
            self.transaction_active = False
        
        def connect(self):
            print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {self.connection_string}")
            # –ò–º–∏—Ç–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if "invalid" in self.connection_string:
                raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            self.connected = True
        
        def disconnect(self):
            if self.connected:
                print("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î")
                self.connected = False
        
        def begin_transaction(self):
            if not self.connected:
                raise RuntimeError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            print("–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            self.transaction_active = True
        
        def commit(self):
            if self.transaction_active:
                print("–ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                self.transaction_active = False
        
        def rollback(self):
            if self.transaction_active:
                print("–û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                self.transaction_active = False
    
    class DatabaseManager:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
        
        def __init__(self, connection_string, auto_transaction=True):
            self.connection_string = connection_string
            self.auto_transaction = auto_transaction
            self.connection = None
        
        def __enter__(self):
            self.connection = DatabaseConnection(self.connection_string)
            self.connection.connect()
            
            if self.auto_transaction:
                self.connection.begin_transaction()
            
            return self.connection
        
        def __exit__(self, exc_type, exc_val, exc_tb):
            if self.connection:
                if self.auto_transaction:
                    if exc_type is None:
                        # –ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –∫–æ–º–º–∏—Ç–∏–º
                        self.connection.commit()
                    else:
                        # –ï—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º
                        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ {exc_type.__name__}: {exc_val}")
                        self.connection.rollback()
                
                self.connection.disconnect()
            
            # –ù–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            return False
    
    @contextmanager
    def error_handler(error_mapping=None, default_handler=None):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        """
        errors = []
        try:
            yield errors
        except Exception as e:
            errors.append(e)
            
            # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if error_mapping:
                for error_type, handler in error_mapping.items():
                    if isinstance(e, error_type):
                        handler(e)
                        return  # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if default_handler:
                default_handler(e)
            else:
                # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                raise
    
    class ResourceManager:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏"""
        
        def __init__(self, resource_name):
            self.resource_name = resource_name
            self.resource = None
            self.allocated = False
        
        def __enter__(self):
            print(f"–í—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞: {self.resource_name}")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            if "fail" in self.resource_name:
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å: {self.resource_name}")
            
            self.resource = f"resource_{self.resource_name}"
            self.allocated = True
            return self.resource
        
        def __exit__(self, exc_type, exc_val, exc_tb):
            if self.allocated:
                print(f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞: {self.resource_name}")
                if exc_type:
                    print(f"  –†–µ—Å—É—Ä—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –∏–∑-–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {exc_type.__name__}")
                else:
                    print(f"  –†–µ—Å—É—Ä—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                self.allocated = False
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DatabaseManager:")
    
    # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    try:
        with DatabaseManager("postgresql://localhost:5432/test") as db:
            print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î...")
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
            print("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "-"*30)
    
    # –û–ø–µ—Ä–∞—Ü–∏—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
    try:
        with DatabaseManager("postgresql://localhost:5432/test") as db:
            print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î...")
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏
            raise ValueError("–û—à–∏–±–∫–∞ –≤ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ")
    except Exception as e:
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("\n" + "-"*30)
    
    # –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        with DatabaseManager("invalid://connection") as db:
            print("–≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:")
    
    def handle_validation_error(error):
        print(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}")
    
    def handle_network_error(error):
        print(f"üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏: {error}")
    
    def handle_default_error(error):
        print(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –æ—à–∏–±–∫–∏: {error}")
    
    error_handlers = {
        ValueError: handle_validation_error,
        ConnectionError: handle_network_error,
    }
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    test_errors = [
        lambda: ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
        lambda: ConnectionError("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞"),
        lambda: RuntimeError("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞"),
    ]
    
    for i, error_func in enumerate(test_errors, 1):
        print(f"\n–¢–µ—Å—Ç {i}:")
        with error_handler(error_handlers, handle_default_error):
            raise error_func()
    
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏:")
    
    # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ
    try:
        with ResourceManager("memory_pool") as resource:
            print(f"–†–∞–±–æ—Ç–∞ —Å —Ä–µ—Å—É—Ä—Å–æ–º: {resource}")
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
            time.sleep(0.1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å —Ä–µ—Å—É—Ä—Å–æ–º: {e}")
    
    print("\n" + "-"*20)
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Å—É—Ä—Å–æ–º
    try:
        with ResourceManager("network_socket") as resource:
            print(f"–†–∞–±–æ—Ç–∞ —Å —Ä–µ—Å—É—Ä—Å–æ–º: {resource}")
            raise RuntimeError("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Å—É—Ä—Å–æ–º")
    except Exception as e:
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("\n" + "-"*20)
    
    # –û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
    try:
        with ResourceManager("fail_resource") as resource:
            print("–≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞: {e}")


def example_06_async_exceptions():
    """
    –ü—Ä–∏–º–µ—Ä 6: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ,
    –≤–∫–ª—é—á–∞—è –∫–æ—Ä—É—Ç–∏–Ω—ã –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 6: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ===")
    
    async def unreliable_async_operation(operation_id, success_rate=0.5, delay=1):
        """–ù–µ–Ω–∞–¥–µ–∂–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"""
        await asyncio.sleep(delay)
        
        import random
        if random.random() > success_rate:
            if random.random() > 0.5:
                raise ConnectionError(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation_id}")
            else:
                raise TimeoutError(f"–¢–∞–π–º–∞—É—Ç –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation_id}")
        
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation_id}"
    
    async def async_retry(coro_func, max_attempts=3, delay=1, *args, **kwargs):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π retry –¥–ª—è –∫–æ—Ä—É—Ç–∏–Ω"""
        for attempt in range(max_attempts):
            try:
                return await coro_func(*args, **kwargs)
            except (ConnectionError, TimeoutError) as e:
                if attempt == max_attempts - 1:
                    raise
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                await asyncio.sleep(delay)
    
    async def safe_async_operation(operation_id, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            result = await async_retry(
                unreliable_async_operation, 
                max_attempts=3, 
                delay=0.5,
                operation_id=operation_id,
                **kwargs
            )
            return {"success": True, "result": result, "operation_id": operation_id}
        except Exception as e:
            return {
                "success": False, 
                "error": str(e), 
                "error_type": type(e).__name__,
                "operation_id": operation_id
            }
    
    async def batch_async_operations(operation_configs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print(f"–ó–∞–ø—É—Å–∫ {len(operation_configs)} –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = []
        for config in operation_configs:
            task = asyncio.create_task(
                safe_async_operation(**config),
                name=f"operation_{config['operation_id']}"
            )
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = 0
        failed = 0
        
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"‚ùå –ó–∞–¥–∞—á–∞ {i}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {result}")
                failed += 1
            elif result.get("success"):
                print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è {result['operation_id']}: {result['result']}")
                successful += 1
            else:
                print(f"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è {result['operation_id']}: {result['error']}")
                failed += 1
        
        print(f"\n–ò—Ç–æ–≥–æ: {successful} —É—Å–ø–µ—à–Ω—ã—Ö, {failed} –Ω–µ—É–¥–∞—á–Ω—ã—Ö")
        return results
    
    class AsyncContextManager:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        
        def __init__(self, resource_name):
            self.resource_name = resource_name
            self.resource = None
        
        async def __aenter__(self):
            print(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞: {self.resource_name}")
            # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
            await asyncio.sleep(0.1)
            
            if "fail" in self.resource_name:
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å: {self.resource_name}")
            
            self.resource = f"async_resource_{self.resource_name}"
            return self.resource
        
        async def __aexit__(self, exc_type, exc_val, exc_tb):
            print(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞: {self.resource_name}")
            if exc_type:
                print(f"  –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∏–∑-–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {exc_type.__name__}")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            await asyncio.sleep(0.1)
            return False  # –ù–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    
    async def test_async_context_manager():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
        
        # –£—Å–ø–µ—à–Ω—ã–π —Å–ª—É—á–∞–π
        try:
            async with AsyncContextManager("database") as resource:
                print(f"–†–∞–±–æ—Ç–∞ —Å —Ä–µ—Å—É—Ä—Å–æ–º: {resource}")
                await asyncio.sleep(0.1)
                print("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        
        print("\n" + "-"*20)
        
        # –°–ª—É—á–∞–π —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
        try:
            async with AsyncContextManager("network") as resource:
                print(f"–†–∞–±–æ—Ç–∞ —Å —Ä–µ—Å—É—Ä—Å–æ–º: {resource}")
                raise ValueError("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        except Exception as e:
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print("\n" + "-"*20)
        
        # –û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
        try:
            async with AsyncContextManager("fail_resource") as resource:
                print("–≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è: {e}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    async def run_async_examples():
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        operations = [
            {"operation_id": 1, "success_rate": 0.8, "delay": 0.5},
            {"operation_id": 2, "success_rate": 0.3, "delay": 0.3},
            {"operation_id": 3, "success_rate": 0.9, "delay": 0.7},
            {"operation_id": 4, "success_rate": 0.1, "delay": 0.2},
            {"operation_id": 5, "success_rate": 0.7, "delay": 0.4},
        ]
        
        # –ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        await batch_async_operations(operations)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await test_async_context_manager()
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    try:
        asyncio.run(run_async_examples())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ: {e}")


def example_07_exception_monitoring():
    """
    –ü—Ä–∏–º–µ—Ä 7: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 7: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ===")
    
    from collections import defaultdict, Counter
    import threading
    
    class ExceptionMonitor:
        """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        
        def __init__(self):
            self.exception_stats = defaultdict(lambda: {
                'count': 0,
                'total_time': 0,
                'first_seen': None,
                'last_seen': None,
                'locations': Counter(),
                'messages': Counter(),
                'contexts': []
            })
            self.enabled = True
            self.lock = threading.Lock()
        
        def record_exception(self, exc_type, exc_value, exc_traceback, context=None):
            """–ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏"""
            if not self.enabled:
                return
            
            with self.lock:
                exc_name = exc_type.__name__
                now = datetime.now()
                
                stats = self.exception_stats[exc_name]
                stats['count'] += 1
                
                if stats['first_seen'] is None:
                    stats['first_seen'] = now
                stats['last_seen'] = now
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è
                if exc_traceback:
                    tb_lines = traceback.extract_tb(exc_traceback)
                    if tb_lines:
                        last_frame = tb_lines[-1]
                        location = f"{last_frame.filename}:{last_frame.lineno}"
                        stats['locations'][location] += 1
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                message = str(exc_value)
                stats['messages'][message] += 1
                
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
                if context:
                    stats['contexts'].append({
                        'timestamp': now.isoformat(),
                        'context': context
                    })
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
                    if len(stats['contexts']) > 100:
                        stats['contexts'] = stats['contexts'][-50:]
        
        def monitor_function(self, func):
            """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                start_time = time.time()
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    end_time = time.time()
                    duration = end_time - start_time
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    exc_type, exc_value, exc_traceback = sys.exc_info()
                    
                    context = {
                        'function': func.__name__,
                        'module': func.__module__,
                        'duration': duration,
                        'args_count': len(args),
                        'kwargs_keys': list(kwargs.keys())
                    }
                    
                    self.record_exception(exc_type, exc_value, exc_traceback, context)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                    with self.lock:
                        self.exception_stats[exc_type.__name__]['total_time'] += duration
                    
                    # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                    raise
            
            return wrapper
        
        def get_report(self, top_n=10):
            """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º"""
            with self.lock:
                if not self.exception_stats:
                    return "–ò—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã"
                
                report = ["üîç –û–¢–ß–ï–¢ –ü–û –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø–ú", "=" * 50]
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                sorted_exceptions = sorted(
                    self.exception_stats.items(),
                    key=lambda x: x[1]['count'],
                    reverse=True
                )
                
                for exc_type, stats in sorted_exceptions[:top_n]:
                    avg_time = stats['total_time'] / stats['count'] if stats['count'] > 0 else 0
                    
                    report.append(f"\nüî• {exc_type}:")
                    report.append(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['count']}")
                    report.append(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_time']:.3f}s")
                    report.append(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}s")
                    report.append(f"   –ü–µ—Ä–≤–æ–µ: {stats['first_seen']}")
                    report.append(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {stats['last_seen']}")
                    
                    # –¢–æ–ø –ª–æ–∫–∞—Ü–∏–π
                    if stats['locations']:
                        report.append("   –¢–æ–ø –ª–æ–∫–∞—Ü–∏–∏:")
                        for location, count in stats['locations'].most_common(3):
                            report.append(f"     {location}: {count}")
                    
                    # –¢–æ–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                    if stats['messages']:
                        report.append("   –¢–æ–ø —Å–æ–æ–±—â–µ–Ω–∏—è:")
                        for message, count in stats['messages'].most_common(3):
                            short_msg = message[:50] + "..." if len(message) > 50 else message
                            report.append(f"     '{short_msg}': {count}")
                
                return "\n".join(report)
        
        def get_stats_json(self):
            """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
            with self.lock:
                result = {}
                for exc_type, stats in self.exception_stats.items():
                    result[exc_type] = {
                        'count': stats['count'],
                        'total_time': stats['total_time'],
                        'avg_time': stats['total_time'] / stats['count'] if stats['count'] > 0 else 0,
                        'first_seen': stats['first_seen'].isoformat() if stats['first_seen'] else None,
                        'last_seen': stats['last_seen'].isoformat() if stats['last_seen'] else None,
                        'top_locations': dict(stats['locations'].most_common(5)),
                        'top_messages': dict(stats['messages'].most_common(5))
                    }
                return result
        
        def reset_stats(self):
            """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
            with self.lock:
                self.exception_stats.clear()
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    monitor = ExceptionMonitor()
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    @monitor.monitor_function
    def problematic_function(operation_type, data=None):
        """–§—É–Ω–∫—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫"""
        if operation_type == "division_by_zero":
            return 10 / 0
        elif operation_type == "index_error":
            return [1, 2, 3][10]
        elif operation_type == "key_error":
            return {"a": 1}["b"]
        elif operation_type == "value_error":
            return int("–Ω–µ —á–∏—Å–ª–æ")
        elif operation_type == "type_error":
            return "—Å—Ç—Ä–æ–∫–∞" + 42
        elif operation_type == "custom_error":
            raise RuntimeError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        elif operation_type == "success":
            return "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_type}")
    
    @monitor.monitor_function
    def network_simulation(endpoint, timeout=1):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        import random
        time.sleep(timeout * random.random())
        
        if "timeout" in endpoint:
            raise TimeoutError(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {endpoint}")
        elif "error" in endpoint:
            raise ConnectionError(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {endpoint}")
        elif "not_found" in endpoint:
            raise ValueError(f"–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {endpoint}")
        else:
            return f"–û—Ç–≤–µ—Ç –æ—Ç {endpoint}"
    
    @monitor.monitor_function
    def data_processor(data_batch):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not data_batch:
            raise ValueError("–ü–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if not isinstance(data_batch, list):
            raise TypeError("–ü–∞–∫–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        
        if len(data_batch) > 1000:
            raise RuntimeError("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processed = 0
        for item in data_batch:
            if item is None:
                raise ValueError("–≠–ª–µ–º–µ–Ω—Ç –ø–∞–∫–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None")
            processed += 1
        
        return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
    test_operations = [
        ("success", None),
        ("division_by_zero", None),
        ("index_error", None),
        ("key_error", None),
        ("value_error", None),
        ("type_error", None),
        ("custom_error", {"user_id": 123}),
        ("unknown_operation", None),
    ] * 3  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    for operation, data in test_operations:
        try:
            result = problematic_function(operation, data)
            print(f"‚úÖ {operation}: {result}")
        except Exception as e:
            print(f"‚ùå {operation}: {type(e).__name__}: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    endpoints = [
        "api/users",
        "api/timeout_service",
        "api/error_service", 
        "api/not_found_resource",
        "api/data",
    ] * 2
    
    for endpoint in endpoints:
        try:
            result = network_simulation(endpoint, timeout=0.1)
            print(f"‚úÖ {endpoint}: {result}")
        except Exception as e:
            print(f"‚ùå {endpoint}: {type(e).__name__}: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    test_batches = [
        [1, 2, 3, 4, 5],
        [],
        "–Ω–µ —Å–ø–∏—Å–æ–∫",
        [1, 2, None, 4],
        list(range(1001)),  # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
    ]
    
    for batch in test_batches:
        try:
            result = data_processor(batch)
            print(f"‚úÖ –ü–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {result}")
        except Exception as e:
            print(f"‚ùå –ü–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {type(e).__name__}: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    print("\n" + monitor.get_report())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON
    stats_json = monitor.get_stats_json()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:")
    print(json.dumps(stats_json, ensure_ascii=False, indent=2))


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    """
    examples = [
        ("–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π", example_01_basic_exceptions),
        ("–ü–∞—Ç—Ç–µ—Ä–Ω—ã try-except", example_02_try_except_patterns),
        ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è", example_03_custom_exceptions),
        ("–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π", example_04_exception_decorators),
        ("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã", example_05_context_managers),
        ("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è", example_06_async_exceptions),
        ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–∫–ª—é—á–µ–Ω–∏–π", example_07_exception_monitoring),
    ]
    
    print("üî• –ü—Ä–∏–º–µ—Ä—ã: –ò—Å–∫–ª—é—á–µ–Ω–∏—è –≤ Python")
    print("=" * 50)
    
    for i, (name, func) in enumerate(examples, 1):
        print(f"\n{i}. {name}")
        print("-" * (len(name) + 3))
        try:
            func()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
        
        if i < len(examples):
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    main() 