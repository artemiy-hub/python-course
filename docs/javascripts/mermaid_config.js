// Enhanced Mermaid configuration with advanced controls like marmaid.html
let mermaidInitialized = false;
let currentScale = 1;
let currentPanX = 0;
let currentPanY = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function resetControlVariables() {
    currentScale = 1;
    currentPanX = 0;
    currentPanY = 0;
    console.log('Control variables reset');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Mermaid
function waitForMermaid() {
    if (typeof mermaid !== 'undefined') {
        console.log('Mermaid library found, initializing controls...');
        initializeMermaidControls();
    } else {
        console.log('Waiting for Mermaid library to load...');
        setTimeout(waitForMermaid, 100);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
function initializeMermaidControls() {
    if (mermaidInitialized) return;
    
    console.log('Initializing Mermaid controls...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Mermaid –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    if (typeof mermaid !== 'undefined') {
        mermaid.initialize({
            startOnLoad: true,
            theme: 'default',
            flowchart: {
                useMaxWidth: true,
                htmlLabels: true
            },
            sequence: {
                useMaxWidth: true
            },
            gantt: {
                useMaxWidth: true
            }
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º mermaid
        mermaid.run();
        console.log('Mermaid initialized and run completed');
    }
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
    setTimeout(() => {
        processMermaidDiagrams();
    }, 500);
    
    mermaidInitialized = true;
    console.log('Mermaid controls initialized successfully');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º
function processMermaidDiagrams() {
    const diagrams = document.querySelectorAll('.mermaid');
    console.log(`Found ${diagrams.length} mermaid diagrams`);
    
    diagrams.forEach((diagram, index) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        addFullscreenButton(diagram);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        diagram.addEventListener('click', function(e) {
            if (e.target.closest('.mermaid-fullscreen-btn')) return;
            openMermaidFullscreen(this);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
function addFullscreenButton(diagram) {
    if (diagram.querySelector('.mermaid-fullscreen-btn')) return;
    
    const button = document.createElement('button');
    button.className = 'mermaid-fullscreen-btn';
    button.innerHTML = '‚õ∂';
    button.title = '–û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ';
    button.style.cssText = `
        position: absolute;
        top: 5px;
        right: 5px;
        background: rgba(52, 152, 219, 0.9);
        color: white;
        border: none;
        border-radius: 4px;
        width: 25px;
        height: 25px;
        font-size: 12px;
        cursor: pointer;
        z-index: 10;
        opacity: 0;
        transition: opacity 0.2s ease;
    `;
    
    diagram.style.position = 'relative';
    diagram.appendChild(button);
    
    diagram.addEventListener('mouseenter', () => {
        button.style.opacity = '1';
    });
    
    diagram.addEventListener('mouseleave', () => {
        button.style.opacity = '0';
    });
    
    button.addEventListener('click', (e) => {
        e.stopPropagation();
        openMermaidFullscreen(diagram);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
function openMermaidFullscreen(diagram) {
    console.log('Opening fullscreen for diagram:', diagram);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const existingModal = document.querySelector('.mermaid-modal-overlay');
    if (existingModal) {
        existingModal.remove();
        document.removeEventListener('keydown', handleKeyDown);
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'mermaid-modal-overlay active';
    modal.innerHTML = `
        <div class="mermaid-modal-content">
            <button class="mermaid-modal-close" data-action="close" title="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
            <button class="mermaid-theme-toggle" data-action="toggleTheme" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">üåô</button>
            <div class="mermaid-modal-diagram-container">
                <div id="mermaid-modal-diagram"></div>
            </div>
            <div class="mermaid-controls">
                <button class="zoom-in" data-action="zoomIn" title="–£–≤–µ–ª–∏—á–∏—Ç—å">+</button>
                <button class="up" data-action="panUp" title="–í–≤–µ—Ä—Ö">‚Üë</button>
                <button class="zoom-out" data-action="zoomOut" title="–£–º–µ–Ω—å—à–∏—Ç—å">‚àí</button>
                <button class="left" data-action="panLeft" title="–í–ª–µ–≤–æ">‚Üê</button>
                <button class="reset" data-action="resetView" title="–°–±—Ä–æ—Å">‚ü≤</button>
                <button class="right" data-action="panRight" title="–í–ø—Ä–∞–≤–æ">‚Üí</button>
                <button class="spacer"></button>
                <button class="down" data-action="panDown" title="–í–Ω–∏–∑">‚Üì</button>
                <button class="spacer"></button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalDiagram = document.getElementById('mermaid-modal-diagram');
    
    // –ò—â–µ–º SVG –∏–ª–∏ –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã
    const originalSvg = diagram.querySelector('svg');
    const originalContent = diagram.innerHTML;
    
    console.log('Original SVG found:', !!originalSvg);
    console.log('Original content length:', originalContent ? originalContent.length : 0);
    
    if (originalSvg) {
        // –ö–æ–ø–∏—Ä—É–µ–º SVG –ø–æ–ª–Ω–æ—Å—Ç—å—é
        const svgHTML = originalSvg.outerHTML;
        console.log('Original SVG HTML length:', svgHTML.length);
        modalDiagram.innerHTML = svgHTML;
        const clonedSvg = modalDiagram.querySelector('svg');
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫ SVG
        if (clonedSvg) {
            applySvgStyles(clonedSvg);
            console.log('SVG fully copied and added to modal');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SVG –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
            console.log('SVG in modal after adding:', !!clonedSvg);
            console.log('SVG dimensions:', clonedSvg.getBoundingClientRect());
            console.log('SVG outerHTML length:', clonedSvg.outerHTML.length);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const containerRect = modalDiagram.getBoundingClientRect();
            console.log('Modal container dimensions:', containerRect);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã SVG
            clonedSvg.style.width = '100%';
            clonedSvg.style.height = '100%';
            clonedSvg.style.minWidth = '400px';
            clonedSvg.style.minHeight = '400px';
            clonedSvg.style.visibility = 'visible';
            clonedSvg.style.opacity = '1';
            console.log('Forced SVG dimensions set');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                const rect = clonedSvg.getBoundingClientRect();
                console.log('SVG dimensions after timeout:', rect);
                console.log('SVG computed styles:', window.getComputedStyle(clonedSvg));
            }, 100);
        } else {
            console.log('Failed to find cloned SVG in modal');
        }
    } else if (originalContent) {
        // –ï—Å–ª–∏ –Ω–µ—Ç SVG, –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        modalDiagram.innerHTML = originalContent;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø–µ—Ä–≤–æ–º—É SVG, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const svg = modalDiagram.querySelector('svg');
        if (svg) {
            applySvgStyles(svg);
            console.log('Content copied and SVG styled');
        } else {
            console.log('No SVG found in copied content');
        }
    } else {
        console.log('No content found in diagram');
    }
    
    // –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    resetControlVariables();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeMermaidModal();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
    document.addEventListener('keydown', handleKeyDown);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setupControlButtons();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –∫ SVG
function applySvgStyles(svg) {
    console.log('Applying styles to SVG:', svg);
    console.log('SVG before styling:', svg.outerHTML.substring(0, 200) + '...');
    
    svg.style.maxWidth = '100%';
    svg.style.maxHeight = '100%';
    svg.style.width = 'auto';
    svg.style.height = 'auto';
    svg.style.transformOrigin = 'center center';
    svg.style.objectFit = 'contain';
    svg.style.display = 'block';
    svg.style.margin = 'auto';
    
    console.log('SVG after styling:', svg.outerHTML.substring(0, 200) + '...');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function setupControlButtons() {
    const modal = document.querySelector('.mermaid-modal-overlay');
    if (!modal) return;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å data-action
    const buttons = modal.querySelectorAll('button[data-action]');
    console.log(`Setting up ${buttons.length} control buttons`);
    
    buttons.forEach(button => {
        const action = button.getAttribute('data-action');
        if (!action || button.classList.contains('spacer')) return;
        
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log(`Control button clicked: ${action}`);
            
            switch(action) {
                case 'panUp': panUp(); break;
                case 'panDown': panDown(); break;
                case 'panLeft': panLeft(); break;
                case 'panRight': panRight(); break;
                case 'zoomIn': zoomIn(); break;
                case 'zoomOut': zoomOut(); break;
                case 'resetView': resetView(); break;
                case 'close': closeMermaidModal(); break;
                case 'toggleTheme': toggleMermaidTheme(); break;
                default: console.log(`Unknown action: ${action}`);
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeMermaidModal() {
    const modal = document.querySelector('.mermaid-modal-overlay');
    if (modal) {
        modal.remove();
        document.removeEventListener('keydown', handleKeyDown);
        console.log('Modal closed');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function zoomIn() {
    console.log('zoomIn function called');
    currentScale = Math.min(currentScale * 1.2, 5);
    console.log('Zoom in:', currentScale);
    updateSvgTransform();
}

function zoomOut() {
    currentScale = Math.max(currentScale / 1.2, 0.1);
    console.log('Zoom out:', currentScale);
    updateSvgTransform();
}

function panUp() {
    console.log('panUp function called');
    currentPanY += 50;
    console.log('Pan up:', currentPanY);
    updateSvgTransform();
}

function panDown() {
    currentPanY -= 50;
    console.log('Pan down:', currentPanY);
    updateSvgTransform();
}

function panLeft() {
    currentPanX += 50;
    console.log('Pan left:', currentPanX);
    updateSvgTransform();
}

function panRight() {
    currentPanX -= 50;
    console.log('Pan right:', currentPanX);
    updateSvgTransform();
}

function resetView() {
    currentScale = 1;
    currentPanX = 0;
    currentPanY = 0;
    console.log('Reset view');
    updateSvgTransform();
}

function updateSvgTransform() {
    const svg = document.querySelector('#mermaid-modal-diagram svg');
    if (svg) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SVG –∏–º–µ–µ—Ç –≤–∏–¥–∏–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        const rect = svg.getBoundingClientRect();
        if (rect.width === 0 || rect.height === 0) {
            console.log('SVG has zero dimensions, retrying in 100ms...');
            setTimeout(updateSvgTransform, 100);
            return;
        }
        
        const transform = `translate(${currentPanX}px, ${currentPanY}px) scale(${currentScale})`;
        svg.style.transform = transform;
        svg.style.transformOrigin = 'center center';
        console.log('Applied transform:', transform);
        console.log('SVG rect:', rect);
    } else {
        console.log('No SVG found for transform');
        console.log('Available elements in modal:', document.querySelector('#mermaid-modal-diagram')?.innerHTML);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
function toggleMermaidTheme() {
    const button = document.querySelector('.mermaid-theme-toggle');
    const svg = document.querySelector('#mermaid-modal-diagram svg');
    
    console.log('Toggle theme clicked');
    console.log('Button text:', button.textContent);
    console.log('SVG found:', !!svg);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –Ω–∞–ª–∏—á–∏—é —Ñ–∏–ª—å—Ç—Ä–∞
    const currentFilter = svg ? svg.style.filter : '';
    const isDarkTheme = currentFilter.includes('invert');
    
    if (!isDarkTheme) {
        button.textContent = '‚òÄÔ∏è';
        if (svg) {
            svg.style.filter = 'invert(1) hue-rotate(180deg)';
            console.log('Applied dark theme filter');
        }
    } else {
        button.textContent = 'üåô';
        if (svg) {
            svg.style.filter = 'none';
            console.log('Removed theme filter');
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
function handleKeyDown(e) {
    switch(e.key) {
        case 'Escape':
            closeMermaidModal();
            break;
        case '+':
        case '=':
            zoomIn();
            break;
        case '-':
            zoomOut();
            break;
        case 'ArrowUp':
            panUp();
            break;
        case 'ArrowDown':
            panDown();
            break;
        case 'ArrowLeft':
            panLeft();
            break;
        case 'ArrowRight':
            panRight();
            break;
        case '0':
            resetView();
            break;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing Mermaid controls...');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã MkDocs –∏ –ø–ª–∞–≥–∏–Ω mermaid2 –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
    setTimeout(() => {
        waitForMermaid();
    }, 2000);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', function() {
    console.log('Window loaded, trying to initialize Mermaid again...');
    setTimeout(() => {
        if (!mermaidInitialized) {
            waitForMermaid();
        }
    }, 1000);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let observer = null;

function setupObserver() {
    if (observer) {
        observer.disconnect();
    }
    
    observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                const diagrams = document.querySelectorAll('.mermaid:not([data-controls-added])');
                if (diagrams.length > 0) {
                    diagrams.forEach(diagram => {
                        diagram.setAttribute('data-controls-added', 'true');
                        addFullscreenButton(diagram);
                        diagram.addEventListener('click', function(e) {
                            if (e.target.closest('.mermaid-fullscreen-btn')) return;
                            openMermaidFullscreen(this);
                        });
                    });
                }
            }
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º observer –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setTimeout(() => {
    setupObserver();
}, 3000);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
window.closeMermaidModal = closeMermaidModal;
window.toggleMermaidTheme = toggleMermaidTheme;
window.zoomIn = zoomIn;
window.zoomOut = zoomOut;
window.panUp = panUp;
window.panDown = panDown;
window.panLeft = panLeft;
window.panRight = panRight;
window.resetView = resetView;