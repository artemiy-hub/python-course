// Enhanced Mermaid configuration with advanced controls like marmaid.html
let mermaidInitialized = false;
let currentScale = 1;
let currentPanX = 0;
let currentPanY = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
function initializeMermaidControls() {
    if (mermaidInitialized) return;
    
    console.log('Initializing Mermaid controls...');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º
    processMermaidDiagrams();
    
    mermaidInitialized = true;
    console.log('Mermaid controls initialized successfully');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º
function processMermaidDiagrams() {
    const diagrams = document.querySelectorAll('.mermaid');
    console.log(`Found ${diagrams.length} mermaid diagrams`);
    
    diagrams.forEach((diagram, index) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        addFullscreenButton(diagram);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        diagram.addEventListener('click', function(e) {
            if (e.target.closest('.mermaid-fullscreen-btn')) return;
            openMermaidFullscreen(this);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
function addFullscreenButton(diagram) {
    if (diagram.querySelector('.mermaid-fullscreen-btn')) return;
    
    const button = document.createElement('button');
    button.className = 'mermaid-fullscreen-btn';
    button.innerHTML = 'ÔøΩÔøΩ';
    button.title = '–û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ';
    button.style.cssText = `
        position: absolute;
        top: 5px;
        right: 5px;
        background: rgba(52, 152, 219, 0.9);
        color: white;
        border: none;
        border-radius: 4px;
        width: 25px;
        height: 25px;
        font-size: 12px;
        cursor: pointer;
        z-index: 10;
        opacity: 0;
        transition: opacity 0.2s ease;
    `;
    
    diagram.style.position = 'relative';
    diagram.appendChild(button);
    
    diagram.addEventListener('mouseenter', () => {
        button.style.opacity = '1';
    });
    
    diagram.addEventListener('mouseleave', () => {
        button.style.opacity = '0';
    });
    
    button.addEventListener('click', (e) => {
        e.stopPropagation();
        openMermaidFullscreen(diagram);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
function openMermaidFullscreen(diagram) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'mermaid-modal-overlay active';
    modal.innerHTML = `
        <div class="mermaid-modal-content">
            <button class="mermaid-modal-close" onclick="closeMermaidModal()" title="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
            <button class="mermaid-theme-toggle" onclick="toggleMermaidTheme()" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">üåô</button>
            <div class="mermaid-modal-diagram-container">
                <div id="mermaid-modal-diagram"></div>
            </div>
            <div class="mermaid-controls">
                <button class="up" onclick="panUp()" title="–í–≤–µ—Ä—Ö">‚Üë</button>
                <button class="reset" onclick="resetView()" title="–°–±—Ä–æ—Å">‚ü≤</button>
                <button class="down" onclick="panDown()" title="–í–Ω–∏–∑">‚Üì</button>
                <button class="left" onclick="panLeft()" title="–í–ª–µ–≤–æ">‚Üê</button>
                <button class="zoom-in" onclick="zoomIn()" title="–£–≤–µ–ª–∏—á–∏—Ç—å">+</button>
                <button class="zoom-out" onclick="zoomOut()" title="–£–º–µ–Ω—å—à–∏—Ç—å">‚àí</button>
                <button class="right" onclick="panRight()" title="–í–ø—Ä–∞–≤–æ">‚Üí</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ö–æ–ø–∏—Ä—É–µ–º SVG –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalDiagram = document.getElementById('mermaid-modal-diagram');
    const originalSvg = diagram.querySelector('svg');
    
    if (originalSvg) {
        const clonedSvg = originalSvg.cloneNode(true);
        modalDiagram.appendChild(clonedSvg);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫ SVG
        applySvgStyles(clonedSvg);
    }
    
    // –°–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∞ –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
    resetView();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeMermaidModal();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
    document.addEventListener('keydown', handleKeyDown);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –∫ SVG
function applySvgStyles(svg) {
    svg.style.maxWidth = '100%';
    svg.style.maxHeight = '100%';
    svg.style.width = 'auto';
    svg.style.height = 'auto';
    svg.style.transform = 'scale(1)';
    svg.style.transformOrigin = 'center center';
    svg.style.objectFit = 'contain';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeMermaidModal() {
    const modal = document.querySelector('.mermaid-modal-overlay');
    if (modal) {
        modal.remove();
        document.removeEventListener('keydown', handleKeyDown);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function zoomIn() {
    currentScale = Math.min(currentScale * 1.2, 5);
    updateSvgTransform();
}

function zoomOut() {
    currentScale = Math.max(currentScale / 1.2, 0.1);
    updateSvgTransform();
}

function panUp() {
    currentPanY += 50;
    updateSvgTransform();
}

function panDown() {
    currentPanY -= 50;
    updateSvgTransform();
}

function panLeft() {
    currentPanX += 50;
    updateSvgTransform();
}

function panRight() {
    currentPanX -= 50;
    updateSvgTransform();
}

function resetView() {
    currentScale = 1;
    currentPanX = 0;
    currentPanY = 0;
    updateSvgTransform();
}

function updateSvgTransform() {
    const svg = document.querySelector('#mermaid-modal-diagram svg');
    if (svg) {
        svg.style.transform = `translate(${currentPanX}px, ${currentPanY}px) scale(${currentScale})`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
function toggleMermaidTheme() {
    const button = document.querySelector('.mermaid-theme-toggle');
    const svg = document.querySelector('#mermaid-modal-diagram svg');
    
    if (button.textContent === 'ÔøΩÔøΩ') {
        button.textContent = '‚òÄÔ∏è';
        if (svg) {
            svg.style.filter = 'invert(1) hue-rotate(180deg)';
        }
    } else {
        button.textContent = 'ÔøΩÔøΩ';
        if (svg) {
            svg.style.filter = 'none';
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
function handleKeyDown(e) {
    switch(e.key) {
        case 'Escape':
            closeMermaidModal();
            break;
        case '+':
        case '=':
            zoomIn();
            break;
        case '-':
            zoomOut();
            break;
        case 'ArrowUp':
            panUp();
            break;
        case 'ArrowDown':
            panDown();
            break;
        case 'ArrowLeft':
            panLeft();
            break;
        case 'ArrowRight':
            panRight();
            break;
        case '0':
            resetView();
            break;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing Mermaid controls...');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã MkDocs –æ–±—Ä–∞–±–æ—Ç–∞–ª –¥–∏–∞–≥—Ä–∞–º–º—ã
    setTimeout(() => {
        initializeMermaidControls();
    }, 1000);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let observer = null;

function setupObserver() {
    if (observer) {
        observer.disconnect();
    }
    
    observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                const diagrams = document.querySelectorAll('.mermaid:not([data-controls-added])');
                if (diagrams.length > 0) {
                    diagrams.forEach(diagram => {
                        diagram.setAttribute('data-controls-added', 'true');
                        addFullscreenButton(diagram);
                        diagram.addEventListener('click', function(e) {
                            if (e.target.closest('.mermaid-fullscreen-btn')) return;
                            openMermaidFullscreen(this);
                        });
                    });
                }
            }
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º observer –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setTimeout(() => {
    setupObserver();
}, 1500);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
window.closeMermaidModal = closeMermaidModal;
window.toggleMermaidTheme = toggleMermaidTheme;
window.zoomIn = zoomIn;
window.zoomOut = zoomOut;
window.panUp = panUp;
window.panDown = panDown;
window.panLeft = panLeft;
window.panRight = panRight;
window.resetView = resetView;