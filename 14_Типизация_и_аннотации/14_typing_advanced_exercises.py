"""
–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
—Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ Python. –ö–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, —Ä–µ—à–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç—ã.
"""

from typing import (
    TypeVar, Generic, Protocol, Union, Optional, Any, Dict, List, Tuple,
    Callable, Iterator, Type, ClassVar, Final, Literal, TypeGuard,
    overload, runtime_checkable, get_type_hints
)
from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from datetime import datetime, timedelta
import json
import unittest

# =============================================================================
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –°–æ–∑–¥–∞–Ω–∏–µ Generic Repository —Å TypeVar
# =============================================================================

"""
–ó–ê–î–ê–ù–ò–ï 1: Generic Repository Pattern

–°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TypeVar –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
2. –û–±—ä–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø–æ–ª–µ 'id' (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bound TypeVar)
3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã: save, find_by_id, find_all, delete
4. –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ filter —Å –ø—Ä–µ–¥–∏–∫–∞—Ç–æ–º
"""

# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å:
T = TypeVar('T', bound=object)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π bound

class Identifiable(Protocol):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å ID"""
    id: Optional[int]

IdentifiableT = TypeVar('IdentifiableT', bound=Identifiable)

class Repository(Generic[IdentifiableT]):
    """–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    
    def __init__(self) -> None:
        self._items: List[IdentifiableT] = []
        self._next_id = 1
    
    def save(self, item: IdentifiableT) -> IdentifiableT:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç ID, –ø—Ä–∏—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–π
        """
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥
        pass
    
    def find_by_id(self, item_id: int) -> Optional[IdentifiableT]:
        """–ù–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç –ø–æ ID"""
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥
        pass
    
    def find_all(self) -> List[IdentifiableT]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã"""
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥
        pass
    
    def delete(self, item_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –ø–æ ID"""
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥
        pass
    
    def filter(self, predicate: Callable[[IdentifiableT], bool]) -> List[IdentifiableT]:
        """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø–æ –ø—Ä–µ–¥–∏–∫–∞—Ç—É"""
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥
        pass

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
@dataclass
class User:
    name: str
    email: str
    id: Optional[int] = None

@dataclass 
class Product:
    title: str
    price: float
    id: Optional[int] = None

# –†–µ—à–µ–Ω–∏–µ:
class RepositorySolution(Generic[IdentifiableT]):
    """–†–µ—à–µ–Ω–∏–µ: –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    
    def __init__(self) -> None:
        self._items: List[IdentifiableT] = []
        self._next_id = 1
    
    def save(self, item: IdentifiableT) -> IdentifiableT:
        if item.id is None:
            item.id = self._next_id
            self._next_id += 1
            self._items.append(item)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            for i, existing in enumerate(self._items):
                if existing.id == item.id:
                    self._items[i] = item
                    break
            else:
                self._items.append(item)
        return item
    
    def find_by_id(self, item_id: int) -> Optional[IdentifiableT]:
        for item in self._items:
            if item.id == item_id:
                return item
        return None
    
    def find_all(self) -> List[IdentifiableT]:
        return self._items.copy()
    
    def delete(self, item_id: int) -> bool:
        for i, item in enumerate(self._items):
            if item.id == item_id:
                del self._items[i]
                return True
        return False
    
    def filter(self, predicate: Callable[[IdentifiableT], bool]) -> List[IdentifiableT]:
        return [item for item in self._items if predicate(item)]

# =============================================================================
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2: Protocol –∏ structural typing
# =============================================================================

"""
–ó–ê–î–ê–ù–ò–ï 2: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏

–°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Notifiable —Å –º–µ—Ç–æ–¥–æ–º send_notification
2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Formattable —Å –º–µ—Ç–æ–¥–æ–º format_message
3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å—ã: EmailNotifier, SMSNotifier, PushNotifier
4. –°–æ–∑–¥–∞–π—Ç–µ NotificationService, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ Notifiable –æ–±—ä–µ–∫—Ç–∞–º–∏
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @runtime_checkable –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ isinstance
"""

# –í–∞—à–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∑–¥–µ—Å—å:
@runtime_checkable
class Notifiable(Protocol):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–µ—Ç–æ–¥ send_notification
    pass

@runtime_checkable
class Formattable(Protocol):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–µ—Ç–æ–¥ format_message
    pass

# –í–∞—à–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å:
class EmailNotifier:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ email"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å
    pass

class SMSNotifier:
    """SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å
    pass

class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å
    pass

# –†–µ—à–µ–Ω–∏–µ:
@runtime_checkable
class NotifiableSolution(Protocol):
    def send_notification(self, recipient: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é"""
        ...

@runtime_checkable
class FormattableSolution(Protocol):
    def format_message(self, template: str, **kwargs: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É"""
        ...

class EmailNotifierSolution:
    def send_notification(self, recipient: str, message: str) -> bool:
        print(f"üìß Email to {recipient}: {message}")
        return True
    
    def format_message(self, template: str, **kwargs: Any) -> str:
        return f"[EMAIL] {template.format(**kwargs)}"

class SMSNotifierSolution:
    def send_notification(self, recipient: str, message: str) -> bool:
        if len(message) > 160:
            print(f"üì± SMS to {recipient}: {message[:157]}...")
        else:
            print(f"üì± SMS to {recipient}: {message}")
        return True
    
    def format_message(self, template: str, **kwargs: Any) -> str:
        formatted = template.format(**kwargs)
        return formatted[:160]  # SMS limit

class NotificationServiceSolution:
    def __init__(self) -> None:
        self.notifiers: List[NotifiableSolution] = []
    
    def add_notifier(self, notifier: NotifiableSolution) -> None:
        if isinstance(notifier, NotifiableSolution):
            self.notifiers.append(notifier)
        else:
            raise TypeError("Notifier must implement Notifiable protocol")
    
    def send_to_all(self, recipient: str, message: str) -> List[bool]:
        results = []
        for notifier in self.notifiers:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if isinstance(notifier, FormattableSolution):
                formatted_message = notifier.format_message(message, recipient=recipient)
            else:
                formatted_message = message
            
            result = notifier.send_notification(recipient, formatted_message)
            results.append(result)
        return results

# =============================================================================
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3: Type Guards –∏ —É—Å–ª–æ–≤–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
# =============================================================================

"""
–ó–ê–î–ê–ù–ò–ï 3: –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Type Guards

–°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TypeGuard.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°–æ–∑–¥–∞–π—Ç–µ type guards –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é validate_user_data —Å overload
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Union —Ç–∏–ø—ã –∏ —É—Å–ª–æ–≤–Ω—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é
4. –î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è email, phone, age
"""

# –í–∞—à–∏ type guards –∑–¥–µ—Å—å:
def is_valid_email(value: Any) -> TypeGuard[str]:
    """Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É email
    pass

def is_valid_phone(value: Any) -> TypeGuard[str]:
    """Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    pass

def is_valid_age(value: Any) -> TypeGuard[int]:
    """Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–∑—Ä–∞—Å—Ç–∞
    pass

# –í–∞—à–∏ overload —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å:
UserData = Union[str, int, Dict[str, Any]]

@overload
def validate_user_data(data: str, field_type: Literal["email"]) -> str: ...

@overload
def validate_user_data(data: str, field_type: Literal["phone"]) -> str: ...

@overload
def validate_user_data(data: int, field_type: Literal["age"]) -> int: ...

def validate_user_data(data: UserData, field_type: str) -> Any:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é
    pass

# –†–µ—à–µ–Ω–∏–µ:
import re

def is_valid_email_solution(value: Any) -> TypeGuard[str]:
    if not isinstance(value, str):
        return False
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, value))

def is_valid_phone_solution(value: Any) -> TypeGuard[str]:
    if not isinstance(value, str):
        return False
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    pattern = r'^(\+7|8)?[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}$'
    return bool(re.match(pattern, value.replace(' ', '').replace('-', '')))

def is_valid_age_solution(value: Any) -> TypeGuard[int]:
    return isinstance(value, int) and 0 <= value <= 150

def validate_user_data_solution(data: UserData, field_type: str) -> Any:
    if field_type == "email":
        if is_valid_email_solution(data):
            return data.lower().strip()
        raise ValueError(f"Invalid email: {data}")
    
    elif field_type == "phone":
        if is_valid_phone_solution(data):
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
            normalized = re.sub(r'[\s\-\(\)]', '', str(data))
            if normalized.startswith('8'):
                normalized = '+7' + normalized[1:]
            elif not normalized.startswith('+7'):
                normalized = '+7' + normalized
            return normalized
        raise ValueError(f"Invalid phone: {data}")
    
    elif field_type == "age":
        if is_valid_age_solution(data):
            return data
        raise ValueError(f"Invalid age: {data}")
    
    else:
        raise ValueError(f"Unknown field type: {field_type}")

# =============================================================================
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ Generic —Ç–∏–ø—ã
# =============================================================================

"""
–ó–ê–î–ê–ù–ò–ï 4: –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ Generic

–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Generic —Ç–∏–ø–æ–≤.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°–æ–∑–¥–∞–π—Ç–µ Generic –∫–ª–∞—Å—Å Cache —Å –∫–ª—é—á–æ–º K –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º V
2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏—è (LRU, FIFO, LFU)
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Protocol –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
4. –î–æ–±–∞–≤—å—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
"""

K = TypeVar('K')
V = TypeVar('V')

class EvictionStrategy(Protocol[K]):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏—è"""
    # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    pass

class Cache(Generic[K, V]):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—ç—à —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self, max_size: int, strategy: EvictionStrategy[K]) -> None:
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        pass
    
    def get(self, key: K) -> Optional[V]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É"""
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥
        pass
    
    def put(self, key: K, value: V) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º"""
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥
        pass
    
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥
        pass

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏—è:
class LRUStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è Least Recently Used"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    pass

class FIFOStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è First In, First Out"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    pass

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
def cached(max_size: int = 128):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
    pass

# –†–µ—à–µ–Ω–∏–µ:
from collections import OrderedDict
from typing import DefaultDict
from collections import defaultdict

class EvictionStrategySolution(Protocol[K]):
    def on_access(self, key: K) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–ª—é—á—É"""
        ...
    
    def on_insert(self, key: K) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞"""
        ...
    
    def get_victim(self) -> Optional[K]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        ...
    
    def on_remove(self, key: K) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞"""
        ...

class LRUStrategySolution:
    def __init__(self) -> None:
        self._access_order: OrderedDict[K, None] = OrderedDict()
    
    def on_access(self, key: K) -> None:
        if key in self._access_order:
            del self._access_order[key]
        self._access_order[key] = None
    
    def on_insert(self, key: K) -> None:
        self._access_order[key] = None
    
    def get_victim(self) -> Optional[K]:
        return next(iter(self._access_order)) if self._access_order else None
    
    def on_remove(self, key: K) -> None:
        self._access_order.pop(key, None)

class FIFOStrategySolution:
    def __init__(self) -> None:
        self._insertion_order: List[K] = []
    
    def on_access(self, key: K) -> None:
        pass  # FIFO –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–∞
    
    def on_insert(self, key: K) -> None:
        self._insertion_order.append(key)
    
    def get_victim(self) -> Optional[K]:
        return self._insertion_order[0] if self._insertion_order else None
    
    def on_remove(self, key: K) -> None:
        if key in self._insertion_order:
            self._insertion_order.remove(key)

class CacheSolution(Generic[K, V]):
    def __init__(self, max_size: int, strategy: EvictionStrategySolution[K]) -> None:
        self._max_size = max_size
        self._strategy = strategy
        self._data: Dict[K, V] = {}
    
    def get(self, key: K) -> Optional[V]:
        if key in self._data:
            self._strategy.on_access(key)
            return self._data[key]
        return None
    
    def put(self, key: K, value: V) -> None:
        if key in self._data:
            self._data[key] = value
            self._strategy.on_access(key)
        else:
            if len(self._data) >= self._max_size:
                victim = self._strategy.get_victim()
                if victim is not None:
                    del self._data[victim]
                    self._strategy.on_remove(victim)
            
            self._data[key] = value
            self._strategy.on_insert(key)
    
    def clear(self) -> None:
        self._data.clear()
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        if hasattr(self._strategy, '_access_order'):
            self._strategy._access_order.clear()
        if hasattr(self._strategy, '_insertion_order'):
            self._strategy._insertion_order.clear()

def cached_solution(max_size: int = 128):
    def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
        cache: CacheSolution[Tuple[Any, ...], Any] = CacheSolution(
            max_size, LRUStrategySolution()
        )
        
        def wrapper(*args: Any, **kwargs: Any) -> Any:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            key = (args, tuple(sorted(kwargs.items())))
            
            result = cache.get(key)
            if result is not None:
                return result
            
            result = func(*args, **kwargs)
            cache.put(key, result)
            return result
        
        wrapper.cache_clear = cache.clear
        wrapper.cache = cache
        return wrapper
    
    return decorator

# =============================================================================
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Pydantic (–±–æ–Ω—É—Å–Ω–æ–µ)
# =============================================================================

"""
–ó–ê–î–ê–ù–ò–ï 5: API –º–æ–¥–µ–ª—å —Å Pydantic –∏ —Ç–∏–ø–∞–º–∏

–°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API, –∏—Å–ø–æ–ª—å–∑—É—è Pydantic –º–æ–¥–µ–ª–∏ –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏—é.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°–æ–∑–¥–∞–π—Ç–µ Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è User, Address, Company
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
3. –°–æ–∑–¥–∞–π—Ç–µ Generic –∫–ª–∞—Å—Å APIResponse[T]
4. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç
"""

try:
    from pydantic import BaseModel, Field, validator, ValidationError
    
    # –í–∞—à–∏ Pydantic –º–æ–¥–µ–ª–∏ –∑–¥–µ—Å—å:
    class Address(BaseModel):
        # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞
        pass
    
    class User(BaseModel):
        # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pass
    
    class Company(BaseModel):
        # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        pass
    
    # Generic API Response:
    ResponseData = TypeVar('ResponseData', bound=BaseModel)
    
    class APIResponse(BaseModel, Generic[ResponseData]):
        # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API
        pass
    
    class APIClient:
        """–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç"""
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç
        pass
    
    # –†–µ—à–µ–Ω–∏–µ:
    class AddressSolution(BaseModel):
        street: str = Field(..., min_length=1, max_length=200)
        city: str = Field(..., min_length=1, max_length=100)
        state: Optional[str] = Field(None, max_length=50)
        zip_code: str = Field(..., regex=r'^\d{5}(-\d{4})?$')
        country: str = Field(default="US", max_length=2)
        
        @validator('country')
        def country_must_be_uppercase(cls, v):
            return v.upper()
    
    class UserSolution(BaseModel):
        id: Optional[int] = None
        name: str = Field(..., min_length=1, max_length=100)
        email: str = Field(..., regex=r'^[^@]+@[^@]+\.[^@]+$')
        age: Optional[int] = Field(None, ge=0, le=150)
        address: Optional[AddressSolution] = None
        is_active: bool = True
        
        @validator('email')
        def email_must_be_lowercase(cls, v):
            return v.lower()
        
        @validator('name')
        def name_must_be_title_case(cls, v):
            return v.strip().title()
    
    class CompanySolution(BaseModel):
        id: Optional[int] = None
        name: str = Field(..., min_length=1, max_length=200)
        description: Optional[str] = Field(None, max_length=1000)
        employees: List[UserSolution] = Field(default_factory=list)
        headquarters: Optional[AddressSolution] = None
        founded_year: Optional[int] = Field(None, ge=1800, le=2024)
        
        @validator('employees')
        def validate_employees(cls, v):
            if len(v) > 10000:
                raise ValueError('Too many employees')
            return v
    
    class APIResponseSolution(BaseModel, Generic[ResponseData]):
        success: bool
        data: Optional[ResponseData] = None
        error: Optional[str] = None
        timestamp: datetime = Field(default_factory=datetime.now)
        
        @validator('data', 'error')
        def validate_data_error_exclusivity(cls, v, values):
            success = values.get('success', False)
            if success and v is None and 'data' in values:
                raise ValueError('Success response must have data')
            elif not success and v is None and 'error' in values:
                raise ValueError('Error response must have error message')
            return v
    
    class APIClientSolution:
        def __init__(self, base_url: str):
            self.base_url = base_url
        
        def get_user(self, user_id: int) -> APIResponseSolution[UserSolution]:
            # –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞
            try:
                user_data = {
                    "id": user_id,
                    "name": "john doe",
                    "email": "JOHN@EXAMPLE.COM",
                    "age": 30,
                    "address": {
                        "street": "123 Main St",
                        "city": "Anytown",
                        "zip_code": "12345",
                        "country": "us"
                    }
                }
                user = UserSolution(**user_data)
                return APIResponseSolution[UserSolution](success=True, data=user)
            except ValidationError as e:
                return APIResponseSolution[UserSolution](success=False, error=str(e))
        
        def create_user(self, user_data: Dict[str, Any]) -> APIResponseSolution[UserSolution]:
            try:
                user = UserSolution(**user_data)
                user.id = 123  # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è ID
                return APIResponseSolution[UserSolution](success=True, data=user)
            except ValidationError as e:
                return APIResponseSolution[UserSolution](success=False, error=str(e))

except ImportError:
    print("Pydantic not installed. Skipping Pydantic exercises.")

# =============================================================================
# –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏–π
# =============================================================================

class TestAdvancedTyping(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏"""
    
    def test_repository(self):
        """–¢–µ—Å—Ç Generic Repository"""
        repo = RepositorySolution[User]()
        
        user = User("Alice", "alice@example.com")
        saved_user = repo.save(user)
        
        self.assertIsNotNone(saved_user.id)
        self.assertEqual(saved_user.name, "Alice")
        
        found_user = repo.find_by_id(saved_user.id)
        self.assertEqual(found_user, saved_user)
        
        all_users = repo.find_all()
        self.assertEqual(len(all_users), 1)
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        repo.save(User("Bob", "bob@example.com"))
        alice_users = repo.filter(lambda u: u.name == "Alice")
        self.assertEqual(len(alice_users), 1)
        self.assertEqual(alice_users[0].name, "Alice")
    
    def test_notification_protocols(self):
        """–¢–µ—Å—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        service = NotificationServiceSolution()
        
        email_notifier = EmailNotifierSolution()
        sms_notifier = SMSNotifierSolution()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
        self.assertIsInstance(email_notifier, NotifiableSolution)
        self.assertIsInstance(sms_notifier, NotifiableSolution)
        
        service.add_notifier(email_notifier)
        service.add_notifier(sms_notifier)
        
        results = service.send_to_all("user@example.com", "Test message")
        self.assertEqual(len(results), 2)
        self.assertTrue(all(results))
    
    def test_type_guards(self):
        """–¢–µ—Å—Ç Type Guards"""
        # –¢–µ—Å—Ç email
        self.assertTrue(is_valid_email_solution("test@example.com"))
        self.assertFalse(is_valid_email_solution("invalid-email"))
        
        # –¢–µ—Å—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        self.assertTrue(is_valid_phone_solution("+7 495 123-45-67"))
        self.assertTrue(is_valid_phone_solution("8(495)1234567"))
        self.assertFalse(is_valid_phone_solution("123"))
        
        # –¢–µ—Å—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
        self.assertTrue(is_valid_age_solution(25))
        self.assertFalse(is_valid_age_solution(-5))
        self.assertFalse(is_valid_age_solution(200))
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        email = validate_user_data_solution("TEST@EXAMPLE.COM", "email")
        self.assertEqual(email, "test@example.com")
        
        phone = validate_user_data_solution("8-495-123-45-67", "phone")
        self.assertTrue(phone.startswith("+7"))
    
    def test_cache(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        lru_strategy = LRUStrategySolution[str]()
        cache = CacheSolution[str, int](max_size=2, strategy=lru_strategy)
        
        cache.put("a", 1)
        cache.put("b", 2)
        
        self.assertEqual(cache.get("a"), 1)
        self.assertEqual(cache.get("b"), 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç - –¥–æ–ª–∂–µ–Ω –≤—ã—Ç–µ—Å–Ω–∏—Ç—å –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
        cache.put("c", 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        self.assertIsNotNone(cache.get("a"))  # –ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
        self.assertIsNotNone(cache.get("c"))  # –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    
    @unittest.skipIf('pydantic' not in globals(), "Pydantic not available")
    def test_pydantic_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Pydantic"""
        try:
            client = APIClientSolution("https://api.example.com")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = client.get_user(1)
            self.assertTrue(response.success)
            self.assertIsNotNone(response.data)
            self.assertEqual(response.data.name, "John Doe")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å title case
            self.assertEqual(response.data.email, "john@example.com")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å lowercase
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                "name": "jane doe",
                "email": "JANE@EXAMPLE.COM",
                "age": 25
            }
            
            response = client.create_user(user_data)
            self.assertTrue(response.success)
            self.assertIsNotNone(response.data)
            self.assertEqual(response.data.name, "Jane Doe")
            
        except ImportError:
            self.skipTest("Pydantic not installed")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    unittest.main(verbosity=2, exit=False)

if __name__ == "__main__":
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è ===\n")
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏–π...\n")
    run_tests() 