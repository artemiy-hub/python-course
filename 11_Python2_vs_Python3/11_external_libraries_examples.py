#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã: –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:
- NumPy –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
- Pandas –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- Requests –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
- Flask –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- Matplotlib –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import sys
import subprocess
import importlib

def check_and_install_package(package_name, import_name=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    if import_name is None:
        import_name = package_name
    
    try:
        importlib.import_module(import_name)
        return True
    except ImportError:
        print(f"–ü–∞–∫–µ—Ç {package_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package_name])
            print(f"–ü–∞–∫–µ—Ç {package_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except subprocess.CalledProcessError:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package_name}")
            return False

def example_01_numpy_basics():
    """–ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤—ã NumPy"""
    
    if not check_and_install_package('numpy'):
        print("NumPy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä")
        return
    
    import numpy as np
    
    print("=== –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤—ã NumPy ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    arr1 = np.array([1, 2, 3, 4, 5])
    arr2 = np.zeros((3, 3))
    arr3 = np.random.randint(1, 10, (2, 4))
    
    print(f"–û–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤: {arr1}")
    print(f"–ú–∞—Ç—Ä–∏—Ü–∞ –Ω—É–ª–µ–π:\n{arr2}")
    print(f"–°–ª—É—á–∞–π–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:\n{arr3}")
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    squared = arr1 ** 2
    mean_val = np.mean(arr3)
    
    print(f"–ö–≤–∞–¥—Ä–∞—Ç—ã: {squared}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {mean_val:.2f}")
    
    # –õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞
    matrix_a = np.random.rand(3, 3)
    matrix_b = np.random.rand(3, 3)
    product = np.dot(matrix_a, matrix_b)
    
    print(f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü shape: {product.shape}")
    print("‚úÖ NumPy –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")

def example_02_pandas_dataframes():
    """–ü—Ä–∏–º–µ—Ä 2: Pandas DataFrames"""
    
    if not check_and_install_package('pandas'):
        print("Pandas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä")
        return
    
    import pandas as pd
    import numpy as np
    
    print("=== –ü—Ä–∏–º–µ—Ä 2: Pandas DataFrames ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    data = {
        'name': ['–ê–ª–∏—Å–∞', '–ë–æ–±', '–ß–∞—Ä–ª–∏', '–î–∏–∞–Ω–∞'],
        'age': [25, 30, 35, 28],
        'salary': [95000, 105000, 85000, 98000],
        'department': ['IT', 'HR', 'IT', 'Finance']
    }
    
    df = pd.DataFrame(data)
    print("DataFrame:")
    print(df)
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    print(f"\n–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {df['salary'].mean():,.0f}")
    print(f"IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n{df[df['department'] == 'IT']}")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    dept_stats = df.groupby('department')['salary'].agg(['mean', 'count'])
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º:\n{dept_stats}")
    
    print("‚úÖ Pandas –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")

def example_03_requests_http():
    """–ü—Ä–∏–º–µ—Ä 3: HTTP –∑–∞–ø—Ä–æ—Å—ã —Å Requests"""
    
    if not check_and_install_package('requests'):
        print("Requests –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä")
        return
    
    import requests
    
    print("=== –ü—Ä–∏–º–µ—Ä 3: HTTP –∑–∞–ø—Ä–æ—Å—ã —Å Requests ===")
    
    try:
        # GET –∑–∞–ø—Ä–æ—Å
        response = requests.get('https://httpbin.org/get', timeout=5)
        print(f"GET —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"URL: {data.get('url')}")
        
        # POST –∑–∞–ø—Ä–æ—Å
        post_data = {'name': 'Python', 'version': '3.12'}
        response = requests.post('https://httpbin.org/post', 
                               json=post_data, timeout=5)
        
        if response.status_code == 200:
            result = response.json()
            print(f"POST –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {result.get('json')}")
        
        print("‚úÖ Requests –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")

def example_04_matplotlib_plotting():
    """–ü—Ä–∏–º–µ—Ä 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å Matplotlib"""
    
    if not check_and_install_package('matplotlib'):
        print("Matplotlib –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä")
        return
    
    import matplotlib.pyplot as plt
    import numpy as np
    
    print("=== –ü—Ä–∏–º–µ—Ä 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å Matplotlib ===")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    x = np.linspace(0, 10, 100)
    y1 = np.sin(x)
    y2 = np.cos(x)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10, 6))
    
    plt.subplot(1, 2, 1)
    plt.plot(x, y1, label='sin(x)', linewidth=2)
    plt.plot(x, y2, label='cos(x)', linewidth=2)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
    plt.subplot(1, 2, 2)
    data = np.random.normal(100, 15, 1000)
    plt.hist(data, bins=30, alpha=0.7, color='skyblue')
    plt.xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.title('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞')
    plt.axvline(np.mean(data), color='red', linestyle='--')
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞
    plt.savefig('matplotlib_example.png', dpi=150, bbox_inches='tight')
    plt.close()
    
    print("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ matplotlib_example.png")
    print("‚úÖ Matplotlib –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")

def example_05_flask_webapp():
    """–ü—Ä–∏–º–µ—Ä 5: –ü—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask"""
    
    if not check_and_install_package('flask', 'flask'):
        print("Flask –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä")
        return
    
    from flask import Flask, jsonify
    
    print("=== –ü—Ä–∏–º–µ—Ä 5: –ü—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Flask(__name__)
    
    # –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    users = [
        {'id': 1, 'name': '–ê–ª–∏—Å–∞', 'email': 'alice@example.com'},
        {'id': 2, 'name': '–ë–æ–±', 'email': 'bob@example.com'}
    ]
    
    @app.route('/')
    def index():
        return jsonify({
            'message': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flask API',
            'endpoints': ['/users', '/users/<id>']
        })
    
    @app.route('/users')
    def get_users():
        return jsonify({'users': users, 'total': len(users)})
    
    @app.route('/users/<int:user_id>')
    def get_user(user_id):
        user = next((u for u in users if u['id'] == user_id), None)
        if user:
            return jsonify(user)
        return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    
    print("Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:")
    for rule in app.url_map.iter_rules():
        print(f"  {rule.rule} [{', '.join(rule.methods - {'HEAD', 'OPTIONS'})}]")
    
    print("–î–ª—è –∑–∞–ø—É—Å–∫–∞: app.run(debug=True)")
    print("‚úÖ Flask –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    return app

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    
    examples = [
        ("NumPy - –Ω–∞—É—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", example_01_numpy_basics),
        ("Pandas - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", example_02_pandas_dataframes),
        ("Requests - HTTP –∑–∞–ø—Ä–æ—Å—ã", example_03_requests_http),
        ("Matplotlib - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", example_04_matplotlib_plotting),
        ("Flask - –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", example_05_flask_webapp),
    ]
    
    print("üì¶ –ü—Ä–∏–º–µ—Ä—ã: –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ Python")
    print("=" * 60)
    print("–≠—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç:")
    print("- –†–∞–±–æ—Ç—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≤–Ω–µ—à–Ω–∏–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏")
    print("- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫")
    print("=" * 60)
    
    for i, (name, func) in enumerate(examples, 1):
        print(f"\n{i}. {name}")
        print("-" * (len(name) + 3))
        try:
            func()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
        
        if i < len(examples):
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    main() 