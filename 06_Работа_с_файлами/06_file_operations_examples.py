#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:
- –û—Å–Ω–æ–≤ —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤
- –†–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
- –†–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏
- –û–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
- –†–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import json
import csv
import xml.etree.ElementTree as ET
import zipfile
import tarfile
import tempfile
import shutil
from pathlib import Path
from datetime import datetime
import time
import mmap


def example_01_basic_file_operations():
    """
    –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤,
    —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_content = """–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!
–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
–°—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä —Ç—Ä–∏.
–ò –µ—â–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º: 42"""
    
    filename = "test_file.txt"
    
    print("1. –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞:")
    
    # –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ (—Ä–µ–∂–∏–º 'w' - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(test_content)
    print(f"–§–∞–π–ª '{filename}' —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —Ñ–∞–π–ª—É (—Ä–µ–∂–∏–º 'a' - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
    with open(filename, 'a', encoding='utf-8') as f:
        f.write("\n–î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞")
    print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞")
    
    print("\n2. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:")
    
    # –°–ø–æ—Å–æ–± 1: read() - –≤–µ—Å—å —Ñ–∞–π–ª
    with open(filename, 'r', encoding='utf-8') as f:
        full_content = f.read()
        print("–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
        print(repr(full_content[:50]) + "..." if len(full_content) > 50 else repr(full_content))
    
    # –°–ø–æ—Å–æ–± 2: readlines() - –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    with open(filename, 'r', encoding='utf-8') as f:
        lines = f.readlines()
        print(f"\n–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        for i, line in enumerate(lines[:3], 1):
            print(f"–°—Ç—Ä–æ–∫–∞ {i}: {repr(line)}")
    
    # –°–ø–æ—Å–æ–± 3: readline() - –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    with open(filename, 'r', encoding='utf-8') as f:
        print("\n–ß—Ç–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ:")
        line_num = 1
        while True:
            line = f.readline()
            if not line:
                break
            print(f"–°—Ç—Ä–æ–∫–∞ {line_num}: {line.strip()}")
            line_num += 1
            if line_num > 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                print("...")
                break
    
    # –°–ø–æ—Å–æ–± 4: –∏—Ç–µ—Ä–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    print("\n–ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª—É (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±):")
    with open(filename, 'r', encoding='utf-8') as f:
        for i, line in enumerate(f, 1):
            print(f"–°—Ç—Ä–æ–∫–∞ {i}: {line.strip()}")
            if i >= 3:
                print("...")
                break
    
    print("\n3. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ:")
    
    with open(filename, 'r', encoding='utf-8') as f:
        print(f"–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {f.tell()}")
        
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
        chunk = f.read(10)
        print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {repr(chunk)}")
        print(f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {f.tell()}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
        f.seek(0)
        print(f"–ü–æ—Å–ª–µ seek(0): {f.tell()}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        f.seek(0, 2)  # 2 = –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {f.tell()} –±–∞–π—Ç")
    
    print("\n4. –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ñ–∞–π–ª–æ–≤:")
    
    binary_file = "test_binary.bin"
    
    # –ë–∏–Ω–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å
    with open(binary_file, 'wb') as f:
        binary_data = "–¢–µ—Å—Ç –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö".encode('utf-8')
        f.write(binary_data)
    
    # –ë–∏–Ω–∞—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
    with open(binary_file, 'rb') as f:
        binary_content = f.read()
        print(f"–ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {binary_content}")
        print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {binary_content.decode('utf-8')}")
    
    # –†–µ–∂–∏–º r+ (—á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å)
    with open(filename, 'r+', encoding='utf-8') as f:
        f.seek(0, 2)  # –í –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        f.write("\n–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ r+")
    
    print("–§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    # –û—á–∏—Å—Ç–∫–∞
    try:
        os.unlink(filename)
        os.unlink(binary_file)
        print("–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    except FileNotFoundError:
        pass


def example_02_encoding_handling():
    """
    –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏,
    –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏ ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    test_texts = {
        'utf-8': "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç Hello, world! „Åì„Çì„Å´„Å°„ÅØ",
        'cp1251': "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã",
        'ascii': "Hello, world! ASCII only"
    }
    
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏:")
    
    for encoding, text in test_texts.items():
        filename = f"test_{encoding.replace('-', '_')}.txt"
        try:
            with open(filename, 'w', encoding=encoding) as f:
                f.write(text)
            print(f"‚úì –§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}")
        except UnicodeEncodeError as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {encoding}: {e}")
    
    print("\n2. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏:")
    
    for encoding in test_texts.keys():
        filename = f"test_{encoding.replace('-', '_')}.txt"
        if os.path.exists(filename):
            try:
                with open(filename, 'r', encoding=encoding) as f:
                    content = f.read()
                print(f"‚úì {encoding}: {content}")
            except UnicodeDecodeError as e:
                print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {encoding}: {e}")
    
    print("\n3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ UTF-8
    utf8_file = "test_utf8_demo.txt"
    with open(utf8_file, 'w', encoding='utf-8') as f:
        f.write("–¢–µ—Å—Ç UTF-8: üêç Python")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ ASCII
    error_strategies = ['strict', 'ignore', 'replace', 'backslashreplace']
    
    for strategy in error_strategies:
        try:
            with open(utf8_file, 'r', encoding='ascii', errors=strategy) as f:
                content = f.read()
            print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy}': {repr(content)}")
        except UnicodeDecodeError as e:
            print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy}': –û–®–ò–ë–ö–ê - {e}")
    
    print("\n4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:")
    
    def simple_encoding_detection(filename):
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
        encodings_to_try = ['utf-8', 'cp1251', 'ascii', 'utf-16']
        
        for encoding in encodings_to_try:
            try:
                with open(filename, 'r', encoding=encoding) as f:
                    f.read()
                return encoding
            except UnicodeDecodeError:
                continue
        return None
    
    for encoding in ['utf_8', 'cp1251']:
        filename = f"test_{encoding}.txt"
        if os.path.exists(filename):
            detected = simple_encoding_detection(filename)
            print(f"–§–∞–π–ª {filename}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ {detected}")
    
    print("\n5. –†–∞–±–æ—Ç–∞ —Å BOM (Byte Order Mark):")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å BOM
    bom_file = "test_bom.txt"
    with open(bom_file, 'w', encoding='utf-8-sig') as f:  # -sig –¥–æ–±–∞–≤–ª—è–µ—Ç BOM
        f.write("–§–∞–π–ª —Å BOM")
    
    # –ß—Ç–µ–Ω–∏–µ –±–µ–∑ —É—á–µ—Ç–∞ BOM
    with open(bom_file, 'rb') as f:
        raw_data = f.read()
        print(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_data}")
    
    # –ß—Ç–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º BOM
    with open(bom_file, 'r', encoding='utf-8-sig') as f:
        content = f.read()
        print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {repr(content)}")
    
    # –û—á–∏—Å—Ç–∫–∞
    test_files = ['test_utf_8.txt', 'test_cp1251.txt', 'test_ascii.txt', 
                  utf8_file, bom_file]
    for filename in test_files:
        try:
            os.unlink(filename)
        except FileNotFoundError:
            pass
    
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def example_03_context_managers():
    """
    –ü—Ä–∏–º–µ—Ä 3: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 3: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã ===")
    
    print("1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:")
    
    filename = "context_test.txt"
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å with
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        print(f"–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {not f.closed}")
    
    print(f"–ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª –∑–∞–∫—Ä—ã—Ç: {f.closed}")
    
    print("\n2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    
    input_file = "input.txt"
    output_file = "output.txt"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    with open(input_file, 'w', encoding='utf-8') as f:
        f.write("—Å—Ç—Ä–æ–∫–∞ 1\n—Å—Ç—Ä–æ–∫–∞ 2\n—Å—Ç—Ä–æ–∫–∞ 3\n")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –¥–≤—É–º—è —Ñ–∞–π–ª–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    with open(input_file, 'r', encoding='utf-8') as infile, \
         open(output_file, 'w', encoding='utf-8') as outfile:
        
        for line_num, line in enumerate(infile, 1):
            outfile.write(f"{line_num}: {line}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(output_file, 'r', encoding='utf-8') as f:
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f.read())
    
    print("\n3. –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:")
    
    class FileManager:
        """–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ñ–∞–π–ª–æ–≤"""
        
        def __init__(self, filename, mode, encoding='utf-8'):
            self.filename = filename
            self.mode = mode
            self.encoding = encoding
            self.file = None
            self.start_time = None
        
        def __enter__(self):
            print(f"üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª: {self.filename}")
            self.start_time = time.time()
            self.file = open(self.filename, self.mode, encoding=self.encoding)
            return self.file
        
        def __exit__(self, exc_type, exc_val, exc_tb):
            if self.file:
                self.file.close()
            
            duration = time.time() - self.start_time
            print(f"üìÅ –§–∞–π–ª {self.filename} –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ {duration:.3f}s")
            
            if exc_type:
                print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exc_type.__name__}: {exc_val}")
                return False  # –ù–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            
            return True
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    test_file = "custom_manager_test.txt"
    
    with FileManager(test_file, 'w') as f:
        f.write("–¢–µ—Å—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n")
        f.write("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\n")
        time.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
    
    print("\n4. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫:")
    
    class SafeFileManager:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        def __init__(self, filename, mode, encoding='utf-8', backup=True):
            self.filename = filename
            self.mode = mode
            self.encoding = encoding
            self.backup = backup
            self.file = None
            self.backup_file = None
        
        def __enter__(self):
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
            if self.backup and 'w' in self.mode and os.path.exists(self.filename):
                self.backup_file = self.filename + '.backup'
                shutil.copy2(self.filename, self.backup_file)
                print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {self.backup_file}")
            
            try:
                self.file = open(self.filename, self.mode, encoding=self.encoding)
                return self.file
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {e}")
                raise
        
        def __exit__(self, exc_type, exc_val, exc_tb):
            if self.file:
                self.file.close()
            
            if exc_type:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º: {exc_val}")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                if self.backup_file and os.path.exists(self.backup_file):
                    shutil.move(self.backup_file, self.filename)
                    print(f"üîÑ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                
                return False
            else:
                # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                if self.backup_file and os.path.exists(self.backup_file):
                    os.unlink(self.backup_file)
                    print(f"üóëÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞")
                
                return True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    safe_test_file = "safe_test.txt"
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    with open(safe_test_file, 'w', encoding='utf-8') as f:
        f.write("–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n")
    
    # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    print("–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    with SafeFileManager(safe_test_file, 'w') as f:
        f.write("–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n")
        f.write("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(safe_test_file, 'r', encoding='utf-8') as f:
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {f.read().strip()}")
    
    print("\n5. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    
    class TempFileManager:
        """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        
        def __init__(self, suffix='.tmp', prefix='temp_', dir=None):
            self.suffix = suffix
            self.prefix = prefix
            self.dir = dir
            self.temp_file = None
            self.temp_path = None
        
        def __enter__(self):
            self.temp_file = tempfile.NamedTemporaryFile(
                mode='w+', 
                suffix=self.suffix,
                prefix=self.prefix,
                dir=self.dir,
                delete=False,
                encoding='utf-8'
            )
            self.temp_path = self.temp_file.name
            print(f"üîß –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self.temp_path}")
            return self.temp_file
        
        def __exit__(self, exc_type, exc_val, exc_tb):
            if self.temp_file:
                self.temp_file.close()
            
            if self.temp_path and os.path.exists(self.temp_path):
                os.unlink(self.temp_path)
                print(f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {self.temp_path}")
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    with TempFileManager(suffix='.txt', prefix='demo_') as temp_f:
        temp_f.write("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n")
        temp_f.write("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—Å—è\n")
        temp_f.seek(0)
        content = temp_f.read()
        print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {content.strip()}")
    
    # –û—á–∏—Å—Ç–∫–∞
    test_files = [filename, input_file, output_file, test_file, safe_test_file]
    for f in test_files:
        try:
            os.unlink(f)
        except FileNotFoundError:
            pass
    
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def example_04_path_operations():
    """
    –ü—Ä–∏–º–µ—Ä 4: –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏
    –∏—Å–ø–æ–ª—å–∑—É—è pathlib –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã os.path.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 4: –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏ ===")
    
    print("1. –û—Å–Ω–æ–≤—ã pathlib:")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ–π
    current_dir = Path('.')
    file_path = Path('documents') / 'projects' / 'python' / 'main.py'
    abs_path = Path.home() / 'documents' / 'file.txt'
    
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print(f"–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: {file_path}")
    print(f"–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {abs_path}")
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—É—Ç–∏
    demo_path = Path('/home/user/documents/project/main.py')
    print(f"\n–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—É—Ç–∏ {demo_path}:")
    print(f"  name: {demo_path.name}")
    print(f"  stem: {demo_path.stem}")
    print(f"  suffix: {demo_path.suffix}")
    print(f"  suffixes: {demo_path.suffixes}")
    print(f"  parent: {demo_path.parent}")
    print(f"  parents: {list(demo_path.parents)}")
    print(f"  parts: {demo_path.parts}")
    print(f"  anchor: {demo_path.anchor}")
    
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    test_dir = Path('test_directory_structure')
    sub_dirs = [
        test_dir / 'documents',
        test_dir / 'projects' / 'python',
        test_dir / 'projects' / 'web',
        test_dir / 'downloads',
        test_dir / 'temp'
    ]
    
    for directory in sub_dirs:
        directory.mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    test_files = [
        test_dir / 'documents' / 'readme.txt',
        test_dir / 'projects' / 'python' / 'main.py',
        test_dir / 'projects' / 'web' / 'index.html',
        test_dir / 'downloads' / 'file.zip',
        test_dir / 'temp' / 'cache.tmp'
    ]
    
    for file_path in test_files:
        file_path.write_text(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_path.name}", encoding='utf-8')
        print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file_path}")
    
    print("\n3. –û–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    
    # –ú–µ—Ç–æ–¥ 1: iterdir() - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ test_directory_structure:")
    for item in test_dir.iterdir():
        if item.is_dir():
            print(f"üìÅ {item.name}/")
        else:
            print(f"üìÑ {item.name}")
    
    # –ú–µ—Ç–æ–¥ 2: glob() - –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    print("\n–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ .py:")
    for py_file in test_dir.glob('**/*.py'):
        print(f"üêç {py_file}")
    
    # –ú–µ—Ç–æ–¥ 3: rglob() - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
    print("\n–í—Å–µ —Ñ–∞–π–ª—ã (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ):")
    for file_path in test_dir.rglob('*'):
        if file_path.is_file():
            size = file_path.stat().st_size
            print(f"üìÑ {file_path.relative_to(test_dir)} ({size} –±–∞–π—Ç)")
    
    print("\n4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö:")
    
    for file_path in test_files[:3]:
        if file_path.exists():
            stat = file_path.stat()
            print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {file_path.name}:")
            print(f"  –†–∞–∑–º–µ—Ä: {stat.st_size} –±–∞–π—Ç")
            print(f"  –ò–∑–º–µ–Ω–µ–Ω: {datetime.fromtimestamp(stat.st_mtime)}")
            print(f"  –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {oct(stat.st_mode)[-3:]}")
            print(f"  –≠—Ç–æ —Ñ–∞–π–ª: {file_path.is_file()}")
            print(f"  –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {file_path.is_dir()}")
    
    print("\n5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤:")
    
    def find_files_by_criteria(directory, **criteria):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        results = []
        
        for file_path in Path(directory).rglob('*'):
            if not file_path.is_file():
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            if 'extension' in criteria:
                if file_path.suffix.lower() != criteria['extension'].lower():
                    continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É
            if 'min_size' in criteria:
                if file_path.stat().st_size < criteria['min_size']:
                    continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏
            if 'name_contains' in criteria:
                if criteria['name_contains'].lower() not in file_path.name.lower():
                    continue
            
            results.append(file_path)
        
        return results
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    python_files = find_files_by_criteria(test_dir, extension='.py')
    print(f"Python —Ñ–∞–π–ª—ã: {[f.name for f in python_files]}")
    
    files_with_main = find_files_by_criteria(test_dir, name_contains='main')
    print(f"–§–∞–π–ª—ã —Å 'main' –≤ –∏–º–µ–Ω–∏: {[f.name for f in files_with_main]}")
    
    print("\n6. –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏:")
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    source_file = test_dir / 'documents' / 'readme.txt'
    backup_file = test_dir / 'documents' / 'readme_backup.txt'
    shutil.copy2(source_file, backup_file)
    print(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {source_file.name} -> {backup_file.name}")
    
    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    temp_file = test_dir / 'temp' / 'moved_file.txt'
    backup_file.replace(temp_file)
    print(f"üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª: {backup_file.name} -> {temp_file.name}")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    old_name = temp_file
    new_name = test_dir / 'temp' / 'renamed_file.txt'
    old_name.rename(new_name)
    print(f"‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Ñ–∞–π–ª: {old_name.name} -> {new_name.name}")
    
    print("\n7. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ pathlib –∏ os.path:")
    
    sample_path = "/home/user/documents/project/main.py"
    
    print("pathlib:")
    p = Path(sample_path)
    print(f"  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {p.parent}")
    print(f"  –ò–º—è —Ñ–∞–π–ª–∞: {p.name}")
    print(f"  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {p.suffix}")
    
    print("os.path:")
    print(f"  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.path.dirname(sample_path)}")
    print(f"  –ò–º—è —Ñ–∞–π–ª–∞: {os.path.basename(sample_path)}")
    print(f"  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {os.path.splitext(sample_path)[1]}")
    
    # –û—á–∏—Å—Ç–∫–∞
    shutil.rmtree(test_dir)
    print(f"\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —É–¥–∞–ª–µ–Ω–∞")


def example_05_file_formats():
    """
    –ü—Ä–∏–º–µ—Ä 5: –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —Ñ–∞–π–ª–æ–≤
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å CSV, JSON, XML –∏ –¥—Ä—É–≥–∏–º–∏
    –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —Ñ–∞–π–ª–æ–≤.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 5: –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —Ñ–∞–π–ª–æ–≤ ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = [
        {"name": "–ê–ª–∏—Å–∞", "age": 25, "city": "–ú–æ—Å–∫–≤–∞", "skills": ["Python", "SQL"]},
        {"name": "–ë–æ–±", "age": 30, "city": "–°–ü–±", "skills": ["JavaScript", "React"]},
        {"name": "–ß–∞—Ä–ª–∏", "age": 28, "city": "–ö–∞–∑–∞–Ω—å", "skills": ["Java", "Spring"]},
        {"name": "–î–∏–∞–Ω–∞", "age": 26, "city": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "skills": ["C#", ".NET"]}
    ]
    
    print("1. –†–∞–±–æ—Ç–∞ —Å CSV —Ñ–∞–π–ª–∞–º–∏:")
    
    csv_file = "employees.csv"
    
    # –ó–∞–ø–∏—Å—å CSV —Å –ø–æ–º–æ—â—å—é writer
    with open(csv_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–ì–æ—Ä–æ–¥', '–ù–∞–≤—ã–∫–∏'])
        
        # –î–∞–Ω–Ω—ã–µ
        for person in test_data:
            writer.writerow([
                person['name'], 
                person['age'], 
                person['city'],
                ', '.join(person['skills'])
            ])
    
    print(f"CSV —Ñ–∞–π–ª '{csv_file}' —Å–æ–∑–¥–∞–Ω")
    
    # –ß—Ç–µ–Ω–∏–µ CSV
    print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV —Ñ–∞–π–ª–∞:")
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.reader(f)
        for row_num, row in enumerate(reader):
            print(f"  –°—Ç—Ä–æ–∫–∞ {row_num}: {row}")
    
    # –†–∞–±–æ—Ç–∞ —Å CSV —á–µ—Ä–µ–∑ DictWriter/DictReader
    csv_dict_file = "employees_dict.csv"
    
    with open(csv_dict_file, 'w', newline='', encoding='utf-8') as f:
        fieldnames = ['name', 'age', 'city', 'skills']
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        
        writer.writeheader()
        for person in test_data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–≤—ã–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è CSV
            person_copy = person.copy()
            person_copy['skills'] = ', '.join(person['skills'])
            writer.writerow(person_copy)
    
    print("–ß—Ç–µ–Ω–∏–µ CSV –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–µ–π:")
    with open(csv_dict_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for person in reader:
            print(f"  {person['name']}, {person['age']} –ª–µ—Ç, {person['city']}")
    
    print("\n2. –†–∞–±–æ—Ç–∞ —Å JSON —Ñ–∞–π–ª–∞–º–∏:")
    
    json_file = "employees.json"
    
    # –ó–∞–ø–∏—Å—å JSON
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print(f"JSON —Ñ–∞–π–ª '{json_file}' —Å–æ–∑–¥–∞–Ω")
    
    # –ß—Ç–µ–Ω–∏–µ JSON
    with open(json_file, 'r', encoding='utf-8') as f:
        loaded_data = json.load(f)
    
    print("–î–∞–Ω–Ω—ã–µ –∏–∑ JSON:")
    for person in loaded_data:
        skills = ', '.join(person['skills'])
        print(f"  {person['name']}: {skills}")
    
    # JSON —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    json_formatted_file = "employees_formatted.json"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    json_data_with_meta = {
        "metadata": {
            "created": datetime.now().isoformat(),
            "version": "1.0",
            "total_records": len(test_data)
        },
        "employees": test_data
    }
    
    with open(json_formatted_file, 'w', encoding='utf-8') as f:
        json.dump(json_data_with_meta, f, 
                 ensure_ascii=False, 
                 indent=4, 
                 sort_keys=True)
    
    print(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
    
    print("\n3. –†–∞–±–æ—Ç–∞ —Å XML —Ñ–∞–π–ª–∞–º–∏:")
    
    xml_file = "employees.xml"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ XML
    root = ET.Element("employees")
    
    for person in test_data:
        employee = ET.SubElement(root, "employee", id=str(person['age']))
        
        name_elem = ET.SubElement(employee, "name")
        name_elem.text = person['name']
        
        age_elem = ET.SubElement(employee, "age")
        age_elem.text = str(person['age'])
        
        city_elem = ET.SubElement(employee, "city")
        city_elem.text = person['city']
        
        skills_elem = ET.SubElement(employee, "skills")
        for skill in person['skills']:
            skill_elem = ET.SubElement(skills_elem, "skill")
            skill_elem.text = skill
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ XML
    tree = ET.ElementTree(root)
    tree.write(xml_file, encoding='utf-8', xml_declaration=True)
    
    print(f"XML —Ñ–∞–π–ª '{xml_file}' —Å–æ–∑–¥–∞–Ω")
    
    # –ß—Ç–µ–Ω–∏–µ XML
    tree = ET.parse(xml_file)
    root = tree.getroot()
    
    print("–î–∞–Ω–Ω—ã–µ –∏–∑ XML:")
    for employee in root.findall('employee'):
        name = employee.find('name').text
        age = employee.find('age').text
        city = employee.find('city').text
        
        skills = []
        skills_elem = employee.find('skills')
        if skills_elem is not None:
            for skill in skills_elem.findall('skill'):
                skills.append(skill.text)
        
        print(f"  {name}, {age} –ª–µ—Ç, {city} - {', '.join(skills)}")
    
    print("\n4. –†–∞–±–æ—Ç–∞ —Å INI —Ñ–∞–π–ª–∞–º–∏:")
    
    import configparser
    
    ini_file = "config.ini"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ INI —Ñ–∞–π–ª–∞
    config = configparser.ConfigParser()
    
    config['DEFAULT'] = {
        'debug': 'false',
        'log_level': 'info'
    }
    
    config['database'] = {
        'host': 'localhost',
        'port': '5432',
        'name': 'myapp',
        'user': 'admin'
    }
    
    config['api'] = {
        'base_url': 'https://api.example.com',
        'timeout': '30',
        'retries': '3'
    }
    
    with open(ini_file, 'w') as f:
        config.write(f)
    
    print(f"INI —Ñ–∞–π–ª '{ini_file}' —Å–æ–∑–¥–∞–Ω")
    
    # –ß—Ç–µ–Ω–∏–µ INI —Ñ–∞–π–ª–∞
    config_read = configparser.ConfigParser()
    config_read.read(ini_file)
    
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ INI —Ñ–∞–π–ª–∞:")
    for section_name in config_read.sections():
        print(f"  [{section_name}]")
        for key, value in config_read.items(section_name):
            print(f"    {key} = {value}")
    
    print("\n5. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤:")
    
    class FileFormatHandler:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤"""
        
        @staticmethod
        def save_data(data, filename, format_type='auto'):
            """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
            if format_type == 'auto':
                format_type = Path(filename).suffix.lower()[1:]  # –±–µ–∑ —Ç–æ—á–∫–∏
            
            if format_type == 'json':
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
            
            elif format_type == 'csv':
                if isinstance(data, list) and len(data) > 0 and isinstance(data[0], dict):
                    with open(filename, 'w', newline='', encoding='utf-8') as f:
                        writer = csv.DictWriter(f, fieldnames=data[0].keys())
                        writer.writeheader()
                        writer.writerows(data)
                else:
                    raise ValueError("CSV —Ç—Ä–µ–±—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π")
            
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}")
        
        @staticmethod
        def load_data(filename, format_type='auto'):
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
            if format_type == 'auto':
                format_type = Path(filename).suffix.lower()[1:]
            
            if format_type == 'json':
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            
            elif format_type == 'csv':
                with open(filename, 'r', encoding='utf-8') as f:
                    reader = csv.DictReader(f)
                    return list(reader)
            
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = FileFormatHandler()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    handler.save_data(test_data, "test_data.json")
    handler.save_data(test_data, "test_data.csv")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    loaded_json = handler.load_data("test_data.json")
    loaded_csv = handler.load_data("test_data.csv")
    
    print("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:")
    print(f"  JSON: {len(loaded_json)} –∑–∞–ø–∏—Å–µ–π")
    print(f"  CSV: {len(loaded_csv)} –∑–∞–ø–∏—Å–µ–π")
    
    # –û—á–∏—Å—Ç–∫–∞
    test_files = [csv_file, csv_dict_file, json_file, json_formatted_file, 
                  xml_file, ini_file, "test_data.json", "test_data.csv"]
    for filename in test_files:
        try:
            os.unlink(filename)
        except FileNotFoundError:
            pass
    
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def example_06_archives_and_compression():
    """
    –ü—Ä–∏–º–µ—Ä 6: –†–∞–±–æ—Ç–∞ —Å –∞—Ä—Ö–∏–≤–∞–º–∏ –∏ —Å–∂–∞—Ç–∏–µ–º
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ZIP –∏ TAR –∞—Ä—Ö–∏–≤–æ–≤,
    —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ —Å–∂–∞—Ç–∏—è.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 6: –†–∞–±–æ—Ç–∞ —Å –∞—Ä—Ö–∏–≤–∞–º–∏ –∏ —Å–∂–∞—Ç–∏–µ–º ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    test_dir = Path('archive_test')
    test_dir.mkdir(exist_ok=True)
    
    test_files = {
        'readme.txt': '–≠—Ç–æ —Ñ–∞–π–ª readme —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞.\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∞–π–ª–∞.',
        'data.json': '{"users": [{"name": "Alice", "age": 25}], "version": "1.0"}',
        'config.ini': '[database]\nhost=localhost\nport=5432\n\n[app]\ndebug=true',
        'script.py': '#!/usr/bin/env python3\nprint("Hello, World!")\n',
        'subdir/nested.txt': '–§–∞–π–ª –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏'
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
    for filepath, content in test_files.items():
        full_path = test_dir / filepath
        full_path.parent.mkdir(parents=True, exist_ok=True)
        full_path.write_text(content, encoding='utf-8')
    
    print(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ {test_dir}")
    
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞:")
    
    zip_file = 'test_archive.zip'
    
    with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤
        for file_path in test_dir.rglob('*'):
            if file_path.is_file():
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∞—Ä—Ö–∏–≤–µ
                arcname = file_path.relative_to(test_dir)
                zipf.write(file_path, arcname)
                print(f"  üìÑ –î–æ–±–∞–≤–ª–µ–Ω: {arcname}")
    
    print(f"ZIP –∞—Ä—Ö–∏–≤ '{zip_file}' —Å–æ–∑–¥–∞–Ω")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ö–∏–≤–µ
    with zipfile.ZipFile(zip_file, 'r') as zipf:
        info = zipf.infolist()
        total_size = sum(f.file_size for f in info)
        compressed_size = sum(f.compress_size for f in info)
        compression_ratio = (1 - compressed_size / total_size) * 100
        
        print(f"–§–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {len(info)}")
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç")
        print(f"–°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {compressed_size} –±–∞–π—Ç")
        print(f"–°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è: {compression_ratio:.1f}%")
    
    print("\n2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞:")
    
    extract_dir = Path('extracted_zip')
    extract_dir.mkdir(exist_ok=True)
    
    with zipfile.ZipFile(zip_file, 'r') as zipf:
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ
        file_list = zipf.namelist()
        print("–§–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ:")
        for filename in file_list:
            print(f"  üìÑ {filename}")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        zipf.extractall(extract_dir)
        print(f"–§–∞–π–ª—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –≤ {extract_dir}")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if 'readme.txt' in file_list:
            zipf.extract('readme.txt', extract_dir / 'specific')
            print("–§–∞–π–ª readme.txt –∏–∑–≤–ª–µ—á–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ")
    
    print("\n3. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞ –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:")
    
    with zipfile.ZipFile(zip_file, 'r') as zipf:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø—Ä—è–º–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞
        if 'data.json' in zipf.namelist():
            with zipf.open('data.json') as f:
                content = f.read().decode('utf-8')
                print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ data.json –∏–∑ –∞—Ä—Ö–∏–≤–∞: {content}")
    
    print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ TAR –∞—Ä—Ö–∏–≤–∞:")
    
    tar_file = 'test_archive.tar.gz'
    
    with tarfile.open(tar_file, 'w:gz') as tar:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        tar.add(test_dir, arcname='test_data')
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {test_dir} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ TAR –∞—Ä—Ö–∏–≤")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TAR –∞—Ä—Ö–∏–≤–µ
    with tarfile.open(tar_file, 'r:gz') as tar:
        members = tar.getmembers()
        print(f"TAR –∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(members)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for member in members:
            type_char = 'd' if member.isdir() else 'f'
            print(f"  {type_char} {member.name} ({member.size} –±–∞–π—Ç)")
    
    print("\n5. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ TAR –∞—Ä—Ö–∏–≤–∞:")
    
    extract_tar_dir = Path('extracted_tar')
    extract_tar_dir.mkdir(exist_ok=True)
    
    with tarfile.open(tar_file, 'r:gz') as tar:
        tar.extractall(extract_tar_dir)
        print(f"TAR –∞—Ä—Ö–∏–≤ –∏–∑–≤–ª–µ—á–µ–Ω –≤ {extract_tar_dir}")
    
    print("\n6. –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–∂–∞—Ç–∏—è:")
    
    compression_types = [
        ('test_none.tar', 'w'),           # –ë–µ–∑ —Å–∂–∞—Ç–∏—è
        ('test_gzip.tar.gz', 'w:gz'),     # GZIP
        ('test_bzip2.tar.bz2', 'w:bz2'),  # BZIP2
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º LZMA –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        import lzma
        compression_types.append(('test_lzma.tar.xz', 'w:xz'))
    except ImportError:
        pass
    
    print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Å–∂–∞—Ç–∏—è:")
    
    for archive_name, mode in compression_types:
        try:
            with tarfile.open(archive_name, mode) as tar:
                tar.add(test_dir, arcname='data')
            
            size = os.path.getsize(archive_name)
            print(f"  {archive_name}: {size} –±–∞–π—Ç")
            
        except Exception as e:
            print(f"  {archive_name}: –û—à–∏–±–∫–∞ - {e}")
    
    print("\n7. –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π:")
    
    def create_filtered_archive(source_dir, archive_name, extensions=None):
        """–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        with zipfile.ZipFile(archive_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file_path in source_dir.rglob('*'):
                if not file_path.is_file():
                    continue
                
                if extensions and file_path.suffix.lower() not in extensions:
                    continue
                
                arcname = file_path.relative_to(source_dir)
                zipf.write(file_path, arcname)
                print(f"  ‚úì {arcname}")
    
    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    filtered_archive = 'text_files_only.zip'
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏:")
    create_filtered_archive(test_dir, filtered_archive, ['.txt', '.py', '.ini'])
    
    print("\n8. –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–∞–º–∏:")
    
    class ArchiveManager:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Ä—Ö–∏–≤–æ–≤"""
        
        @staticmethod
        def create_archive(source_path, archive_path, compression='auto'):
            """–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞"""
            source = Path(source_path)
            archive = Path(archive_path)
            
            if compression == 'auto':
                if archive.suffix.lower() == '.zip':
                    return ArchiveManager._create_zip(source, archive)
                elif archive.suffix.lower() in ['.tar', '.gz', '.bz2', '.xz']:
                    return ArchiveManager._create_tar(source, archive)
                else:
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—Ä—Ö–∏–≤–∞: {archive.suffix}")
        
        @staticmethod
        def _create_zip(source, archive):
            """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤"""
            with zipfile.ZipFile(archive, 'w', zipfile.ZIP_DEFLATED) as zipf:
                if source.is_file():
                    zipf.write(source, source.name)
                else:
                    for file_path in source.rglob('*'):
                        if file_path.is_file():
                            arcname = file_path.relative_to(source.parent)
                            zipf.write(file_path, arcname)
        
        @staticmethod
        def _create_tar(source, archive):
            """–°–æ–∑–¥–∞–µ—Ç TAR –∞—Ä—Ö–∏–≤"""
            if archive.suffix == '.gz':
                mode = 'w:gz'
            elif archive.suffix == '.bz2':
                mode = 'w:bz2'
            elif archive.suffix == '.xz':
                mode = 'w:xz'
            else:
                mode = 'w'
            
            with tarfile.open(archive, mode) as tar:
                tar.add(source, arcname=source.name)
        
        @staticmethod
        def extract_archive(archive_path, extract_path):
            """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ä—Ö–∏–≤"""
            archive = Path(archive_path)
            extract_dir = Path(extract_path)
            extract_dir.mkdir(parents=True, exist_ok=True)
            
            if archive.suffix.lower() == '.zip':
                with zipfile.ZipFile(archive, 'r') as zipf:
                    zipf.extractall(extract_dir)
            else:
                with tarfile.open(archive, 'r') as tar:
                    tar.extractall(extract_dir)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = ArchiveManager()
    
    test_archive = 'manager_test.zip'
    manager.create_archive(test_dir, test_archive)
    print(f"–ê—Ä—Ö–∏–≤ {test_archive} —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä")
    
    extract_manager_dir = Path('extracted_manager')
    manager.extract_archive(test_archive, extract_manager_dir)
    print(f"–ê—Ä—Ö–∏–≤ –∏–∑–≤–ª–µ—á–µ–Ω –≤ {extract_manager_dir}")
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup_items = [
        test_dir, extract_dir, extract_tar_dir, extract_manager_dir,
        zip_file, tar_file, filtered_archive, test_archive
    ]
    
    for archive_name, _ in compression_types:
        cleanup_items.append(archive_name)
    
    for item in cleanup_items:
        try:
            if Path(item).is_dir():
                shutil.rmtree(item)
            else:
                os.unlink(item)
        except (FileNotFoundError, OSError):
            pass
    
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    """
    examples = [
        ("–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏", example_01_basic_file_operations),
        ("–†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏", example_02_encoding_handling),
        ("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã", example_03_context_managers),
        ("–†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏", example_04_path_operations),
        ("–§–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤", example_05_file_formats),
        ("–ê—Ä—Ö–∏–≤—ã –∏ —Å–∂–∞—Ç–∏–µ", example_06_archives_and_compression),
    ]
    
    print("üìÅ –ü—Ä–∏–º–µ—Ä—ã: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ Python")
    print("=" * 50)
    
    for i, (name, func) in enumerate(examples, 1):
        print(f"\n{i}. {name}")
        print("-" * (len(name) + 3))
        try:
            func()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
        
        if i < len(examples):
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    main() 