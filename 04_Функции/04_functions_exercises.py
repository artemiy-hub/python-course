#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –§—É–Ω–∫—Ü–∏–∏ –≤ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π:
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
- –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
- –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã
- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ

–ö–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
"""

import time
import functools
from typing import List, Dict, Callable, Optional, Any


def exercise_01():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    
    –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π:
    1. –ò–º–µ–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (+, -, *, /, **, %)
    2. –§—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    3. –§—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    4. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    5. –ò—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ)
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # def create_calculator():
    #     """–°–æ–∑–¥–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ–ø–µ—Ä–∞—Ü–∏–π"""
    #     history = []
    #     
    #     def add(a, b):
    #         result = a + b
    #         history.append(f"{a} + {b} = {result}")
    #         return result
    #     
    #     def subtract(a, b):
    #         result = a - b
    #         history.append(f"{a} - {b} = {result}")
    #         return result
    #     
    #     def multiply(a, b):
    #         result = a * b
    #         history.append(f"{a} * {b} = {result}")
    #         return result
    #     
    #     def divide(a, b):
    #         if b == 0:
    #             raise ValueError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!")
    #         result = a / b
    #         history.append(f"{a} / {b} = {result}")
    #         return result
    #     
    #     def power(a, b):
    #         result = a ** b
    #         history.append(f"{a} ** {b} = {result}")
    #         return result
    #     
    #     def modulo(a, b):
    #         if b == 0:
    #             raise ValueError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!")
    #         result = a % b
    #         history.append(f"{a} % {b} = {result}")
    #         return result
    #     
    #     def get_history():
    #         return history.copy()
    #     
    #     def clear_history():
    #         history.clear()
    #         return "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞"
    #     
    #     operations = {
    #         "+": add,
    #         "-": subtract,
    #         "*": multiply,
    #         "/": divide,
    #         "**": power,
    #         "%": modulo
    #     }
    #     
    #     def validate_numbers(a, b):
    #         """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    #         try:
    #             return float(a), float(b)
    #         except ValueError:
    #             raise ValueError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")
    #     
    #     def calculate(operation, a, b):
    #         """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"""
    #         if operation not in operations:
    #             raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")
    #         
    #         num_a, num_b = validate_numbers(a, b)
    #         return operations[operation](num_a, num_b)
    #     
    #     def show_menu():
    #         """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    #         print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    #         for op in operations.keys():
    #             print(f"  {op}")
    #         print("  history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    #         print("  clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    #         print("  quit - –≤—ã—Ö–æ–¥")
    #     
    #     return {
    #         "calculate": calculate,
    #         "history": get_history,
    #         "clear": clear_history,
    #         "menu": show_menu
    #     }
    # 
    # # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    # calc = create_calculator()
    # 
    # print("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω!")
    # calc["menu"]()
    # 
    # # –ü—Ä–∏–º–µ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    # try:
    #     print(f"\n5 + 3 = {calc['calculate']('+', 5, 3)}")
    #     print(f"10 - 4 = {calc['calculate']('-', 10, 4)}")
    #     print(f"6 * 7 = {calc['calculate']('*', 6, 7)}")
    #     print(f"15 / 3 = {calc['calculate']('/', 15, 3)}")
    #     print(f"2 ** 4 = {calc['calculate']('**', 2, 4)}")
    #     
    #     print("\n–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:")
    #     for operation in calc["history"]():
    #         print(f"  {operation}")
    #         
    # except ValueError as e:
    #     print(f"–û—à–∏–±–∫–∞: {e}")


def exercise_02():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2: –°–∏—Å—Ç–µ–º–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤:
    1. @log_time - –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    2. @log_args - –ª–æ–≥–∏—Ä—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
    3. @log_result - –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    4. @count_calls - —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
    5. @cache_result - –∫–µ—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2: –°–∏—Å—Ç–µ–º–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # def log_time(func):
    #     """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    #     @functools.wraps(func)
    #     def wrapper(*args, **kwargs):
    #         start_time = time.perf_counter()
    #         result = func(*args, **kwargs)
    #         end_time = time.perf_counter()
    #         execution_time = end_time - start_time
    #         print(f"‚è±Ô∏è {func.__name__} –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å {execution_time:.4f} —Å–µ–∫—É–Ω–¥")
    #         return result
    #     return wrapper
    # 
    # def log_args(func):
    #     """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    #     @functools.wraps(func)
    #     def wrapper(*args, **kwargs):
    #         args_str = ", ".join(map(str, args))
    #         kwargs_str = ", ".join(f"{k}={v}" for k, v in kwargs.items())
    #         all_args = ", ".join(filter(None, [args_str, kwargs_str]))
    #         print(f"üì• {func.__name__}({all_args})")
    #         return func(*args, **kwargs)
    #     return wrapper
    # 
    # def log_result(func):
    #     """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    #     @functools.wraps(func)
    #     def wrapper(*args, **kwargs):
    #         result = func(*args, **kwargs)
    #         print(f"üì§ {func.__name__} –≤–µ—Ä–Ω—É–ª–∞: {result}")
    #         return result
    #     return wrapper
    # 
    # def count_calls(func):
    #     """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–∑–æ–≤–æ–≤"""
    #     func.call_count = 0
    #     
    #     @functools.wraps(func)
    #     def wrapper(*args, **kwargs):
    #         func.call_count += 1
    #         print(f"üìä {func.__name__} –≤—ã–∑–≤–∞–Ω–∞ {func.call_count} —Ä–∞–∑")
    #         return func(*args, **kwargs)
    #     
    #     wrapper.call_count = func.call_count
    #     return wrapper
    # 
    # def cache_result(func):
    #     """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    #     cache = {}
    #     
    #     @functools.wraps(func)
    #     def wrapper(*args, **kwargs):
    #         # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    #         key = str(args) + str(sorted(kwargs.items()))
    #         
    #         if key in cache:
    #             print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞ –¥–ª—è {func.__name__}")
    #             return cache[key]
    #         
    #         result = func(*args, **kwargs)
    #         cache[key] = result
    #         print(f"üíø –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à –¥–ª—è {func.__name__}")
    #         return result
    #     
    #     wrapper.cache = cache
    #     return wrapper
    # 
    # # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    # @log_time
    # @log_args
    # @log_result
    # @count_calls
    # @cache_result
    # def factorial(n):
    #     """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞"""
    #     if n <= 1:
    #         return 1
    #     result = 1
    #     for i in range(2, n + 1):
    #         result *= i
    #     time.sleep(0.01)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    #     return result
    # 
    # print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤:")
    # print(f"factorial(5) = {factorial(5)}")
    # print(f"factorial(5) = {factorial(5)}")  # –ò–∑ –∫–µ—à–∞
    # print(f"factorial(6) = {factorial(6)}")
    # print(f"–í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: {factorial.call_count}")


def exercise_03():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
    
    –°–æ–∑–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
    1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
    3. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª–µ–π
    4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
    5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –≤ —Ñ–∞–π–ª (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏)
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # import random
    # import string
    # 
    # def generate_password(length=12, use_uppercase=True, use_lowercase=True, 
    #                      use_digits=True, use_symbols=True):
    #     """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    #     chars = ""
    #     
    #     if use_lowercase:
    #         chars += string.ascii_lowercase
    #     if use_uppercase:
    #         chars += string.ascii_uppercase
    #     if use_digits:
    #         chars += string.digits
    #     if use_symbols:
    #         chars += "!@#$%^&*()_+-=[]{}|;:,.<>?"
    #     
    #     if not chars:
    #         raise ValueError("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤!")
    #     
    #     password = ''.join(random.choice(chars) for _ in range(length))
    #     return password
    # 
    # def check_password_strength(password):
    #     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–ª—É –ø–∞—Ä–æ–ª—è"""
    #     score = 0
    #     feedback = []
    #     
    #     if len(password) >= 8:
    #         score += 1
    #     else:
    #         feedback.append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 8)")
    #     
    #     if any(c.islower() for c in password):
    #         score += 1
    #     else:
    #         feedback.append("–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
    #     
    #     if any(c.isupper() for c in password):
    #         score += 1
    #     else:
    #         feedback.append("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
    #     
    #     if any(c.isdigit() for c in password):
    #         score += 1
    #     else:
    #         feedback.append("–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã")
    #     
    #     if any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
    #         score += 1
    #     else:
    #         feedback.append("–î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
    #     
    #     strength_levels = {
    #         0: "–û—á–µ–Ω—å —Å–ª–∞–±—ã–π",
    #         1: "–°–ª–∞–±—ã–π",
    #         2: "–°—Ä–µ–¥–Ω–∏–π", 
    #         3: "–•–æ—Ä–æ—à–∏–π",
    #         4: "–°–∏–ª—å–Ω—ã–π",
    #         5: "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    #     }
    #     
    #     return {
    #         "score": score,
    #         "strength": strength_levels[score],
    #         "feedback": feedback
    #     }
    # 
    # def password_generator(length=12, **kwargs):
    #     """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π"""
    #     while True:
    #         yield generate_password(length, **kwargs)
    # 
    # def generate_unique_passwords(count, length=12, max_attempts=1000, **kwargs):
    #     """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π"""
    #     passwords = set()
    #     attempts = 0
    #     
    #     while len(passwords) < count and attempts < max_attempts:
    #         password = generate_password(length, **kwargs)
    #         passwords.add(password)
    #         attempts += 1
    #     
    #     if len(passwords) < count:
    #         print(f"‚ö†Ô∏è –£–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ {len(passwords)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∏–∑ {count}")
    #     
    #     return list(passwords)
    # 
    # def save_passwords_generator(passwords, filename="passwords.txt"):
    #     """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    #     with open(filename, 'w', encoding='utf-8') as file:
    #         for i, password in enumerate(passwords, 1):
    #             strength = check_password_strength(password)
    #             line = f"{i:3d}. {password:<20} | –°–∏–ª–∞: {strength['strength']}\n"
    #             file.write(line)
    #             yield f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–∞—Ä–æ–ª—å {i}: {password} (—Å–∏–ª–∞: {strength['strength']})"
    # 
    # # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    # print("1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    # simple_password = generate_password(8, use_symbols=False)
    # complex_password = generate_password(16)
    # 
    # print(f"–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å: {simple_password}")
    # print(f"–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å: {complex_password}")
    # 
    # print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª–µ–π:")
    # for pwd in [simple_password, complex_password, "123456", "MySecure!Pass123"]:
    #     strength = check_password_strength(pwd)
    #     print(f"'{pwd}': {strength['strength']} (–±–∞–ª–ª: {strength['score']}/5)")
    #     if strength['feedback']:
    #         print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(strength['feedback'])}")
    # 
    # print("\n3. –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π:")
    # pwd_gen = password_generator(10)
    # print("–ü–µ—Ä–≤—ã–µ 5 –ø–∞—Ä–æ–ª–µ–π –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:")
    # for i, password in enumerate(pwd_gen):
    #     if i >= 5:
    #         break
    #     print(f"  {i+1}. {password}")
    # 
    # print("\n4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π:")
    # unique_passwords = generate_unique_passwords(5, length=8)
    # print(f"–°–æ–∑–¥–∞–Ω–æ {len(unique_passwords)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π:")
    # for i, pwd in enumerate(unique_passwords, 1):
    #     print(f"  {i}. {pwd}")
    # 
    # print("\n5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π:")
    # save_gen = save_passwords_generator(unique_passwords, "temp_passwords.txt")
    # for message in save_gen:
    #     print(f"  {message}")


def exercise_04():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    
    –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö:
    1. –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    2. –ö–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    3. –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    4. –ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    5. –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # from functools import reduce, partial
    # 
    # # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    # students = [
    #     {"name": "–ê–ª–∏—Å–∞", "age": 20, "grades": [85, 90, 78, 92], "major": "CS"},
    #     {"name": "–ë–æ–±", "age": 22, "grades": [70, 75, 80, 85], "major": "Math"},
    #     {"name": "–ß–∞—Ä–ª–∏", "age": 19, "grades": [95, 88, 91, 94], "major": "CS"},
    #     {"name": "–î–∏–∞–Ω–∞", "age": 21, "grades": [60, 65, 70, 75], "major": "Physics"},
    #     {"name": "–ï–≤–∞", "age": 20, "grades": [88, 85, 90, 87], "major": "CS"},
    #     {"name": "–§—Ä—ç–Ω–∫", "age": 23, "grades": [45, 50, 55, 60], "major": "Math"}
    # ]
    # 
    # # –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    # def filter_by(predicate, data):
    #     """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–µ–¥–∏–∫–∞—Ç—É"""
    #     return list(filter(predicate, data))
    # 
    # def map_by(transformer, data):
    #     """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏"""
    #     return list(map(transformer, data))
    # 
    # def reduce_by(reducer, data, initial=None):
    #     """–°–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
    #     if initial is None:
    #         return reduce(reducer, data)
    #     return reduce(reducer, data, initial)
    # 
    # # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    # def compose(*functions):
    #     """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π"""
    #     def composed(data):
    #         result = data
    #         for func in reversed(functions):
    #             result = func(result)
    #         return result
    #     return composed
    # 
    # def pipe(*functions):
    #     """–°–æ–∑–¥–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏–π (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)"""
    #     def pipeline(data):
    #         result = data
    #         for func in functions:
    #             result = func(result)
    #         return result
    #     return pipeline
    # 
    # # –ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    # def curry(func):
    #     """–ö–∞—Ä—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é"""
    #     def curried(*args, **kwargs):
    #         if len(args) + len(kwargs) >= func.__code__.co_argcount:
    #             return func(*args, **kwargs)
    #         return lambda *more_args, **more_kwargs: curried(
    #             *(args + more_args), **{**kwargs, **more_kwargs}
    #         )
    #     return curried
    # 
    # # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
    # def calculate_average(grades):
    #     """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª"""
    #     return sum(grades) / len(grades) if grades else 0
    # 
    # def add_average_grade(student):
    #     """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫ –¥–∞–Ω–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    #     return {**student, "average": calculate_average(student["grades"])}
    # 
    # def is_cs_student(student):
    #     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑—É—á–∞–µ—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç CS"""
    #     return student["major"] == "CS"
    # 
    # def has_high_grades(student, threshold=85):
    #     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏"""
    #     return student.get("average", 0) >= threshold
    # 
    # @curry
    # def filter_by_major(major, student):
    #     """–ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    #     return student["major"] == major
    # 
    # @curry
    # def filter_by_age_range(min_age, max_age, student):
    #     """–ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
    #     return min_age <= student["age"] <= max_age
    # 
    # # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # print("1. –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    # 
    # # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã
    # students_with_avg = map_by(add_average_grade, students)
    # for student in students_with_avg:
    #     print(f"{student['name']}: —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª {student['average']:.1f}")
    # 
    # print("\n2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:")
    # 
    # # –°—Ç—É–¥–µ–Ω—Ç—ã CS
    # cs_students = filter_by(is_cs_student, students_with_avg)
    # print(f"–°—Ç—É–¥–µ–Ω—Ç—ã CS: {[s['name'] for s in cs_students]}")
    # 
    # # –°—Ç—É–¥–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏
    # high_performers = filter_by(lambda s: has_high_grades(s, 85), students_with_avg)
    # print(f"–û—Ç–ª–∏—á–Ω–∏–∫–∏ (—Å—Ä–µ–¥–Ω–∏–π >= 85): {[s['name'] for s in high_performers]}")
    # 
    # print("\n3. –ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    # 
    # # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    # cs_filter = filter_by_major("CS")
    # young_filter = filter_by_age_range(18, 20)
    # 
    # cs_students = filter_by(cs_filter, students_with_avg)
    # young_students = filter_by(young_filter, students_with_avg)
    # 
    # print(f"CS —Å—Ç—É–¥–µ–Ω—Ç—ã: {[s['name'] for s in cs_students]}")
    # print(f"–ú–æ–ª–æ–¥—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã (18-20): {[s['name'] for s in young_students]}")
    # 
    # print("\n4. –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    # 
    # # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CS —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    # analyze_cs_students = pipe(
    #     lambda data: map_by(add_average_grade, data),
    #     lambda data: filter_by(is_cs_student, data),
    #     lambda data: filter_by(lambda s: has_high_grades(s, 80), data),
    #     lambda data: map_by(lambda s: {"name": s["name"], "average": s["average"]}, data)
    # )
    # 
    # top_cs_students = analyze_cs_students(students)
    # print("–õ—É—á—à–∏–µ CS —Å—Ç—É–¥–µ–Ω—Ç—ã:")
    # for student in top_cs_students:
    #     print(f"  {student['name']}: {student['average']:.1f}")
    # 
    # print("\n5. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:")
    # 
    # # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
    # def group_by_major(students):
    #     """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    #     groups = {}
    #     for student in students:
    #         major = student["major"]
    #         if major not in groups:
    #             groups[major] = []
    #         groups[major].append(student)
    #     return groups
    # 
    # grouped = group_by_major(students_with_avg)
    # print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º:")
    # for major, major_students in grouped.items():
    #     avg_grade = sum(s["average"] for s in major_students) / len(major_students)
    #     print(f"  {major}: {len(major_students)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª {avg_grade:.1f}")


def exercise_05():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 5: –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    
    –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:
    1. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @task –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –∫–∞–∫ –∑–∞–¥–∞—á
    2. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @retry –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    3. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–∞–∫–µ—Ç–∞–º–∏
    4. –§—É–Ω–∫—Ü–∏–∏-—Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    5. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 5: –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # import random
    # from collections import deque
    # 
    # class TaskManager:
    #     """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    #     
    #     def __init__(self):
    #         self.tasks = {}
    #         self.task_queue = deque()
    #         self.completed_tasks = []
    #         self.failed_tasks = []
    #     
    #     def task(self, name=None, priority=1, dependencies=None):
    #         """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á"""
    #         def decorator(func):
    #             task_name = name or func.__name__
    #             task_info = {
    #                 "name": task_name,
    #                 "function": func,
    #                 "priority": priority,
    #                 "dependencies": dependencies or [],
    #                 "status": "registered"
    #             }
    #             self.tasks[task_name] = task_info
    #             print(f"üìù –ó–∞–¥–∞—á–∞ '{task_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    #             return func
    #         return decorator
    #     
    #     def retry(self, max_attempts=3, delay=1):
    #         """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    #         def decorator(func):
    #             @functools.wraps(func)
    #             def wrapper(*args, **kwargs):
    #                 for attempt in range(max_attempts):
    #                     try:
    #                         return func(*args, **kwargs)
    #                     except Exception as e:
    #                         if attempt == max_attempts - 1:
    #                             print(f"‚ùå –ó–∞–¥–∞—á–∞ '{func.__name__}' –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    #                             raise e
    #                         print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
    #                         time.sleep(delay)
    #             return wrapper
    #         return decorator
    #     
    #     def add_to_queue(self, task_name, *args, **kwargs):
    #         """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    #         if task_name in self.tasks:
    #             task_item = {
    #                 "name": task_name,
    #                 "args": args,
    #                 "kwargs": kwargs,
    #                 "priority": self.tasks[task_name]["priority"]
    #             }
    #             self.task_queue.append(task_item)
    #             print(f"‚ûï –ó–∞–¥–∞—á–∞ '{task_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
    #         else:
    #             print(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    #     
    #     def execute_task(self, task_name, *args, **kwargs):
    #         """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É"""
    #         if task_name not in self.tasks:
    #             raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    #         
    #         task_info = self.tasks[task_name]
    #         
    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    #         for dep in task_info["dependencies"]:
    #             if dep not in [t["name"] for t in self.completed_tasks]:
    #                 raise RuntimeError(f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å '{dep}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    #         
    #         print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞ '{task_name}'...")
    #         try:
    #             result = task_info["function"](*args, **kwargs)
    #             self.completed_tasks.append({
    #                 "name": task_name,
    #                 "result": result,
    #                 "timestamp": time.time()
    #             })
    #             print(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    #             return result
    #         except Exception as e:
    #             self.failed_tasks.append({
    #                 "name": task_name,
    #                 "error": str(e),
    #                 "timestamp": time.time()
    #             })
    #             print(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {e}")
    #             raise
    #     
    #     def batch_executor(self, batch_size=3):
    #         """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–∞–∫–µ—Ç–∞–º–∏"""
    #         # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    #         sorted_queue = sorted(self.task_queue, key=lambda x: x["priority"], reverse=True)
    #         
    #         for i in range(0, len(sorted_queue), batch_size):
    #             batch = sorted_queue[i:i + batch_size]
    #             batch_results = []
    #             
    #             print(f"\nüì¶ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞–∫–µ—Ç {i//batch_size + 1} –∏–∑ {len(batch)} –∑–∞–¥–∞—á")
    #             
    #             for task_item in batch:
    #                 try:
    #                     result = self.execute_task(
    #                         task_item["name"],
    #                         *task_item["args"],
    #                         **task_item["kwargs"]
    #                     )
    #                     batch_results.append({
    #                         "task": task_item["name"],
    #                         "result": result,
    #                         "status": "success"
    #                     })
    #                 except Exception as e:
    #                     batch_results.append({
    #                         "task": task_item["name"],
    #                         "error": str(e),
    #                         "status": "failed"
    #                     })
    #             
    #             yield batch_results
    #         
    #         # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    #         self.task_queue.clear()
    #     
    #     def get_statistics(self):
    #         """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    #         return {
    #             "total_registered": len(self.tasks),
    #             "completed": len(self.completed_tasks),
    #             "failed": len(self.failed_tasks),
    #             "in_queue": len(self.task_queue)
    #         }
    # 
    # # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
    # task_manager = TaskManager()
    # 
    # # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    # @task_manager.task("fetch_data", priority=3)
    # @task_manager.retry(max_attempts=2)
    # def fetch_data(url):
    #     """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    #     if random.random() < 0.3:  # 30% —à–∞–Ω—Å –æ—à–∏–±–∫–∏
    #         raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}")
    #     return f"–î–∞–Ω–Ω—ã–µ —Å {url} –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    # 
    # @task_manager.task("process_data", priority=2, dependencies=["fetch_data"])
    # def process_data(data):
    #     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    #     time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    #     return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {data}"
    # 
    # @task_manager.task("save_data", priority=1, dependencies=["process_data"])
    # def save_data(processed_data):
    #     """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    #     return f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {processed_data}"
    # 
    # @task_manager.task("cleanup", priority=1)
    # def cleanup():
    #     """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    #     return "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"
    # 
    # @task_manager.task("send_notification", priority=1)
    # def send_notification(message):
    #     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    #     return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}"
    # 
    # # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    # print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å:")
    # task_manager.add_to_queue("fetch_data", "https://api.example.com/data")
    # task_manager.add_to_queue("cleanup")
    # task_manager.add_to_queue("send_notification", "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    # task_manager.add_to_queue("fetch_data", "https://api.example.com/users")
    # 
    # # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞–∫–µ—Ç–∞–º–∏
    # print("\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–∞–∫–µ—Ç–∞–º–∏:")
    # batch_executor = task_manager.batch_executor(batch_size=2)
    # 
    # for batch_num, batch_results in enumerate(batch_executor, 1):
    #     print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–∞ {batch_num}:")
    #     for result in batch_results:
    #         if result["status"] == "success":
    #             print(f"  ‚úÖ {result['task']}: {result['result']}")
    #         else:
    #             print(f"  ‚ùå {result['task']}: {result['error']}")
    # 
    # # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    # stats = task_manager.get_statistics()
    # print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    # print(f"  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {stats['total_registered']}")
    # print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {stats['completed']}")
    # print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {stats['failed']}")
    # print(f"  –í –æ—á–µ—Ä–µ–¥–∏: {stats['in_queue']}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    """
    exercises = [
        ("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏", exercise_01),
        ("–°–∏—Å—Ç–µ–º–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", exercise_02),
        ("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π", exercise_03),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", exercise_04),
        ("–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", exercise_05),
    ]
    
    print("üéØ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –§—É–Ω–∫—Ü–∏–∏ –≤ Python")
    print("=" * 50)
    
    while True:
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        for i, (name, _) in enumerate(exercises, 1):
            print(f"{i:2}. {name}")
        print(" 0. –í—ã—Ö–æ–¥")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (0-5): "))
            if choice == 0:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif 1 <= choice <= len(exercises):
                print("\n" + "="*60)
                exercises[choice-1][1]()
                print("="*60)
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
        except KeyboardInterrupt:
            print("\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break


if __name__ == "__main__":
    main() 