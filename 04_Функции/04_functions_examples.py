#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã: –§—É–Ω–∫—Ü–∏–∏ –≤ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:
- –û—Å–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π
- –†–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
- –û–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
- –§—É–Ω–∫—Ü–∏–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏ –∑–∞–º—ã–∫–∞–Ω–∏–π
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤
"""

import time
import functools
import itertools
from typing import List, Dict, Callable, Optional, Any
from collections import defaultdict


def example_01_basic_functions():
    """
    –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ—É–Ω–∫—Ü–∏–π, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π ===")
    
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    def greet():
        """–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        return "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
    
    print("1. –§—É–Ω–∫—Ü–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
    print(greet())
    
    # –§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    def greet_person(name, age):
        """
        –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        
        Args:
            name (str): –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞
            age (int): –í–æ–∑—Ä–∞—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞
        
        Returns:
            str: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        """
        return f"–ü—Ä–∏–≤–µ—Ç, {name}! –¢–µ–±–µ {age} –ª–µ—Ç."
    
    print("\n2. –§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    print(greet_person("–ê–ª–∏—Å–∞", 25))
    
    # –§—É–Ω–∫—Ü–∏—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    def create_user(name, age=18, city="–ú–æ—Å–∫–≤–∞", active=True):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "name": name,
            "age": age,
            "city": city,
            "active": active,
            "created_at": time.strftime("%Y-%m-%d %H:%M:%S")
        }
    
    print("\n3. –§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
    user1 = create_user("–ë–æ–±")
    user2 = create_user("–ê–ª–∏—Å–∞", 30, "–°–ü–±")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: {user1}")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: {user2}")
    
    # –§—É–Ω–∫—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    def analyze_number(num):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        Returns:
            tuple: (is_positive, is_even, square, description)
        """
        is_positive = num > 0
        is_even = num % 2 == 0
        square = num ** 2
        
        if num == 0:
            description = "–Ω–æ–ª—å"
        elif is_positive:
            description = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ" if is_even else "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–µ—á–µ—Ç–Ω–æ–µ"
        else:
            description = "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ" if is_even else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–µ—á–µ—Ç–Ω–æ–µ"
        
        return is_positive, is_even, square, description
    
    print("\n4. –§—É–Ω–∫—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
    numbers_to_test = [5, -4, 0, 7]
    for num in numbers_to_test:
        pos, even, sq, desc = analyze_number(num)
        print(f"–ß–∏—Å–ª–æ {num}: {desc}, –∫–≤–∞–¥—Ä–∞—Ç = {sq}")


def example_02_advanced_parameters():
    """
    –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç *args, **kwargs, keyword-only –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===")
    
    # –§—É–Ω–∫—Ü–∏—è —Å *args
    def sum_all(*numbers):
        """–°—É–º–º–∏—Ä—É–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª"""
        if not numbers:
            return 0
        
        total = sum(numbers)
        print(f"–°—É–º–º–∞ —á–∏—Å–µ–ª {numbers} = {total}")
        return total
    
    print("1. –§—É–Ω–∫—Ü–∏—è —Å *args:")
    sum_all(1, 2, 3)
    sum_all(10, 20, 30, 40, 50)
    sum_all()
    
    # –§—É–Ω–∫—Ü–∏—è —Å **kwargs
    def create_report(**data):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –û—Ç—á–µ—Ç:")
        for key, value in data.items():
            print(f"  {key.replace('_', ' ').title()}: {value}")
        return data
    
    print("\n2. –§—É–Ω–∫—Ü–∏—è —Å **kwargs:")
    create_report(
        total_sales=150000,
        new_customers=45,
        satisfaction_rate=4.7,
        top_product="Python Course"
    )
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    def flexible_function(required_param, default_param="default", *args, **kwargs):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        print(f"\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {required_param}")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_param}")
        
        if args:
            print(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
        
        if kwargs:
            print(f"–ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {kwargs}")
        
        return {
            "required": required_param,
            "default": default_param,
            "args": args,
            "kwargs": kwargs
        }
    
    print("\n3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:")
    result = flexible_function(
        "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π",
        "–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π",
        "extra1", "extra2",
        option1="–∑–Ω–∞—á–µ–Ω–∏–µ1",
        option2="–∑–Ω–∞—á–µ–Ω–∏–µ2"
    )
    
    # Keyword-only –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (Python 3+)
    def configure_connection(host, port, *, timeout=30, ssl=True, retries=3):
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å keyword-only –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        config = {
            "host": host,
            "port": port,
            "timeout": timeout,
            "ssl": ssl,
            "retries": retries
        }
        print(f"\nüîó –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {config}")
        return config
    
    print("\n4. Keyword-only –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    # configure_connection("localhost", 8080, 60)  # –û—à–∏–±–∫–∞!
    configure_connection("localhost", 8080, timeout=60, ssl=False)
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    def calculate_rectangle(length, width, height=1):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å –∏ –æ–±—ä–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        area = length * width
        volume = area * height
        return area, volume
    
    print("\n5. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:")
    dimensions = [5, 3]
    options = {"height": 2}
    
    area, volume = calculate_rectangle(*dimensions, **options)
    print(f"–ü–ª–æ—â–∞–¥—å: {area}, –û–±—ä–µ–º: {volume}")


def example_03_scope_and_closures():
    """
    –ü—Ä–∏–º–µ—Ä 3: –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–æ LEGB, –∑–∞–º—ã–∫–∞–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ
    –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 3: –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è ===")
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    global_counter = 0
    
    def demonstrate_scope():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏"""
        global global_counter
        
        # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        local_var = "–Ø –ª–æ–∫–∞–ª—å–Ω–∞—è"
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        global_counter += 1
        
        print(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {local_var}")
        print(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫: {global_counter}")
        
        # –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
        print(f"–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è): {len('Python')}")
    
    print("1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–ª–∞—Å—Ç–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏:")
    demonstrate_scope()
    demonstrate_scope()
    
    # –ó–∞–º—ã–∫–∞–Ω–∏—è
    def create_multiplier(factor):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-—É–º–Ω–æ–∂–∏—Ç–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∑–∞–º—ã–∫–∞–Ω–∏—è"""
        def multiply(number):
            return number * factor  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º factor –∏–∑ –≤–Ω–µ—à–Ω–µ–π –æ–±–ª–∞—Å—Ç–∏
        
        return multiply
    
    print("\n2. –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–º—ã–∫–∞–Ω–∏—è:")
    double = create_multiplier(2)
    triple = create_multiplier(3)
    
    print(f"double(5) = {double(5)}")
    print(f"triple(4) = {triple(4)}")
    
    # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–º—ã–∫–∞–Ω–∏—è - —Å—á–µ—Ç—á–∏–∫
    def create_counter(initial=0, step=1):
        """–°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        count = initial
        
        def increment():
            nonlocal count
            count += step
            return count
        
        def decrement():
            nonlocal count
            count -= step
            return count
        
        def get_current():
            return count
        
        def reset():
            nonlocal count
            count = initial
            return count
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–æ–¥–∞–º–∏
        return {
            "increment": increment,
            "decrement": decrement,
            "current": get_current,
            "reset": reset
        }
    
    print("\n3. –°—á–µ—Ç—á–∏–∫ —Å –∑–∞–º—ã–∫–∞–Ω–∏–µ–º:")
    counter1 = create_counter(10, 2)
    counter2 = create_counter(0, 5)
    
    print(f"–°—á–µ—Ç—á–∏–∫ 1 - –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {counter1['current']()}")
    print(f"–°—á–µ—Ç—á–∏–∫ 1 - –ø–æ—Å–ª–µ increment: {counter1['increment']()}")
    print(f"–°—á–µ—Ç—á–∏–∫ 1 - –ø–æ—Å–ª–µ increment: {counter1['increment']()}")
    print(f"–°—á–µ—Ç—á–∏–∫ 1 - –ø–æ—Å–ª–µ decrement: {counter1['decrement']()}")
    
    print(f"–°—á–µ—Ç—á–∏–∫ 2 - –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {counter2['current']()}")
    print(f"–°—á–µ—Ç—á–∏–∫ 2 - –ø–æ—Å–ª–µ increment: {counter2['increment']()}")
    
    # –ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    def create_validator(min_len=0, max_len=100, required_chars=None):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç—Ä–æ–∫ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        required_chars = required_chars or set()
        
        def validate(text):
            errors = []
            
            if len(text) < min_len:
                errors.append(f"–ú–∏–Ω–∏–º—É–º {min_len} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if len(text) > max_len:
                errors.append(f"–ú–∞–∫—Å–∏–º—É–º {max_len} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if required_chars and not required_chars.issubset(set(text)):
                missing = required_chars - set(text)
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∏–º–≤–æ–ª—ã: {missing}")
            
            return len(errors) == 0, errors
        
        return validate
    
    print("\n4. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä:")
    password_validator = create_validator(
        min_len=8, 
        max_len=50, 
        required_chars={'@', '!', '#'}
    )
    
    test_passwords = ["123", "mypassword", "mypass@!", "verylongpassword123!@#"]
    for pwd in test_passwords:
        is_valid, errors = password_validator(pwd)
        status = "‚úÖ –í–∞–ª–∏–¥–µ–Ω" if is_valid else f"‚ùå –û—à–∏–±–∫–∏: {', '.join(errors)}"
        print(f"  '{pwd}': {status}")


def example_04_higher_order_functions():
    """
    –ü—Ä–∏–º–µ—Ä 4: –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç map, filter, reduce, custom HOF
    –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 4: –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ ===")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    words = ["python", "java", "javascript", "go", "rust", "c++"]
    
    print("1. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞:")
    
    # map() - –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    squares = list(map(lambda x: x**2, numbers))
    print(f"–ö–≤–∞–¥—Ä–∞—Ç—ã: {squares}")
    
    uppercased = list(map(str.upper, words))
    print(f"–í–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä: {uppercased}")
    
    # filter() - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Å–ª–æ–≤–∏—é
    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
    print(f"–ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞: {even_numbers}")
    
    long_words = list(filter(lambda w: len(w) > 4, words))
    print(f"–î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {long_words}")
    
    # reduce() - —Å–≤–µ—Ä—Ç–∫–∞ –∫ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    from functools import reduce
    
    sum_all = reduce(lambda a, b: a + b, numbers)
    print(f"–°—É–º–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª: {sum_all}")
    
    longest_word = reduce(lambda a, b: a if len(a) > len(b) else b, words)
    print(f"–°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {longest_word}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    def apply_to_pairs(func, lst):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫ –ø–∞—Ä–∞–º —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        return [func(lst[i], lst[i+1]) for i in range(len(lst)-1)]
    
    def compose(f, g):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π f(g(x))"""
        return lambda x: f(g(x))
    
    print("\n2. –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞:")
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ –ø–∞—Ä–∞–º
    differences = apply_to_pairs(lambda a, b: b - a, numbers[:5])
    print(f"–†–∞–∑–Ω–æ—Å—Ç–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {differences}")
    
    # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    square_and_double = compose(lambda x: x * 2, lambda x: x ** 2)
    result = square_and_double(3)  # (3^2) * 2 = 18
    print(f"–ö–æ–º–ø–æ–∑–∏—Ü–∏—è (–∫–≤–∞–¥—Ä–∞—Ç –∏ —É–¥–≤–æ–µ–Ω–∏–µ) –¥–ª—è 3: {result}")
    
    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    def partial_apply(func, *partial_args):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        def wrapper(*remaining_args):
            return func(*(partial_args + remaining_args))
        return wrapper
    
    def multiply_three(a, b, c):
        return a * b * c
    
    multiply_by_2_and = partial_apply(multiply_three, 2)
    result1 = multiply_by_2_and(3, 4)  # 2 * 3 * 4 = 24
    print(f"–ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (2 * 3 * 4): {result1}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
    def process_data(data, *operations):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–µ–ø–æ—á–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π –∫ –¥–∞–Ω–Ω—ã–º"""
        result = data
        for operation in operations:
            result = operation(result)
        return result
    
    print("\n3. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    
    # –¶–µ–ø–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    test_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    
    result = process_data(
        test_data,
        lambda x: list(filter(lambda n: n % 2 == 0, x)),  # –¢–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ
        lambda x: list(map(lambda n: n ** 2, x)),         # –ö–≤–∞–¥—Ä–∞—Ç—ã
        lambda x: sum(x)                                   # –°—É–º–º–∞
    )
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç (—Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–µ—Ç–Ω—ã—Ö): {result}")


def example_05_decorators():
    """
    –ü—Ä–∏–º–µ—Ä 5: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 5: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ===")
    
    # –ü—Ä–æ—Å—Ç–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    def log_calls(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            print(f"üîç –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {args}, {kwargs}")
            result = func(*args, **kwargs)
            print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func.__name__} –≤–µ—Ä–Ω—É–ª–∞: {result}")
            return result
        return wrapper
    
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    def timer(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            start_time = time.perf_counter()
            result = func(*args, **kwargs)
            end_time = time.perf_counter()
            execution_time = end_time - start_time
            print(f"‚è±Ô∏è {func.__name__} –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å {execution_time:.4f} —Å–µ–∫—É–Ω–¥")
            return result
        return wrapper
    
    print("1. –ü—Ä–æ—Å—Ç—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã:")
    
    @log_calls
    @timer
    def calculate_fibonacci(n):
        """–í—ã—á–∏—Å–ª—è–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ (–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)"""
        if n <= 1:
            return n
        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)
    
    result = calculate_fibonacci(10)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    def retry(max_attempts=3, delay=1):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                for attempt in range(max_attempts):
                    try:
                        return func(*args, **kwargs)
                    except Exception as e:
                        if attempt == max_attempts - 1:
                            print(f"‚ùå –í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                            raise e
                        print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                        time.sleep(delay)
            return wrapper
        return decorator
    
    print("\n2. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    
    @retry(max_attempts=3, delay=0.5)
    def unreliable_function():
        """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω–æ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç"""
        import random
        if random.random() < 0.7:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            raise Exception("–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞!")
        return "–£—Å–ø–µ—Ö!"
    
    try:
        result = unreliable_function()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        print(f"‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    def memoize(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
        cache = {}
        
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            key = str(args) + str(sorted(kwargs.items()))
            
            if key in cache:
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞ –¥–ª—è {func.__name__}")
                return cache[key]
            
            result = func(*args, **kwargs)
            cache[key] = result
            print(f"üíø –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à –¥–ª—è {func.__name__}")
            return result
        
        wrapper.cache = cache  # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–µ—à—É
        return wrapper
    
    print("\n3. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    @memoize
    def expensive_calculation(n):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –¥–æ—Ä–æ–≥–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"""
        print(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é –¥–æ—Ä–æ–≥–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è {n}")
        time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        return n ** 3
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–µ—à–∞
    print(f"–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {expensive_calculation(5)}")
    print(f"–í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {expensive_calculation(5)}")  # –ò–∑ –∫–µ—à–∞
    print(f"–¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤: {expensive_calculation(3)}")
    print(f"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤—ã–∑–æ–≤: {expensive_calculation(5)}")  # –ò–∑ –∫–µ—à–∞
    
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä-–∫–ª–∞—Å—Å
    class CountCalls:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä-–∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
        def __init__(self, func):
            self.func = func
            self.count = 0
            functools.update_wrapper(self, func)
        
        def __call__(self, *args, **kwargs):
            self.count += 1
            print(f"üìä –§—É–Ω–∫—Ü–∏—è {self.func.__name__} –≤—ã–∑–≤–∞–Ω–∞ {self.count} —Ä–∞–∑")
            return self.func(*args, **kwargs)
    
    print("\n4. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä-–∫–ª–∞—Å—Å:")
    
    @CountCalls
    def say_hello(name):
        return f"–ü—Ä–∏–≤–µ—Ç, {name}!"
    
    for name in ["–ê–ª–∏—Å–∞", "–ë–æ–±", "–ß–∞—Ä–ª–∏"]:
        print(say_hello(name))


def example_06_generators():
    """
    –ü—Ä–∏–º–µ—Ä 6: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å yield,
    –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 6: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã ===")
    
    # –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    def countdown(n):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Å {n}")
        while n > 0:
            yield n
            n -= 1
        print("üéØ –û—Ç—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    print("1. –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:")
    for num in countdown(5):
        print(f"  {num}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
    def fibonacci_generator(limit=None):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏"""
        a, b = 0, 1
        count = 0
        while limit is None or count < limit:
            yield a
            a, b = b, a + b
            count += 1
    
    print("\n2. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –§–∏–±–æ–Ω–∞—á—á–∏:")
    fib_gen = fibonacci_generator(10)
    fib_numbers = list(fib_gen)
    print(f"–ü–µ—Ä–≤—ã–µ 10 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏: {fib_numbers}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è)
    def read_lines(content):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ (–∏–º–∏—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞)"""
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            print(f"üìñ –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É {i}")
            yield line.strip()
    
    print("\n3. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫:")
    sample_content = """–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"""
    
    for line in read_lines(sample_content):
        if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞: '{line}'")
    
    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    print("\n4. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
    even_squares = (x**2 for x in range(10) if x % 2 == 0)
    print(f"–ö–≤–∞–¥—Ä–∞—Ç—ã —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª: {list(even_squares)}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    def process_large_dataset():
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–ª—å—à–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        data_generator = (f"item_{i}" for i in range(1000000))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —á–∞—Å—Ç—è–º (–ª–µ–Ω–∏–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)
        processed_count = 0
        for item in data_generator:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            if "999" in item:  # –ù–∞—Ö–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                processed_count += 1
                if processed_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    print(f"  –ù–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {item}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if processed_count >= 5:
                break
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å '999': {processed_count}")
    
    print("\n5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    process_large_dataset()
    
    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    def stateful_generator():
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
        state = {"count": 0, "sum": 0}
        
        while True:
            value = yield state.copy()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if value is not None:
                state["count"] += 1
                state["sum"] += value
                state["average"] = state["sum"] / state["count"]
    
    print("\n6. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:")
    stat_gen = stateful_generator()
    next(stat_gen)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    
    numbers_to_process = [10, 20, 30, 40, 50]
    for num in numbers_to_process:
        state = stat_gen.send(num)
        print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ {num}: {state}")
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    def chain_generators(*generators):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –æ–¥–∏–Ω"""
        for gen in generators:
            yield from gen
    
    print("\n7. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤:")
    gen1 = (x for x in range(3))
    gen2 = (x for x in range(10, 13))
    gen3 = (x for x in range(20, 23))
    
    combined = chain_generators(gen1, gen2, gen3)
    print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã: {list(combined)}")


def example_07_functional_programming():
    """
    –ü—Ä–∏–º–µ—Ä 7: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:
    —á–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å, –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 7: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ===")
    
    # –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
    def pure_add(a, b):
        """–ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ª–æ–∂–µ–Ω–∏—è"""
        return a + b
    
    def pure_multiply_list(numbers, factor):
        """–ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫)"""
        return [num * factor for num in numbers]
    
    print("1. –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    original_list = [1, 2, 3, 4, 5]
    doubled_list = pure_multiply_list(original_list, 2)
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫: {original_list}")
    print(f"–£–¥–≤–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {doubled_list}")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {original_list}")
    
    # –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    def pipe(*functions):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–≤–µ–π–µ—Ä –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π"""
        def pipeline(data):
            result = data
            for func in functions:
                result = func(result)
            return result
        return pipeline
    
    def curry(func):
        """–ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        def curried(*args, **kwargs):
            if len(args) + len(kwargs) >= func.__code__.co_argcount:
                return func(*args, **kwargs)
            return lambda *more_args, **more_kwargs: curried(*(args + more_args), **{**kwargs, **more_kwargs})
        return curried
    
    print("\n2. –ö–æ–Ω–≤–µ–π–µ—Ä —Ñ—É–Ω–∫—Ü–∏–π:")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    def filter_even(numbers):
        return [n for n in numbers if n % 2 == 0]
    
    def square_all(numbers):
        return [n ** 2 for n in numbers]
    
    def sum_all(numbers):
        return sum(numbers)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ–π–µ—Ä
    process_numbers = pipe(filter_even, square_all, sum_all)
    
    test_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    result = process_numbers(test_data)
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç (—Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–µ—Ç–Ω—ã—Ö): {result}")
    
    # –ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n3. –ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    
    @curry
    def multiply_three_numbers(a, b, c):
        return a * b * c
    
    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    multiply_by_2 = multiply_three_numbers(2)
    multiply_by_2_and_3 = multiply_by_2(3)
    
    result1 = multiply_by_2_and_3(4)  # 2 * 3 * 4 = 24
    result2 = multiply_by_2(5, 6)     # 2 * 5 * 6 = 60
    
    print(f"–ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (2 * 3 * 4): {result1}")
    print(f"–ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (2 * 5 * 6): {result2}")
    
    # –†–∞–±–æ—Ç–∞ —Å –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    def immutable_update(data, key, value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≤–æ–∑–≤—Ä–∞—â–∞—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä"""
        return {**data, key: value}
    
    def immutable_append(lst, item):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞—è –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫"""
        return lst + [item]
    
    print("\n4. –ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    original_dict = {"name": "–ê–ª–∏—Å–∞", "age": 25}
    updated_dict = immutable_update(original_dict, "city", "–ú–æ—Å–∫–≤–∞")
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: {original_dict}")
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: {updated_dict}")
    
    original_list = [1, 2, 3]
    extended_list = immutable_append(original_list, 4)
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫: {original_list}")
    print(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {extended_list}")
    
    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    def map_values(func, collection):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º —Å–ª–æ–≤–∞—Ä—è"""
        return {key: func(value) for key, value in collection.items()}
    
    def filter_dict(predicate, collection):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ –ø—Ä–µ–¥–∏–∫–∞—Ç—É"""
        return {key: value for key, value in collection.items() if predicate(key, value)}
    
    print("\n5. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:")
    scores = {"–ê–ª–∏—Å–∞": 85, "–ë–æ–±": 92, "–ß–∞—Ä–ª–∏": 78, "–î–∏–∞–Ω–∞": 96}
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–∞–ª–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    percentages = map_values(lambda score: f"{score}%", scores)
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç—ã: {percentages}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–∏—Ö –±–∞–ª–ª–æ–≤
    high_scores = filter_dict(lambda name, score: score >= 90, scores)
    print(f"–í—ã—Å–æ–∫–∏–µ –±–∞–ª–ª—ã: {high_scores}")


def example_08_advanced_techniques():
    """
    –ü—Ä–∏–º–µ—Ä 8: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 8: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ ===")
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    def create_operation_function(operation):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        operations = {
            "add": lambda a, b: a + b,
            "multiply": lambda a, b: a * b,
            "power": lambda a, b: a ** b,
            "modulo": lambda a, b: a % b
        }
        
        if operation not in operations:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")
        
        base_func = operations[operation]
        
        def operation_function(a, b):
            result = base_func(a, b)
            print(f"{operation}({a}, {b}) = {result}")
            return result
        
        operation_function.__name__ = f"{operation}_function"
        operation_function.__doc__ = f"–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é {operation}"
        
        return operation_function
    
    print("1. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    add_func = create_operation_function("add")
    multiply_func = create_operation_function("multiply")
    
    add_func(5, 3)
    multiply_func(4, 7)
    
    # –§–∞–±—Ä–∏–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    def create_validator_decorator(validation_func, error_message):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                if not validation_func(*args, **kwargs):
                    raise ValueError(error_message)
                return func(*args, **kwargs)
            return wrapper
        return decorator
    
    print("\n2. –§–∞–±—Ä–∏–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤:")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    positive_numbers = create_validator_decorator(
        lambda *args, **kwargs: all(isinstance(arg, (int, float)) and arg > 0 
                                   for arg in args if isinstance(arg, (int, float))),
        "–í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏"
    )
    
    non_empty_strings = create_validator_decorator(
        lambda *args, **kwargs: all(isinstance(arg, str) and len(arg) > 0 
                                   for arg in args if isinstance(arg, str)),
        "–í—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º–∏"
    )
    
    @positive_numbers
    @non_empty_strings
    def create_product(name, price, quantity):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        return {
            "name": name,
            "price": price,
            "quantity": quantity,
            "total_value": price * quantity
        }
    
    try:
        product1 = create_product("–¢–µ–ª–µ—Ñ–æ–Ω", 50000, 2)
        print(f"–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: {product1}")
        
        # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        # product2 = create_product("", 50000, 2)
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    # –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    class PluginSystem:
        """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤"""
        def __init__(self):
            self.plugins = {}
        
        def register(self, name):
            """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤"""
            def decorator(func):
                self.plugins[name] = func
                print(f"üîå –ü–ª–∞–≥–∏–Ω '{name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return func
            return decorator
        
        def execute(self, name, *args, **kwargs):
            """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–≥–∏–Ω –ø–æ –∏–º–µ–Ω–∏"""
            if name in self.plugins:
                return self.plugins[name](*args, **kwargs)
            else:
                raise ValueError(f"–ü–ª–∞–≥–∏–Ω '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        def list_plugins(self):
            """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
            return list(self.plugins.keys())
    
    print("\n3. –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤:")
    
    plugin_system = PluginSystem()
    
    @plugin_system.register("calculator")
    def calculator_plugin(operation, a, b):
        operations = {
            "add": a + b,
            "sub": a - b,
            "mul": a * b,
            "div": a / b if b != 0 else "Division by zero"
        }
        return operations.get(operation, "Unknown operation")
    
    @plugin_system.register("formatter")
    def formatter_plugin(text, style="upper"):
        styles = {
            "upper": text.upper(),
            "lower": text.lower(),
            "title": text.title(),
            "reverse": text[::-1]
        }
        return styles.get(style, text)
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã: {plugin_system.list_plugins()}")
    
    calc_result = plugin_system.execute("calculator", "add", 10, 5)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {calc_result}")
    
    formatted_text = plugin_system.execute("formatter", "hello world", "title")
    print(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {formatted_text}")
    
    # –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Å TTL (Time To Live)
    def memoize_with_ttl(ttl_seconds=60):
        """–ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ –∫–µ—à–∞"""
        def decorator(func):
            cache = {}
            
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                import time
                
                key = str(args) + str(sorted(kwargs.items()))
                current_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à–µ –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
                if key in cache:
                    result, timestamp = cache[key]
                    if current_time - timestamp < ttl_seconds:
                        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞ (–≤–æ–∑—Ä–∞—Å—Ç: {current_time - timestamp:.1f}—Å)")
                        return result
                    else:
                        print(f"‚è∞ –ö–µ—à –∏—Å—Ç–µ–∫, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º...")
                        del cache[key]
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∏ –∫–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = func(*args, **kwargs)
                cache[key] = (result, current_time)
                print(f"üíø –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à —Å TTL {ttl_seconds}—Å")
                return result
            
            return wrapper
        return decorator
    
    print("\n4. –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Å TTL:")
    
    @memoize_with_ttl(ttl_seconds=2)
    def slow_calculation(n):
        """–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"""
        print(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é –º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è {n}")
        time.sleep(0.1)
        return n ** 3
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã TTL –∫–µ—à–∞
    print(f"–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {slow_calculation(5)}")
    print(f"–í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {slow_calculation(5)}")  # –ò–∑ –∫–µ—à–∞
    time.sleep(2.1)  # –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL
    print(f"–¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤: {slow_calculation(5)}")  # –ü–µ—Ä–µ—Å—á–µ—Ç


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    """
    examples = [
        ("–û—Å–Ω–æ–≤—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π", example_01_basic_functions),
        ("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", example_02_advanced_parameters),
        ("–û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è", example_03_scope_and_closures),
        ("–§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞", example_04_higher_order_functions),
        ("–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã", example_05_decorators),
        ("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã", example_06_generators),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", example_07_functional_programming),
        ("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏", example_08_advanced_techniques),
    ]
    
    print("üéØ –ü—Ä–∏–º–µ—Ä—ã: –§—É–Ω–∫—Ü–∏–∏ –≤ Python")
    print("=" * 50)
    
    for i, (name, func) in enumerate(examples, 1):
        print(f"\n{i}. {name}")
        print("-" * (len(name) + 3))
        try:
            func()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞: {e}")
        
        if i < len(examples):
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    main() 