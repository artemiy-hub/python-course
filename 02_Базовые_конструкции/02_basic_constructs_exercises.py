#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π:
- –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
- –£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –¶–∏–∫–ª—ã –∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏
- –í–≤–æ–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
- –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏

–ö–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
"""

import math
from datetime import datetime


def exercise_01():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    
    –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è:
    1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ
    2. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ —Ü–µ–ª—ã–º –∏–ª–∏ –¥—Ä–æ–±–Ω—ã–º
    3. –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Å–ª–µ (—Ç–∏–ø, —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö, –∫–≤–∞–¥—Ä–∞—Ç)
    4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º (–¥–ª—è —Ü–µ–ª—ã—Ö)
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # try:
    #     user_input = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ")
    #     number = float(user_input)
    #     
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ü–µ–ª–æ–µ –ª–∏ —á–∏—Å–ª–æ
    #     if number.is_integer():
    #         number = int(number)
    #         print(f"–ß–∏—Å–ª–æ: {number}")
    #         print(f"–¢–∏–ø: {type(number).__name__}")
    #         print(f"–†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö: {sys.getsizeof(number)}")
    #         print(f"–ö–≤–∞–¥—Ä–∞—Ç: {number ** 2}")
    #         
    #         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
    #         if number > 1:
    #             is_prime = True
    #             for i in range(2, int(math.sqrt(number)) + 1):
    #                 if number % i == 0:
    #                     is_prime = False
    #                     break
    #             print(f"–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ: {'–î–∞' if is_prime else '–ù–µ—Ç'}")
    #     else:
    #         print(f"–ß–∏—Å–ª–æ: {number}")
    #         print(f"–¢–∏–ø: {type(number).__name__}")
    #         print(f"–†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö: {sys.getsizeof(number)}")
    #         print(f"–ö–≤–∞–¥—Ä–∞—Ç: {number ** 2}")
    #         print("–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º")
    # 
    # except ValueError:
    #     print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ!")


def exercise_02():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
    
    –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–ª—É –ø–∞—Ä–æ–ª—è:
    1. –î–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
    2. –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
    3. –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
    4. –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã
    5. –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    –í—ã–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ")
    # 
    # score = 0
    # recommendations = []
    # 
    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    # if len(password) >= 8:
    #     score += 1
    # else:
    #     recommendations.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")
    # 
    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
    # if any(c.isupper() for c in password):
    #     score += 1
    # else:
    #     recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
    # 
    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤
    # if any(c.islower() for c in password):
    #     score += 1
    # else:
    #     recommendations.append("–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
    # 
    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä
    # if any(c.isdigit() for c in password):
    #     score += 1
    # else:
    #     recommendations.append("–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã")
    # 
    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    # special_chars = "!@#$%^&*()_+-=[]{}|;:,.<>?"
    # if any(c in special_chars for c in password):
    #     score += 1
    # else:
    #     recommendations.append("–î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
    # 
    # # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    # strength_levels = {
    #     1: "–û—á–µ–Ω—å —Å–ª–∞–±—ã–π",
    #     2: "–°–ª–∞–±—ã–π", 
    #     3: "–°—Ä–µ–¥–Ω–∏–π",
    #     4: "–°–∏–ª—å–Ω—ã–π",
    #     5: "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    # }
    # 
    # print(f"–û—Ü–µ–Ω–∫–∞ –ø–∞—Ä–æ–ª—è: {score}/5 ({strength_levels[score]})")
    # if recommendations:
    #     print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
    #     for rec in recommendations:
    #         print(f"- {rec}")


def exercise_03():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3: –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
    
    –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ":
    1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
    2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å
    3. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ)
    4. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    5. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3: –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # import random
    # 
    # def play_game():
    #     number = random.randint(1, 100)
    #     attempts = 0
    #     max_attempts = 10
    #     
    #     print(f"–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –£ –≤–∞—Å {max_attempts} –ø–æ–ø—ã—Ç–æ–∫!")
    #     
    #     while attempts < max_attempts:
    #         try:
    #             guess = int(input(f"–ü–æ–ø—ã—Ç–∫–∞ {attempts + 1}: "))
    #             attempts += 1
    #             
    #             if guess == number:
    #                 print(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {number} –∑–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫!")
    #                 return True
    #             elif guess < number:
    #                 print("üìà –ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ")
    #             else:
    #                 print("üìâ –ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ")
    #                 
    #         except ValueError:
    #             print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    #             continue
    #     
    #     print(f"üòû –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: {number}")
    #     return False
    # 
    # # –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    # while True:
    #     play_game()
    #     
    #     play_again = input("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ").lower()
    #     if play_again not in ['–¥–∞', 'yes', 'y', '–¥']:
    #         print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
    #         break


def exercise_04():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    
    –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π:
    1. –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (+, -, *, /, //, %, **)
    2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
    3. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    4. –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    5. –ò–º–µ–µ—Ç –∫–æ–º–∞–Ω–¥—ã: 'history', 'clear', 'quit'
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∏—Å—Ç–æ—Ä–∏–µ–π ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # history = []
    # 
    # def calculate(expression):
    #     try:
    #         # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    #         allowed_chars = set('0123456789+-*/().% ')
    #         if all(c in allowed_chars for c in expression):
    #             result = eval(expression)
    #             history.append(f"{expression} = {result}")
    #             return result
    #         else:
    #             raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")
    #     except Exception as e:
    #         return f"–û—à–∏–±–∫–∞: {e}"
    # 
    # print("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    # print("- –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 + 3 * 4)")
    # print("- 'history' - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    # print("- 'clear' - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    # print("- 'quit' - –≤—ã—Ö–æ–¥")
    # 
    # while True:
    #     user_input = input(">>> ").strip()
    #     
    #     if user_input.lower() == 'quit':
    #         print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    #         break
    #     elif user_input.lower() == 'history':
    #         if history:
    #             print("–ò—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:")
    #             for i, operation in enumerate(history, 1):
    #                 print(f"{i}. {operation}")
    #         else:
    #             print("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    #     elif user_input.lower() == 'clear':
    #         history.clear()
    #         print("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
    #     elif user_input:
    #         result = calculate(user_input)
    #         print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


def exercise_05():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 5: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
    
    –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞:
    1. –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤, —Å–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    2. –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ
    3. –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –±—É–∫–≤
    4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (–ø–æ –Ω–∞–ª–∏—á–∏—é –∫–∏—Ä–∏–ª–ª–∏—Ü—ã/–ª–∞—Ç–∏–Ω–∏—Ü—ã)
    5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏–Ω–µ —Å–ª–æ–≤
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 5: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ")
    # 
    # if not text.strip():
    #     print("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
    #     return
    # 
    # # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    # char_count = len(text)
    # char_count_no_spaces = len(text.replace(' ', ''))
    # word_count = len(text.split())
    # sentence_count = text.count('.') + text.count('!') + text.count('?')
    # 
    # print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞:")
    # print(f"–°–∏–º–≤–æ–ª–æ–≤ –≤—Å–µ–≥–æ: {char_count}")
    # print(f"–°–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: {char_count_no_spaces}")
    # print(f"–°–ª–æ–≤: {word_count}")
    # print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {sentence_count}")
    # 
    # # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–≤
    # if word_count > 0:
    #     words = text.split()
    #     word_lengths = [len(word.strip('.,!?;:')) for word in words]
    #     
    #     longest_word = max(words, key=lambda w: len(w.strip('.,!?;:')))
    #     shortest_word = min(words, key=lambda w: len(w.strip('.,!?;:')))
    #     
    #     print(f"\nüìù –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–≤:")
    #     print(f"–°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: '{longest_word}' ({len(longest_word.strip('.,!?;:'))} —Å–∏–º–≤–æ–ª–æ–≤)")
    #     print(f"–°–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ: '{shortest_word}' ({len(shortest_word.strip('.,!?;:'))} —Å–∏–º–≤–æ–ª–æ–≤)")
    #     print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: {sum(word_lengths) / len(word_lengths):.1f} —Å–∏–º–≤–æ–ª–æ–≤")
    # 
    # # –ß–∞—Å—Ç–æ—Ç–∞ –±—É–∫–≤
    # letter_freq = {}
    # for char in text.lower():
    #     if char.isalpha():
    #         letter_freq[char] = letter_freq.get(char, 0) + 1
    # 
    # if letter_freq:
    #     print(f"\nüî§ –¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –±—É–∫–≤:")
    #     sorted_letters = sorted(letter_freq.items(), key=lambda x: x[1], reverse=True)
    #     for letter, count in sorted_letters[:5]:
    #         percentage = (count / sum(letter_freq.values())) * 100
    #         print(f"'{letter}': {count} —Ä–∞–∑ ({percentage:.1f}%)")
    # 
    # # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    # cyrillic_count = sum(1 for char in text if '\u0400' <= char <= '\u04FF')
    # latin_count = sum(1 for char in text if 'a' <= char.lower() <= 'z')
    # 
    # print(f"\nüåç –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞:")
    # if cyrillic_count > latin_count:
    #     print("–ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (—Ä—É—Å—Å–∫–∏–π/—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π/–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π)")
    # elif latin_count > cyrillic_count:
    #     print("–ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –ª–∞—Ç–∏–Ω–∏—Ü–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π/–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —è–∑—ã–∫–∏)")
    # else:
    #     print("–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫")


def exercise_06():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 6: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    
    –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
    1. –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –∑–≤–µ–∑–¥–æ—á–µ–∫
    2. –†–æ–º–±
    3. –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
    4. –ü–∞—Ç—Ç–µ—Ä–Ω "–µ–ª–æ—á–∫–∞"
    5. –ß–∏—Å–ª–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 6: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # def draw_triangle(height):
    #     print("üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫:")
    #     for i in range(1, height + 1):
    #         spaces = ' ' * (height - i)
    #         stars = '*' * (2 * i - 1)
    #         print(spaces + stars)
    # 
    # def draw_diamond(size):
    #     print("üíé –†–æ–º–±:")
    #     # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å
    #     for i in range(1, size + 1):
    #         spaces = ' ' * (size - i)
    #         stars = '*' * (2 * i - 1)
    #         print(spaces + stars)
    #     # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å
    #     for i in range(size - 1, 0, -1):
    #         spaces = ' ' * (size - i)
    #         stars = '*' * (2 * i - 1)
    #         print(spaces + stars)
    # 
    # def draw_multiplication_table(n):
    #     print(f"üìä –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è {n}x{n}:")
    #     print("    ", end="")
    #     for i in range(1, n + 1):
    #         print(f"{i:4}", end="")
    #     print()
    #     print("   " + "-" * (4 * n + 1))
    #     
    #     for i in range(1, n + 1):
    #         print(f"{i:2} |", end="")
    #         for j in range(1, n + 1):
    #             print(f"{i*j:4}", end="")
    #         print()
    # 
    # def draw_christmas_tree(height):
    #     print("üéÑ –ï–ª–æ—á–∫–∞:")
    #     for i in range(1, height + 1):
    #         spaces = ' ' * (height - i)
    #         stars = '*' * (2 * i - 1)
    #         print(spaces + stars)
    #     # –°—Ç–≤–æ–ª
    #     trunk_spaces = ' ' * (height - 1)
    #     print(trunk_spaces + '*')
    # 
    # def draw_number_pyramid(height):
    #     print("üî¢ –ß–∏—Å–ª–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞:")
    #     for i in range(1, height + 1):
    #         spaces = ' ' * (height - i)
    #         numbers = ' '.join(str(j) for j in range(1, i + 1))
    #         print(spaces + numbers)
    # 
    # # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    # size = 5
    # 
    # draw_triangle(size)
    # print()
    # draw_diamond(size)
    # print()
    # draw_multiplication_table(size)
    # print()
    # draw_christmas_tree(size)
    # print()
    # draw_number_pyramid(size)


def exercise_07():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 7: –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫
    
    –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫:
    1. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
    2. –í—ã—á–∏—Å–ª–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –±—É–∫–≤–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É (A, B, C, D, F)
    4. –ü–æ–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ª—É—á—à–∏–π/—Ö—É–¥—à–∏–π –ø—Ä–µ–¥–º–µ—Ç)
    5. –î–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 7: –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫ ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # subjects = {}
    # 
    # print("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º (–≤–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
    # 
    # while True:
    #     subject = input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: ").strip()
    #     if subject.lower() == '–≥–æ—Ç–æ–≤–æ':
    #         break
    #     
    #     try:
    #         grade = float(input(f"–û—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} (0-100): "))
    #         if 0 <= grade <= 100:
    #             subjects[subject] = grade
    #         else:
    #             print("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100!")
    #     except ValueError:
    #         print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É!")
    # 
    # if not subjects:
    #     print("–ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏!")
    #     return
    # 
    # # –í—ã—á–∏—Å–ª–µ–Ω–∏—è
    # grades = list(subjects.values())
    # average = sum(grades) / len(grades)
    # 
    # # –ë—É–∫–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    # def get_letter_grade(score):
    #     if score >= 90: return 'A'
    #     elif score >= 80: return 'B'
    #     elif score >= 70: return 'C'
    #     elif score >= 60: return 'D'
    #     else: return 'F'
    # 
    # letter_grade = get_letter_grade(average)
    # 
    # # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    # best_subject = max(subjects, key=subjects.get)
    # worst_subject = min(subjects, key=subjects.get)
    # 
    # print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    # print(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average:.2f}")
    # print(f"–ë—É–∫–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {letter_grade}")
    # print(f"–õ—É—á—à–∏–π –ø—Ä–µ–¥–º–µ—Ç: {best_subject} ({subjects[best_subject]:.1f})")
    # print(f"–•—É–¥—à–∏–π –ø—Ä–µ–¥–º–µ—Ç: {worst_subject} ({subjects[worst_subject]:.1f})")
    # 
    # # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    # print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    # if average >= 90:
    #     print("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
    # elif average >= 80:
    #     print("–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ù–µ–º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π –∏ –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    # elif average >= 70:
    #     print("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –°—Ç–æ–∏—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ–ª–∏—Ç—å –∏–∑—É—á–µ–Ω–∏—é.")
    # else:
    #     print("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –æ—Ü–µ–Ω–æ–∫.")
    # 
    # if subjects[worst_subject] < 70:
    #     print(f"–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å—Ç–æ–∏—Ç —É–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—É: {worst_subject}")


def exercise_08():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 8: –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏—è
    
    –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —Å—á–∏—Å–ª–µ–Ω–∏—è:
    1. –î–µ—Å—è—Ç–∏—á–Ω–∞—è ‚Üí –¥–≤–æ–∏—á–Ω–∞—è, –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–∞—è, —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è
    2. –î–≤–æ–∏—á–Ω–∞—è ‚Üí –¥–µ—Å—è—Ç–∏—á–Ω–∞—è
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
    4. –ü–æ–∫–∞–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤
    5. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 8: –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏—è ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # def decimal_to_binary(n):
    #     if n == 0:
    #         return "0"
    #     
    #     binary = ""
    #     steps = []
    #     original_n = n
    #     
    #     while n > 0:
    #         remainder = n % 2
    #         binary = str(remainder) + binary
    #         steps.append(f"{n} √∑ 2 = {n // 2} (–æ—Å—Ç–∞—Ç–æ–∫ {remainder})")
    #         n //= 2
    #     
    #     print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ {original_n} –≤ –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É:")
    #     for step in steps:
    #         print(f"  {step}")
    #     
    #     return binary
    # 
    # def binary_to_decimal(binary_str):
    #     try:
    #         decimal = 0
    #         power = 0
    #         steps = []
    #         
    #         for digit in reversed(binary_str):
    #             if digit not in '01':
    #                 raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–≤–æ–∏—á–Ω–∞—è –∑–∞–ø–∏—Å—å")
    #             
    #             value = int(digit) * (2 ** power)
    #             if value > 0:
    #                 steps.append(f"{digit} √ó 2^{power} = {value}")
    #             decimal += value
    #             power += 1
    #         
    #         print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ {binary_str} –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É:")
    #         for step in steps:
    #             print(f"  {step}")
    #         if steps:
    #             print(f"  –°—É–º–º–∞: {' + '.join(str(int(digit) * (2 ** (len(binary_str) - 1 - i))) for i, digit in enumerate(binary_str) if digit == '1')} = {decimal}")
    #         
    #         return decimal
    #     except ValueError as e:
    #         return str(e)
    # 
    # def show_menu():
    #     print("\nüî¢ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏—è")
    #     print("1. –î–µ—Å—è—Ç–∏—á–Ω–∞—è ‚Üí –î–≤–æ–∏—á–Ω–∞—è")
    #     print("2. –î–µ—Å—è—Ç–∏—á–Ω–∞—è ‚Üí –í–æ—Å—å–º–µ—Ä–∏—á–Ω–∞—è")
    #     print("3. –î–µ—Å—è—Ç–∏—á–Ω–∞—è ‚Üí –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è")
    #     print("4. –î–≤–æ–∏—á–Ω–∞—è ‚Üí –î–µ—Å—è—Ç–∏—á–Ω–∞—è")
    #     print("5. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —á–∏—Å–ª–∞")
    #     print("0. –í—ã—Ö–æ–¥")
    # 
    # while True:
    #     show_menu()
    #     choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
    #     
    #     if choice == '0':
    #         print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    #         break
    #     elif choice == '1':
    #         try:
    #             num = int(input("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: "))
    #             result = decimal_to_binary(num)
    #             print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {num}‚ÇÅ‚ÇÄ = {result}‚ÇÇ")
    #         except ValueError:
    #             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    #     elif choice == '2':
    #         try:
    #             num = int(input("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: "))
    #             result = oct(num)[2:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '0o'
    #             print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {num}‚ÇÅ‚ÇÄ = {result}‚Çà")
    #         except ValueError:
    #             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    #     elif choice == '3':
    #         try:
    #             num = int(input("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: "))
    #             result = hex(num)[2:].upper()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '0x'
    #             print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {num}‚ÇÅ‚ÇÄ = {result}‚ÇÅ‚ÇÜ")
    #         except ValueError:
    #             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    #     elif choice == '4':
    #         binary = input("–í–≤–µ–¥–∏—Ç–µ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: ").strip()
    #         result = binary_to_decimal(binary)
    #         if isinstance(result, int):
    #             print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {binary}‚ÇÇ = {result}‚ÇÅ‚ÇÄ")
    #         else:
    #             print(f"–û—à–∏–±–∫–∞: {result}")
    #     elif choice == '5':
    #         try:
    #             num = int(input("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: "))
    #             print(f"\n–í—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ {num}:")
    #             print(f"–î–µ—Å—è—Ç–∏—á–Ω–∞—è:      {num}")
    #             print(f"–î–≤–æ–∏—á–Ω–∞—è:        {bin(num)[2:]}")
    #             print(f"–í–æ—Å—å–º–µ—Ä–∏—á–Ω–∞—è:    {oct(num)[2:]}")
    #             print(f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è: {hex(num)[2:].upper()}")
    #         except ValueError:
    #             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    #     else:
    #         print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")


def exercise_09():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 9: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    
    –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:
    1. –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è
    2. –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è  
    3. –ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
    4. –§–∞–∫—Ç–æ—Ä–∏–∞–ª—ã
    5. –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 9: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # def arithmetic_sequence(first, diff, count):
    #     """–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è"""
    #     sequence = []
    #     for i in range(count):
    #         sequence.append(first + i * diff)
    #     return sequence
    # 
    # def geometric_sequence(first, ratio, count):
    #     """–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è"""
    #     sequence = []
    #     for i in range(count):
    #         sequence.append(first * (ratio ** i))
    #     return sequence
    # 
    # def fibonacci_sequence(count):
    #     """–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏"""
    #     if count <= 0:
    #         return []
    #     elif count == 1:
    #         return [0]
    #     elif count == 2:
    #         return [0, 1]
    #     
    #     sequence = [0, 1]
    #     for i in range(2, count):
    #         sequence.append(sequence[i-1] + sequence[i-2])
    #     return sequence
    # 
    # def factorial_sequence(count):
    #     """–§–∞–∫—Ç–æ—Ä–∏–∞–ª—ã"""
    #     sequence = []
    #     for i in range(count):
    #         if i == 0:
    #             factorial = 1
    #         else:
    #             factorial = sequence[i-1] * i
    #         sequence.append(factorial)
    #     return sequence
    # 
    # def prime_sequence(count):
    #     """–ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞"""
    #     def is_prime(n):
    #         if n < 2:
    #             return False
    #         for i in range(2, int(n ** 0.5) + 1):
    #             if n % i == 0:
    #                 return False
    #         return True
    #     
    #     primes = []
    #     num = 2
    #     while len(primes) < count:
    #         if is_prime(num):
    #             primes.append(num)
    #         num += 1
    #     return primes
    # 
    # def show_sequence_menu():
    #     print("\nüî¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    #     print("1. –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è")
    #     print("2. –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è")
    #     print("3. –ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏")
    #     print("4. –§–∞–∫—Ç–æ—Ä–∏–∞–ª—ã")
    #     print("5. –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞")
    #     print("0. –í—ã—Ö–æ–¥")
    # 
    # while True:
    #     show_sequence_menu()
    #     choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ").strip()
    #     
    #     if choice == '0':
    #         print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    #         break
    #     
    #     try:
    #         count = int(input("–°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å: "))
    #         if count <= 0:
    #             print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
    #             continue
    #             
    #         if choice == '1':
    #             first = float(input("–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: "))
    #             diff = float(input("–†–∞–∑–Ω–æ—Å—Ç—å: "))
    #             result = arithmetic_sequence(first, diff, count)
    #             print(f"–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è: {result}")
    #             print(f"–§–æ—Ä–º—É–ª–∞: a_n = {first} + (n-1) √ó {diff}")
    #             
    #         elif choice == '2':
    #             first = float(input("–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: "))
    #             ratio = float(input("–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: "))
    #             result = geometric_sequence(first, ratio, count)
    #             print(f"–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è: {result}")
    #             print(f"–§–æ—Ä–º—É–ª–∞: a_n = {first} √ó {ratio}^(n-1)")
    #             
    #         elif choice == '3':
    #             result = fibonacci_sequence(count)
    #             print(f"–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏: {result}")
    #             print("–§–æ—Ä–º—É–ª–∞: F_n = F_(n-1) + F_(n-2), F_0=0, F_1=1")
    #             
    #         elif choice == '4':
    #             result = factorial_sequence(count)
    #             print(f"–§–∞–∫—Ç–æ—Ä–∏–∞–ª—ã: {result}")
    #             print("–§–æ—Ä–º—É–ª–∞: n! = n √ó (n-1) √ó ... √ó 2 √ó 1")
    #             
    #         elif choice == '5':
    #             result = prime_sequence(count)
    #             print(f"–ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞: {result}")
    #             print("–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∏ —Å–∞–º–æ —Å–µ–±—è")
    #             
    #         else:
    #             print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
    #             
    #     except ValueError:
    #         print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞.")


def exercise_10():
    """
    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 10: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    
    –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è:
    1. –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    2. –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –ª—é–±–æ–π –º–µ—Å—è—Ü/–≥–æ–¥
    3. –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
    4. –ù–∞–π—Ç–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ª—é–±–æ–π –¥–∞—Ç—ã
    5. –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã
    """
    print("=== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 10: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ===")
    
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    
    # –†–ï–®–ï–ù–ò–ï (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏):
    # import calendar
    # from datetime import datetime, date
    # 
    # def show_calendar(year, month):
    #     """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü"""
    #     print(f"\nüìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {calendar.month_name[month]} {year}")
    #     print(calendar.month(year, month))
    # 
    # def get_day_of_week(year, month, day):
    #     """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"""
    #     try:
    #         date_obj = date(year, month, day)
    #         days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', 
    #                '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    #         return days[date_obj.weekday()]
    #     except ValueError:
    #         return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
    # 
    # def calculate_date_difference(date1, date2):
    #     """–í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏"""
    #     try:
    #         diff = abs(date2 - date1).days
    #         return diff
    #     except:
    #         return None
    # 
    # def get_holidays(year):
    #     """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
    #     holidays = {
    #         (1, 1): "–ù–æ–≤—ã–π –≥–æ–¥",
    #         (1, 7): "–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ–≤–æ",
    #         (2, 23): "–î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞",
    #         (3, 8): "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å",
    #         (5, 1): "–ü—Ä–∞–∑–¥–Ω–∏–∫ –í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞",
    #         (5, 9): "–î–µ–Ω—å –ü–æ–±–µ–¥—ã",
    #         (6, 12): "–î–µ–Ω—å –†–æ—Å—Å–∏–∏",
    #         (11, 4): "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞"
    #     }
    #     
    #     print(f"\nüéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ {year} –≥–æ–¥–∞:")
    #     for (month, day), name in holidays.items():
    #         day_of_week = get_day_of_week(year, month, day)
    #         print(f"{day:2}.{month:02} ({day_of_week}) - {name}")
    # 
    # def show_calendar_menu():
    #     print("\nüìÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
    #     print("1. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
    #     print("2. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü")
    #     print("3. –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–∞—Ç—ã")
    #     print("4. –†–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏")
    #     print("5. –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –≥–æ–¥–∞")
    #     print("6. –ì–æ–¥–æ–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
    #     print("0. –í—ã—Ö–æ–¥")
    # 
    # while True:
    #     show_calendar_menu()
    #     choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
    #     
    #     if choice == '0':
    #         print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    #         break
    #         
    #     elif choice == '1':
    #         now = datetime.now()
    #         show_calendar(now.year, now.month)
    #         
    #     elif choice == '2':
    #         try:
    #             year = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥: "))
    #             month = int(input("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü (1-12): "))
    #             if 1 <= month <= 12:
    #                 show_calendar(year, month)
    #             else:
    #                 print("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12!")
    #         except ValueError:
    #             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")
    #             
    #     elif choice == '3':
    #         try:
    #             year = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥: "))
    #             month = int(input("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü: "))
    #             day = int(input("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å: "))
    #             day_name = get_day_of_week(year, month, day)
    #             print(f"{day:02}.{month:02}.{year} - {day_name}")
    #         except ValueError:
    #             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")
    #             
    #     elif choice == '4':
    #         try:
    #             print("–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞:")
    #             year1 = int(input("–ì–æ–¥: "))
    #             month1 = int(input("–ú–µ—Å—è—Ü: "))
    #             day1 = int(input("–î–µ–Ω—å: "))
    #             date1 = date(year1, month1, day1)
    #             
    #             print("–í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞:")
    #             year2 = int(input("–ì–æ–¥: "))
    #             month2 = int(input("–ú–µ—Å—è—Ü: "))
    #             day2 = int(input("–î–µ–Ω—å: "))
    #             date2 = date(year2, month2, day2)
    #             
    #             diff = calculate_date_difference(date1, date2)
    #             print(f"–†–∞–∑–Ω–æ—Å—Ç—å: {diff} –¥–Ω–µ–π")
    #             print(f"–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ {diff // 365} –ª–µ—Ç, {(diff % 365) // 30} –º–µ—Å—è—Ü–µ–≤, {(diff % 365) % 30} –¥–Ω–µ–π")
    #             
    #         except ValueError:
    #             print("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!")
    #             
    #     elif choice == '5':
    #         try:
    #             year = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥: "))
    #             get_holidays(year)
    #         except ValueError:
    #             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥!")
    #             
    #     elif choice == '6':
    #         try:
    #             year = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥: "))
    #             print(f"\nüìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {year} –≥–æ–¥")
    #             print(calendar.calendar(year))
    #         except ValueError:
    #             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥!")
    #             
    #     else:
    #         print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    """
    exercises = [
        ("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö", exercise_01),
        ("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π", exercise_02),
        ("–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", exercise_03),
        ("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∏—Å—Ç–æ—Ä–∏–µ–π", exercise_04),
        ("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞", exercise_05),
        ("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", exercise_06),
        ("–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫", exercise_07),
        ("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏—è", exercise_08),
        ("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π", exercise_09),
        ("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", exercise_10),
    ]
    
    print("üéØ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Python")
    print("=" * 50)
    
    while True:
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        for i, (name, _) in enumerate(exercises, 1):
            print(f"{i:2}. {name}")
        print(" 0. –í—ã—Ö–æ–¥")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (0-10): "))
            if choice == 0:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif 1 <= choice <= len(exercises):
                print("\n" + "="*60)
                exercises[choice-1][1]()
                print("="*60)
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
        except KeyboardInterrupt:
            print("\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break


if __name__ == "__main__":
    main() 